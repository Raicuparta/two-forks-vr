Shader "Marmoset/Transparent/Effects/Diffuse IBL Blended" {
	Properties {
		_TintColor ("Tint Color", Vector) = (1,1,1,1)
		_MainTex ("Particle Texture", 2D) = "white" {}
		_InvFade ("Soft Particles Factor", Range(0.01, 3)) = 1
		_AmbientColorDesaturation ("Ambient Color Desaturation", Range(0, 1)) = 0
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 25219
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 14 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord2 o3
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.z, c6, r1
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c10, r1
					    mov o3.z, -r0.z
					    mul r0.z, r0.y, c11.x
					    mov r3.xyw, r0
					    mov o3.w, r0.w
					    mul r2.xzw, r0.xywz, c14.z
					    add o3.xy, r2.z, r2.xwzw
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 21 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov r2.z, r0.x
					    mov o3.x, r0.x
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 16 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD1 = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    dcl_texcoord2 o4
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c14.z
					    dp4 r0.y, c5, r1
					    mul r2.y, r0.y, c11.x
					    mul r2.w, r2.y, c14.z
					    add o4.xy, r2.z, r2.xwzw
					    dp4 r2.x, c10, r1
					    dp4 r0.z, c6, r1
					    mov o4.z, -r2.x
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov r3, r0
					    mov o3.x, r0.z
					    mov o4.w, r0.w
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 23 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    vs_TEXCOORD1 = u_xlat1.z;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 14 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord2 o3
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.z, c6, r1
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c10, r1
					    mov o3.z, -r0.z
					    mul r0.z, r0.y, c11.x
					    mov r3.xyw, r0
					    mov o3.w, r0.w
					    mul r2.xzw, r0.xywz, c14.z
					    add o3.xy, r2.z, r2.xwzw
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 21 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov r2.z, r0.x
					    mov o3.x, r0.x
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 16 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD1 = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    dcl_texcoord2 o4
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c14.z
					    dp4 r0.y, c5, r1
					    mul r2.y, r0.y, c11.x
					    mul r2.w, r2.y, c14.z
					    add o4.xy, r2.z, r2.xwzw
					    dp4 r2.x, c10, r1
					    dp4 r0.z, c6, r1
					    mov o4.z, -r2.x
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov r3, r0
					    mov o3.x, r0.z
					    mov o4.w, r0.w
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 23 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    vs_TEXCOORD1 = u_xlat1.z;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float4 _ExposureIBL;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float4 _TintColor;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _AmbientColorDesaturation c0       1
					//   _TintColor                c1       1
					//   _ExposureIBL              c2       1
					//   _SH0                      c3       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c4, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_2d s0
					    mov r0.xyz, c3
					    dp3_pp r0.w, c4, r0
					    add r1.xyz, r0.w, -c3
					    mad r0.xyz, c0.x, r1, r0
					    texld r1, v1, s0
					    add r1, r1, r1
					    mul r2, c1, v0
					    mul_pp r1, r1, r2
					    mul r0.xyz, r0, r1
					    mov_pp oC0.w, r1.w
					    mul_pp oC0.xyz, r0, c2.w
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[11];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.x = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat0.xyz = u_xlat0.xxx + (-_SH0.xyz);
					    u_xlat0.xyz = vec3(_AmbientColorDesaturation) * u_xlat0.xyz + _SH0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat2 = vs_COLOR0 * _TintColor;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ExposureIBL;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _ZBufferParams            c0       1
					//   _AmbientColorDesaturation c1       1
					//   _TintColor                c2       1
					//   _ExposureIBL              c3       1
					//   _SH0                      c4       1
					//   _InvFade                  c5       1
					//   _MainTex                  s0       1
					//   _CameraDepthTexture       s1       1
					//
					
					    ps_3_0
					    def c6, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1.xy
					    dcl_texcoord2 v2
					    dcl_2d s0
					    dcl_2d s1
					    texldp r0, v2, s1
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v2.z
					    mul_sat r0.x, r0.x, c5.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c2
					    texld r1, v1, s0
					    add r1, r1, r1
					    mul_pp r0, r0, r1
					    mov r1.xyz, c4
					    dp3_pp r1.w, c6, r1
					    add r2.xyz, r1.w, -c4
					    mad r1.xyz, c1.x, r2, r1
					    mul r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mul_pp oC0.xyz, r0, c3.w
					
					// approximately 18 instruction slots used (2 texture, 16 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);
					    u_xlat0.x = u_xlat0.x * _InvFade;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.w = u_xlat0.x * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz;
					    u_xlat0 = u_xlat0 * _TintColor;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.x = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat1.xyz = u_xlat1.xxx + (-_SH0.xyz);
					    u_xlat1.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + _SH0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float4 _ExposureIBL;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float4 _TintColor;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   _AmbientColorDesaturation c2       1
					//   _TintColor                c3       1
					//   _ExposureIBL              c4       1
					//   _SH0                      c5       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c6, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.x
					    dcl_2d s0
					    mov r0.xyz, c5
					    dp3_pp r0.w, c6, r0
					    add r1.xyz, r0.w, -c5
					    mad r0.xyz, c2.x, r1, r0
					    texld r1, v1, s0
					    add r1, r1, r1
					    mul r2, c3, v0
					    mul_pp r1, r1, r2
					    mul r0.xyz, r0, r1
					    mov_pp oC0.w, r1.w
					    mov r1.xyz, c0
					    mad r0.xyz, c4.w, r0, -r1
					    mul r0.w, c1.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					
					// approximately 16 instruction slots used (1 texture, 15 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[11];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _ProjectionParams.z;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = u_xlat0 * unity_FogParams.x;
					    u_xlat0 = u_xlat0 * (-u_xlat0);
					    u_xlat0 = exp2(u_xlat0);
					    u_xlat3.x = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat3.xyz = u_xlat3.xxx + (-_SH0.xyz);
					    u_xlat3.xyz = vec3(_AmbientColorDesaturation) * u_xlat3.xyz + _SH0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat2 = vs_COLOR0 * _TintColor;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat3.xyz = _ExposureIBL.www * u_xlat3.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat0) * u_xlat3.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ExposureIBL;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _ZBufferParams            c0       1
					//   unity_FogColor            c1       1
					//   unity_FogParams           c2       1
					//   _AmbientColorDesaturation c3       1
					//   _TintColor                c4       1
					//   _ExposureIBL              c5       1
					//   _SH0                      c6       1
					//   _InvFade                  c7       1
					//   _MainTex                  s0       1
					//   _CameraDepthTexture       s1       1
					//
					
					    ps_3_0
					    def c8, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.x
					    dcl_texcoord2 v3
					    dcl_2d s0
					    dcl_2d s1
					    texldp r0, v3, s1
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v3.z
					    mul_sat r0.x, r0.x, c7.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c4
					    texld r1, v1, s0
					    add r1, r1, r1
					    mul_pp r0, r0, r1
					    mov r1.xyz, c6
					    dp3_pp r1.w, c8, r1
					    add r2.xyz, r1.w, -c6
					    mad r1.xyz, c3.x, r2, r1
					    mul r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    mov r1.xyz, c1
					    mad r0.xyz, c5.w, r0, -r1
					    mul r0.w, c2.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					
					// approximately 23 instruction slots used (2 texture, 21 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2;
						vec4 _ZBufferParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);
					    u_xlat0.x = u_xlat0.x * _InvFade;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.w = u_xlat0.x * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz;
					    u_xlat0 = u_xlat0 * _TintColor;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.x = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat1.xyz = u_xlat1.xxx + (-_SH0.xyz);
					    u_xlat1.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + _SH0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = _ExposureIBL.www * u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat6 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat6 = u_xlat6 * _ProjectionParams.z;
					    u_xlat6 = max(u_xlat6, 0.0);
					    u_xlat6 = u_xlat6 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _TintColor;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _AmbientColorDesaturation c0       1
					//   _TintColor                c1       1
					//   _ExposureIBL              c2       1
					//   _SH0                      c3       1
					//   _BlendWeightIBL           c4       1
					//   _ExposureIBL1             c5       1
					//   _SH01                     c6       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c7, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_2d s0
					    mov r0.xyz, c6
					    add r1.xyz, -r0, c3
					    mad r0.xyz, c4.x, r1, r0
					    dp3_pp r0.w, c7, r0
					    lrp r1.xyz, c0.x, r0.w, r0
					    texld r0, v1, s0
					    add r0, r0, r0
					    mul r2, c1, v0
					    mul_pp r0, r0, r2
					    mul r0.xyz, r1, r0
					    mov_pp oC0.w, r0.w
					    mov r0.w, c5.w
					    add r1.x, -r0.w, c2.w
					    mad_pp r0.w, c4.x, r1.x, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 15 instruction slots used (1 texture, 14 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_9[12];
						vec3 _SH01;
						vec4 unused_0_11[11];
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat0.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat0.xyz + _SH01.xyz;
					    u_xlat9 = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat0.xyz);
					    u_xlat1.xyz = (-u_xlat0.xyz) + vec3(u_xlat9);
					    u_xlat0.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat2 = vs_COLOR0 * _TintColor;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat9 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat9 = _BlendWeightIBL * u_xlat9 + _ExposureIBL1.w;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _ZBufferParams            c0       1
					//   _AmbientColorDesaturation c1       1
					//   _TintColor                c2       1
					//   _ExposureIBL              c3       1
					//   _SH0                      c4       1
					//   _BlendWeightIBL           c5       1
					//   _ExposureIBL1             c6       1
					//   _SH01                     c7       1
					//   _InvFade                  c8       1
					//   _MainTex                  s0       1
					//   _CameraDepthTexture       s1       1
					//
					
					    ps_3_0
					    def c9, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1.xy
					    dcl_texcoord2 v2
					    dcl_2d s0
					    dcl_2d s1
					    texldp r0, v2, s1
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v2.z
					    mul_sat r0.x, r0.x, c8.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c2
					    texld r1, v1, s0
					    add r1, r1, r1
					    mul_pp r0, r0, r1
					    mov r1.xyz, c7
					    add r2.xyz, -r1, c4
					    mad r1.xyz, c5.x, r2, r1
					    dp3_pp r1.w, c9, r1
					    lrp r2.xyz, c1.x, r1.w, r1
					    mul r0.xyz, r0, r2
					    mov_pp oC0.w, r0.w
					    mov r0.w, c6.w
					    add r1.x, -r0.w, c3.w
					    mad_pp r0.w, c5.x, r1.x, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 22 instruction slots used (2 texture, 20 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_9[12];
						vec3 _SH01;
						vec4 unused_0_11[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);
					    u_xlat0.x = u_xlat0.x * _InvFade;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.w = u_xlat0.x * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz;
					    u_xlat0 = u_xlat0 * _TintColor;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + _SH01.xyz;
					    u_xlat10 = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat1.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(u_xlat10);
					    u_xlat1.xyz = vec3(_AmbientColorDesaturation) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat9 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat9 = _BlendWeightIBL * u_xlat9 + _ExposureIBL1.w;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _TintColor;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   _AmbientColorDesaturation c2       1
					//   _TintColor                c3       1
					//   _ExposureIBL              c4       1
					//   _SH0                      c5       1
					//   _BlendWeightIBL           c6       1
					//   _ExposureIBL1             c7       1
					//   _SH01                     c8       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c9, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.x
					    dcl_2d s0
					    mov r0.xyz, c8
					    add r1.xyz, -r0, c5
					    mad r0.xyz, c6.x, r1, r0
					    dp3_pp r0.w, c9, r0
					    lrp r1.xyz, c2.x, r0.w, r0
					    texld r0, v1, s0
					    add r0, r0, r0
					    mul r2, c3, v0
					    mul_pp r0, r0, r2
					    mul r0.xyz, r1, r0
					    mov_pp oC0.w, r0.w
					    mov r0.w, c7.w
					    add r1.x, -r0.w, c4.w
					    mad_pp r0.w, c6.x, r1.x, r0.w
					    mad r0.xyz, r0.w, r0, -c0
					    mul r0.w, c1.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_9[12];
						vec3 _SH01;
						vec4 unused_0_11[11];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _ProjectionParams.z;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = u_xlat0 * unity_FogParams.x;
					    u_xlat0 = u_xlat0 * (-u_xlat0);
					    u_xlat0 = exp2(u_xlat0);
					    u_xlat3.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat3.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat3.xyz + _SH01.xyz;
					    u_xlat1.x = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat3.xyz);
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xxx;
					    u_xlat3.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat2 = vs_COLOR0 * _TintColor;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat1.x = _BlendWeightIBL * u_xlat1.x + _ExposureIBL1.w;
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat0) * u_xlat3.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _ZBufferParams            c0       1
					//   unity_FogColor            c1       1
					//   unity_FogParams           c2       1
					//   _AmbientColorDesaturation c3       1
					//   _TintColor                c4       1
					//   _ExposureIBL              c5       1
					//   _SH0                      c6       1
					//   _BlendWeightIBL           c7       1
					//   _ExposureIBL1             c8       1
					//   _SH01                     c9       1
					//   _InvFade                  c10      1
					//   _MainTex                  s0       1
					//   _CameraDepthTexture       s1       1
					//
					
					    ps_3_0
					    def c11, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.x
					    dcl_texcoord2 v3
					    dcl_2d s0
					    dcl_2d s1
					    texldp r0, v3, s1
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v3.z
					    mul_sat r0.x, r0.x, c10.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c4
					    texld r1, v1, s0
					    add r1, r1, r1
					    mul_pp r0, r0, r1
					    mov r1.xyz, c9
					    add r2.xyz, -r1, c6
					    mad r1.xyz, c7.x, r2, r1
					    dp3_pp r1.w, c11, r1
					    lrp r2.xyz, c3.x, r1.w, r1
					    mul r0.xyz, r0, r2
					    mov_pp oC0.w, r0.w
					    mov r0.w, c8.w
					    add r1.x, -r0.w, c5.w
					    mad_pp r0.w, c7.x, r1.x, r0.w
					    mad r0.xyz, r0.w, r0, -c1
					    mul r0.w, c2.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					
					// approximately 26 instruction slots used (2 texture, 24 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 unused_0_2[4];
						vec4 _ExposureIBL;
						vec4 unused_0_4[12];
						vec3 _SH0;
						vec4 unused_0_6[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_9[12];
						vec3 _SH01;
						vec4 unused_0_11[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2;
						vec4 _ZBufferParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);
					    u_xlat0.x = u_xlat0.x * _InvFade;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.w = u_xlat0.x * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz;
					    u_xlat0 = u_xlat0 * _TintColor;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + _SH01.xyz;
					    u_xlat10 = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat1.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(u_xlat10);
					    u_xlat1.xyz = vec3(_AmbientColorDesaturation) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat9 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat9 = _BlendWeightIBL * u_xlat9 + _ExposureIBL1.w;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = u_xlat9 * _ProjectionParams.z;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = u_xlat9 * unity_FogParams.x;
					    u_xlat9 = u_xlat9 * (-u_xlat9);
					    u_xlat9 = exp2(u_xlat9);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Transparent/Diffuse"
}