Shader "Marmoset/Transparent/Cutout/Bumped Diffuse IBL Double Faces" {
	Properties {
		_Color ("Diffuse Color", Vector) = (1,1,1,1)
		_Cutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
		_MainTex ("Diffuse(RGB) Alpha(A)", 2D) = "white" {}
		_BumpMap ("Normalmap", 2D) = "bump" {}
	}
	SubShader {
		LOD 350
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
		Pass {
			Name "FORWARD"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			ColorMask RGB -1
			ZClip Off
			Cull Off
			GpuProgramID 5127
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord7 o7
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.z, c6, r1
					    dp4 r4.w, c7, r1
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o5.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o6.xy, c19.y
					    mov o7, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 54 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o5.xyz, r0, r2
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    dp4 r2.w, c3, r0
					    dp4 r0.x, c4, r2
					    dp4 r0.w, c7, r2
					    mul r3.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r2
					    dp4 r0.z, c6, r2
					    mul r1.w, r0.y, c11.x
					    mov r4, r0
					    mov o6.zw, r0
					    mul r3.w, r1.w, c20.z
					    add o6.xy, r3.z, r3.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o7, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 59 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHAr                 c19      1
					//   unity_SHAg                 c20      1
					//   unity_SHAb                 c21      1
					//   unity_SHBr                 c22      1
					//   unity_SHBg                 c23      1
					//   unity_SHBb                 c24      1
					//   unity_SHC                  c25      1
					//   unity_WorldTransformParams c26      1
					//
					
					    vs_3_0
					    def c27, 1, 0, 9.99999997e-007, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord7 o7
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r7.x, c8, r1
					    dp4 r7.y, c9, r1
					    dp4 r7.z, c10, r1
					    dp4 r7.w, c11, r1
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c16
					    mov o2.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c15
					    mov o1.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c17
					    mov o3.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c27.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c27.x
					    mad r0, r0, c18, r5.x
					    mul r5.xyz, c13, v2.y
					    mad r5.xyz, v2.x, c12, r5
					    mad r5.xyz, v2.z, c14, r5
					    nrm r6.xyz, r5
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r2, r1
					    max r1, r1, c27.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c27.x
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0, r1
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c26.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c27.xxyy, v3.xyxx
					    mov o6.xy, c27.y
					    mov o7, c27.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 85 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   _ProjectionParams          c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHAr                 c20      1
					//   unity_SHAg                 c21      1
					//   unity_SHAb                 c22      1
					//   unity_SHBr                 c23      1
					//   unity_SHBg                 c24      1
					//   unity_SHBb                 c25      1
					//   unity_SHC                  c26      1
					//   unity_WorldTransformParams c27      1
					//
					
					    vs_3_0
					    def c28, 1, 0, 9.99999997e-007, 0.5
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c17
					    mov o2.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c16
					    mov o1.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c18
					    mov o3.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c28.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c28.x
					    mad r0, r0, c19, r5.x
					    mul r5.xyz, c13, v2.y
					    mad r5.xyz, v2.x, c12, r5
					    mad r5.xyz, v2.z, c14, r5
					    nrm r6.xyz, r5
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r2, r1
					    max r1, r1, c28.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c23, r1
					    dp4 r2.y, c24, r1
					    dp4 r2.z, c25, r1
					    mad r1.xyz, c26, r0.w, r2
					    mov r6.w, c28.x
					    dp4 r2.x, c20, r6
					    dp4 r2.y, c21, r6
					    dp4 r2.z, c22, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0, r1
					    mad r0, v0.xyzx, c28.xxxy, c28.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r0.x, c8, r1
					    dp4 r0.w, c11, r1
					    mul r2.xz, r0.xyww, c28.w
					    dp4 r0.y, c9, r1
					    dp4 r0.z, c10, r1
					    mul r1.x, r0.y, c15.x
					    mov r7, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c28.w
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c27.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c28.xxyy, v3.xyxx
					    mov o7, c28.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 90 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.yzw, c9.xxyz, v2.y
					    mad r0.yzw, v2.x, c8.xxyz, r0
					    mad r0.yzw, v2.z, c10.xxyz, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.yzw, c17.xxyz, r0.y, r3.xxyz
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o5.xyz, r0.yzww, r2
					    mov r4.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o6.xy, c19.y
					    mov o8, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 56 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o5.xyz, r0, r2
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    dp4 r2.w, c3, r0
					    dp4 r0.x, c4, r2
					    dp4 r0.w, c7, r2
					    mul r3.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r2
					    dp4 r0.z, c6, r2
					    mul r1.w, r0.y, c11.x
					    mov r4, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r3.w, r1.w, c20.z
					    add o6.xy, r3.z, r3.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o8, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 60 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHAr                 c19      1
					//   unity_SHAg                 c20      1
					//   unity_SHAb                 c21      1
					//   unity_SHBr                 c22      1
					//   unity_SHBg                 c23      1
					//   unity_SHBb                 c24      1
					//   unity_SHC                  c25      1
					//   unity_WorldTransformParams c26      1
					//
					
					    vs_3_0
					    def c27, 1, 0, 9.99999997e-007, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r7.x, c8, r1
					    dp4 r7.y, c9, r1
					    dp4 r7.w, c11, r1
					    dp4 r0.x, c10, r1
					    dp4 r0.y, c5, v0
					    add r1, -r0.y, c16
					    mov o2.w, r0.y
					    mul r2, r1, r1
					    dp4 r0.y, c4, v0
					    add r3, -r0.y, c15
					    mov o1.w, r0.y
					    mad r2, r3, r3, r2
					    dp4 r0.y, c6, v0
					    add r4, -r0.y, c17
					    mov o3.w, r0.y
					    mad r2, r4, r4, r2
					    max r2, r2, c27.z
					    rsq r5.x, r2.x
					    rsq r5.y, r2.y
					    rsq r5.z, r2.z
					    rsq r5.w, r2.w
					    mov r6.xw, c27.x
					    mad r2, r2, c18, r6.x
					    mul r0.yzw, c13.xxyz, v2.y
					    mad r0.yzw, v2.x, c12.xxyz, r0
					    mad r0.yzw, v2.z, c14.xxyz, r0
					    nrm r6.xyz, r0.yzww
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r5, r1
					    max r1, r1, c27.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    rcp r3.w, r2.w
					    mul r1, r1, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mul r1.x, r6.y, r6.y
					    mad r1.x, r6.x, r6.x, -r1.x
					    mul r2, r6.yzzx, r6.xyzz
					    dp4 r3.x, c22, r2
					    dp4 r3.y, c23, r2
					    dp4 r3.z, c24, r2
					    mad r1.xyz, c25, r1.x, r3
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0.yzww, r1
					    mov r7.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c26.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c27.xxyy, v3.xyxx
					    mov o6.xy, c27.y
					    mov o8, c27.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 86 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   _ProjectionParams          c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHAr                 c20      1
					//   unity_SHAg                 c21      1
					//   unity_SHAb                 c22      1
					//   unity_SHBr                 c23      1
					//   unity_SHBg                 c24      1
					//   unity_SHBb                 c25      1
					//   unity_SHC                  c26      1
					//   unity_WorldTransformParams c27      1
					//
					
					    vs_3_0
					    def c28, 1, 0, 9.99999997e-007, 0.5
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c17
					    mov o2.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c16
					    mov o1.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c18
					    mov o3.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c28.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c28.x
					    mad r0, r0, c19, r5.x
					    mul r5.xyz, c13, v2.y
					    mad r5.xyz, v2.x, c12, r5
					    mad r5.xyz, v2.z, c14, r5
					    nrm r6.xyz, r5
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r2, r1
					    max r1, r1, c28.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c23, r1
					    dp4 r2.y, c24, r1
					    dp4 r2.z, c25, r1
					    mad r1.xyz, c26, r0.w, r2
					    mov r6.w, c28.x
					    dp4 r2.x, c20, r6
					    dp4 r2.y, c21, r6
					    dp4 r2.z, c22, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0, r1
					    mad r0, v0.xyzx, c28.xxxy, c28.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r0.x, c8, r1
					    dp4 r0.w, c11, r1
					    mul r2.xz, r0.xyww, c28.w
					    dp4 r0.y, c9, r1
					    dp4 r0.z, c10, r1
					    mul r1.x, r0.y, c15.x
					    mov r7, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r2.w, r1.x, c28.w
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c27.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c28.xxyy, v3.xyxx
					    mov o8, c28.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 91 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord7 o7
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.z, c6, r1
					    dp4 r4.w, c7, r1
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o5.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o6.xy, c19.y
					    mov o7, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 54 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o5.xyz, r0, r2
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    dp4 r2.w, c3, r0
					    dp4 r0.x, c4, r2
					    dp4 r0.w, c7, r2
					    mul r3.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r2
					    dp4 r0.z, c6, r2
					    mul r1.w, r0.y, c11.x
					    mov r4, r0
					    mov o6.zw, r0
					    mul r3.w, r1.w, c20.z
					    add o6.xy, r3.z, r3.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o7, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 59 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHAr                 c19      1
					//   unity_SHAg                 c20      1
					//   unity_SHAb                 c21      1
					//   unity_SHBr                 c22      1
					//   unity_SHBg                 c23      1
					//   unity_SHBb                 c24      1
					//   unity_SHC                  c25      1
					//   unity_WorldTransformParams c26      1
					//
					
					    vs_3_0
					    def c27, 1, 0, 9.99999997e-007, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord7 o7
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r7.x, c8, r1
					    dp4 r7.y, c9, r1
					    dp4 r7.z, c10, r1
					    dp4 r7.w, c11, r1
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c16
					    mov o2.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c15
					    mov o1.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c17
					    mov o3.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c27.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c27.x
					    mad r0, r0, c18, r5.x
					    mul r5.xyz, c13, v2.y
					    mad r5.xyz, v2.x, c12, r5
					    mad r5.xyz, v2.z, c14, r5
					    nrm r6.xyz, r5
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r2, r1
					    max r1, r1, c27.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c22, r1
					    dp4 r2.y, c23, r1
					    dp4 r2.z, c24, r1
					    mad r1.xyz, c25, r0.w, r2
					    mov r6.w, c27.x
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0, r1
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c26.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c27.xxyy, v3.xyxx
					    mov o6.xy, c27.y
					    mov o7, c27.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 85 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   _ProjectionParams          c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHAr                 c20      1
					//   unity_SHAg                 c21      1
					//   unity_SHAb                 c22      1
					//   unity_SHBr                 c23      1
					//   unity_SHBg                 c24      1
					//   unity_SHBb                 c25      1
					//   unity_SHC                  c26      1
					//   unity_WorldTransformParams c27      1
					//
					
					    vs_3_0
					    def c28, 1, 0, 9.99999997e-007, 0.5
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c17
					    mov o2.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c16
					    mov o1.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c18
					    mov o3.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c28.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c28.x
					    mad r0, r0, c19, r5.x
					    mul r5.xyz, c13, v2.y
					    mad r5.xyz, v2.x, c12, r5
					    mad r5.xyz, v2.z, c14, r5
					    nrm r6.xyz, r5
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r2, r1
					    max r1, r1, c28.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c23, r1
					    dp4 r2.y, c24, r1
					    dp4 r2.z, c25, r1
					    mad r1.xyz, c26, r0.w, r2
					    mov r6.w, c28.x
					    dp4 r2.x, c20, r6
					    dp4 r2.y, c21, r6
					    dp4 r2.z, c22, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0, r1
					    mad r0, v0.xyzx, c28.xxxy, c28.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r0.x, c8, r1
					    dp4 r0.w, c11, r1
					    mul r2.xz, r0.xyww, c28.w
					    dp4 r0.y, c9, r1
					    dp4 r0.z, c10, r1
					    mul r1.x, r0.y, c15.x
					    mov r7, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c28.w
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c27.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c28.xxyy, v3.xyxx
					    mov o7, c28.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 90 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.yzw, c9.xxyz, v2.y
					    mad r0.yzw, v2.x, c8.xxyz, r0
					    mad r0.yzw, v2.z, c10.xxyz, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.yzw, c17.xxyz, r0.y, r3.xxyz
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o5.xyz, r0.yzww, r2
					    mov r4.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o6.xy, c19.y
					    mov o8, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 56 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    dp4 o1.w, c0, v0
					    dp4 o2.w, c1, v0
					    dp4 o3.w, c2, v0
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o5.xyz, r0, r2
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    dp4 r2.w, c3, r0
					    dp4 r0.x, c4, r2
					    dp4 r0.w, c7, r2
					    mul r3.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r2
					    dp4 r0.z, c6, r2
					    mul r1.w, r0.y, c11.x
					    mov r4, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r3.w, r1.w, c20.z
					    add o6.xy, r3.z, r3.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o8, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 60 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHAr                 c19      1
					//   unity_SHAg                 c20      1
					//   unity_SHAb                 c21      1
					//   unity_SHBr                 c22      1
					//   unity_SHBg                 c23      1
					//   unity_SHBb                 c24      1
					//   unity_SHC                  c25      1
					//   unity_WorldTransformParams c26      1
					//
					
					    vs_3_0
					    def c27, 1, 0, 9.99999997e-007, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r7.x, c8, r1
					    dp4 r7.y, c9, r1
					    dp4 r7.w, c11, r1
					    dp4 r0.x, c10, r1
					    dp4 r0.y, c5, v0
					    add r1, -r0.y, c16
					    mov o2.w, r0.y
					    mul r2, r1, r1
					    dp4 r0.y, c4, v0
					    add r3, -r0.y, c15
					    mov o1.w, r0.y
					    mad r2, r3, r3, r2
					    dp4 r0.y, c6, v0
					    add r4, -r0.y, c17
					    mov o3.w, r0.y
					    mad r2, r4, r4, r2
					    max r2, r2, c27.z
					    rsq r5.x, r2.x
					    rsq r5.y, r2.y
					    rsq r5.z, r2.z
					    rsq r5.w, r2.w
					    mov r6.xw, c27.x
					    mad r2, r2, c18, r6.x
					    mul r0.yzw, c13.xxyz, v2.y
					    mad r0.yzw, v2.x, c12.xxyz, r0
					    mad r0.yzw, v2.z, c14.xxyz, r0
					    nrm r6.xyz, r0.yzww
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r5, r1
					    max r1, r1, c27.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    rcp r3.w, r2.w
					    mul r1, r1, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mul r1.x, r6.y, r6.y
					    mad r1.x, r6.x, r6.x, -r1.x
					    mul r2, r6.yzzx, r6.xyzz
					    dp4 r3.x, c22, r2
					    dp4 r3.y, c23, r2
					    dp4 r3.z, c24, r2
					    mad r1.xyz, c25, r1.x, r3
					    dp4 r2.x, c19, r6
					    dp4 r2.y, c20, r6
					    dp4 r2.z, c21, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0.yzww, r1
					    mov r7.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c26.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c27.xxyy, v3.xyxx
					    mov o6.xy, c27.y
					    mov o8, c27.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 86 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   _ProjectionParams          c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHAr                 c20      1
					//   unity_SHAg                 c21      1
					//   unity_SHAb                 c22      1
					//   unity_SHBr                 c23      1
					//   unity_SHBg                 c24      1
					//   unity_SHBb                 c25      1
					//   unity_SHC                  c26      1
					//   unity_WorldTransformParams c27      1
					//
					
					    vs_3_0
					    def c28, 1, 0, 9.99999997e-007, 0.5
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dcl_texcoord7 o8
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c17
					    mov o2.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c16
					    mov o1.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c18
					    mov o3.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c28.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c28.x
					    mad r0, r0, c19, r5.x
					    mul r5.xyz, c13, v2.y
					    mad r5.xyz, v2.x, c12, r5
					    mad r5.xyz, v2.z, c14, r5
					    nrm r6.xyz, r5
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.z, r1
					    mul r1, r2, r1
					    max r1, r1, c28.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r6.y, r6.y
					    mad r0.w, r6.x, r6.x, -r0.w
					    mul r1, r6.yzzx, r6.xyzz
					    dp4 r2.x, c23, r1
					    dp4 r2.y, c24, r1
					    dp4 r2.z, c25, r1
					    mad r1.xyz, c26, r0.w, r2
					    mov r6.w, c28.x
					    dp4 r2.x, c20, r6
					    dp4 r2.y, c21, r6
					    dp4 r2.z, c22, r6
					    add r1.xyz, r1, r2
					    add o5.xyz, r0, r1
					    mad r0, v0.xyzx, c28.xxxy, c28.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r0.x, c8, r1
					    dp4 r0.w, c11, r1
					    mul r2.xz, r0.xyww, c28.w
					    dp4 r0.y, c9, r1
					    dp4 r0.z, c10, r1
					    mul r1.x, r0.y, c15.x
					    mov r7, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r2.w, r1.x, c28.w
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, r0, r6.zxyw
					    mad r1.xyz, r6.yzxw, r0.yzxw, -r1
					    mul r0.z, c27.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o1.y, r1.x
					    mov o1.z, r6.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r1.y
					    mov o3.y, r1.z
					    mov o2.z, r6.y
					    mov o3.z, r6.z
					    mul o4, c28.xxyy, v3.xyxx
					    mov o8, c28.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 91 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _SkyMatrix           c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _Color               c5       1
					//   _MainTex_ST          c6       1
					//   _BumpMap_ST          c7       1
					//   _ExposureIBL         c8       1
					//   _UniformOcclusion    c9       1
					//   _SH0                 c10      1
					//   _SH1                 c11      1
					//   _SH2                 c12      1
					//   _SH3                 c13      1
					//   _SH4                 c14      1
					//   _SH5                 c15      1
					//   _SH6                 c16      1
					//   _SH7                 c17      1
					//   _SH8                 c18      1
					//   _Cutoff              c19      1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c20, 2, -1, 0, 1
					    def c21, 3, -1, 0, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c6, c6.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c19.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mul_pp r1.xyz, r0, c8.w
					    mad r2.xy, v3, c7, c7.zwzw
					    texld_pp r2, r2, s1
					    mad_pp r2.xy, r2.wyzw, c20.x, c20.y
					    dp2add_sat_pp r1.w, r2, r2, c20.z
					    add_pp r1.w, -r1.w, c20.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r2.z, r1.w
					    nrm_pp r3.xyz, r2
					    dp3 r2.x, v0, r3
					    dp3 r2.y, v1, r3
					    dp3 r2.z, v2, r3
					    nrm_pp r3.xyz, c3
					    dp3_sat_pp r1.w, r2, r3
					    mul r3.xyz, r2.z, c2
					    mad r2.yzw, c1.xxyz, r2.y, r3.xxyz
					    mad r2.xyz, c0, r2.x, r2.yzww
					    nrm r3.xyz, r2
					    add_pp r1.w, r1.w, r1.w
					    mul_pp r2.xyz, r1, r1.w
					    mul_pp r0.xyz, r2, c4
					    mul_pp r2.xyz, r1, v4
					    mov_pp r2.w, c20.z
					    add_pp r0, r0, r2
					    mov r2.xyz, c11
					    mad r2.xyz, r2, r3.y, c10
					    mad r2.xyz, c12, r3.z, r2
					    mad r2.xyz, c13, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c14, r4.x, r2
					    mad r2.xyz, c15, r4.y, r2
					    mad r2.xyz, c17, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c21.x, c21.y
					    mad r2.xyz, c16, r2.w, r2
					    mad r2.xyz, c18, r1.w, r2
					    mul_pp r1.xyz, r1, r2_abs
					    mov r2.x, c8.x
					    mul_pp r1.w, r2.x, c9.x
					    mad_pp oC0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 55 instruction slots used (2 texture, 53 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   sampler2D _ShadowMapTexture;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _SkyMatrix                    c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightShadowData              c8       1
					//   unity_ShadowFadeCenterAndType c9       1
					//   _LightColor0                  c10      1
					//   _Color                        c11      1
					//   _MainTex_ST                   c12      1
					//   _BumpMap_ST                   c13      1
					//   _ExposureIBL                  c14      1
					//   _UniformOcclusion             c15      1
					//   _SH0                          c16      1
					//   _SH1                          c17      1
					//   _SH2                          c18      1
					//   _SH3                          c19      1
					//   _SH4                          c20      1
					//   _SH5                          c21      1
					//   _SH6                          c22      1
					//   _SH7                          c23      1
					//   _SH8                          c24      1
					//   _Cutoff                       c25      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c26, 2, -1, 0, 1
					    def c27, 3, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c12, c12.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c11.w
					    mad_pp r1, r0.w, r1.w, -c25.x
					    mul_pp r0, r0, c11
					    texkill r1
					    mov r1.x, v0.w
					    mov r1.y, v1.w
					    mov r1.z, v2.w
					    add r2.xyz, r1, -c9
					    add r1.xyz, -r1, c6
					    dp3 r1.x, r1, c2
					    dp3 r1.y, r2, r2
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    lrp r2.x, c9.w, r1.y, r1.x
					    mad_sat_pp r1.x, r2.x, c8.z, c8.w
					    texldp_pp r2, v5, s0
					    add_sat_pp r1.x, r1.x, r2.x
					    mad r1.yz, v3.xxyw, c13.xxyw, c13.xzww
					    texld_pp r2, r1.yzzw, s2
					    mad_pp r2.xy, r2.wyzw, c26.x, c26.y
					    dp2add_sat_pp r1.y, r2, r2, c26.z
					    add_pp r1.y, -r1.y, c26.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3 r2.x, v0, r3
					    dp3 r2.y, v1, r3
					    dp3 r2.z, v2, r3
					    nrm_pp r3.xyz, c7
					    dp3_sat_pp r1.y, r2, r3
					    mul r3.xyz, r2.z, c5
					    mad r2.yzw, c4.xxyz, r2.y, r3.xxyz
					    mad r2.xyz, c3, r2.x, r2.yzww
					    nrm r3.xyz, r2
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r2.xyz, r0, c14.w
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    mul_pp r1.yzw, r1, c10.xxyz
					    mul_pp r0.xyz, r1.x, r1.yzww
					    mul_pp r1.xyz, r2, v4
					    mov_pp r1.w, c26.z
					    add_pp r0, r0, r1
					    mov r1.xyz, c17
					    mad r1.xyz, r1, r3.y, c16
					    mad r1.xyz, c18, r3.z, r1
					    mad r1.xyz, c19, r3.x, r1
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r1.xyz, c20, r4.x, r1
					    mad r1.xyz, c21, r4.y, r1
					    mad r1.xyz, c23, r4.z, r1
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c27.x, c27.y
					    mad r1.xyz, c22, r2.w, r1
					    mad r1.xyz, c24, r1.w, r1
					    mul_pp r1.xyz, r2, r1_abs
					    mov r2.x, c14.x
					    mul_pp r1.w, r2.x, c15.x
					    mad_pp oC0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 69 instruction slots used (3 texture, 66 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _SkyMatrix           c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogColor       c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _Color               c7       1
					//   _MainTex_ST          c8       1
					//   _BumpMap_ST          c9       1
					//   _ExposureIBL         c10      1
					//   _UniformOcclusion    c11      1
					//   _SH0                 c12      1
					//   _SH1                 c13      1
					//   _SH2                 c14      1
					//   _SH3                 c15      1
					//   _SH4                 c16      1
					//   _SH5                 c17      1
					//   _SH6                 c18      1
					//   _SH7                 c19      1
					//   _SH8                 c20      1
					//   _Cutoff              c21      1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c22, 2, -1, 0, 1
					    def c23, 3, -1, 0, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c8, c8.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c7.w
					    mad_pp r1, r0.w, r1.w, -c21.x
					    mul_pp r0, r0, c7
					    texkill r1
					    mul_pp r1.xyz, r0, c10.w
					    mad r2.xy, v3, c9, c9.zwzw
					    texld_pp r2, r2, s1
					    mad_pp r2.xy, r2.wyzw, c22.x, c22.y
					    dp2add_sat_pp r1.w, r2, r2, c22.z
					    add_pp r1.w, -r1.w, c22.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r2.z, r1.w
					    nrm_pp r3.xyz, r2
					    dp3 r2.x, v0, r3
					    dp3 r2.y, v1, r3
					    dp3 r2.z, v2, r3
					    nrm_pp r3.xyz, c3
					    dp3_sat_pp r1.w, r2, r3
					    mul r3.xyz, r2.z, c2
					    mad r2.yzw, c1.xxyz, r2.y, r3.xxyz
					    mad r2.xyz, c0, r2.x, r2.yzww
					    nrm r3.xyz, r2
					    add_pp r1.w, r1.w, r1.w
					    mul_pp r2.xyz, r1, r1.w
					    mul_pp r0.xyz, r2, c6
					    mul_pp r2.xyz, r1, v4
					    mov_pp r2.w, c22.z
					    add_pp r0, r0, r2
					    mov r2.xyz, c13
					    mad r2.xyz, r2, r3.y, c12
					    mad r2.xyz, c14, r3.z, r2
					    mad r2.xyz, c15, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c16, r4.x, r2
					    mad r2.xyz, c17, r4.y, r2
					    mad r2.xyz, c19, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c23.x, c23.y
					    mad r2.xyz, c18, r2.w, r2
					    mad r2.xyz, c20, r1.w, r2
					    mul_pp r1.xyz, r1, r2_abs
					    mov r2.x, c10.x
					    mul_pp r1.w, r2.x, c11.x
					    mad_pp r0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, r0.w
					    add r0.xyz, r0, -c4
					    mul r0.w, c5.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c4
					
					// approximately 60 instruction slots used (2 texture, 58 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   sampler2D _ShadowMapTexture;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _SkyMatrix                    c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightShadowData              c8       1
					//   unity_ShadowFadeCenterAndType c9       1
					//   unity_FogColor                c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _UniformOcclusion             c17      1
					//   _SH0                          c18      1
					//   _SH1                          c19      1
					//   _SH2                          c20      1
					//   _SH3                          c21      1
					//   _SH4                          c22      1
					//   _SH5                          c23      1
					//   _SH6                          c24      1
					//   _SH7                          c25      1
					//   _SH8                          c26      1
					//   _Cutoff                       c27      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c28, 2, -1, 0, 1
					    def c29, 3, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c14, c14.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c27.x
					    mul_pp r0, r0, c13
					    texkill r1
					    mov r1.x, v0.w
					    mov r1.y, v1.w
					    mov r1.z, v2.w
					    add r2.xyz, r1, -c9
					    add r1.xyz, -r1, c6
					    dp3 r1.x, r1, c2
					    dp3 r1.y, r2, r2
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    lrp r2.x, c9.w, r1.y, r1.x
					    mad_sat_pp r1.x, r2.x, c8.z, c8.w
					    texldp_pp r2, v5, s0
					    add_sat_pp r1.x, r1.x, r2.x
					    mad r1.yz, v3.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s2
					    mad_pp r2.xy, r2.wyzw, c28.x, c28.y
					    dp2add_sat_pp r1.y, r2, r2, c28.z
					    add_pp r1.y, -r1.y, c28.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3 r2.x, v0, r3
					    dp3 r2.y, v1, r3
					    dp3 r2.z, v2, r3
					    nrm_pp r3.xyz, c7
					    dp3_sat_pp r1.y, r2, r3
					    mul r3.xyz, r2.z, c5
					    mad r2.yzw, c4.xxyz, r2.y, r3.xxyz
					    mad r2.xyz, c3, r2.x, r2.yzww
					    nrm r3.xyz, r2
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r2.xyz, r0, c16.w
					    mul_pp r1.yzw, r1.y, r2.xxyz
					    mul_pp r1.yzw, r1, c12.xxyz
					    mul_pp r0.xyz, r1.x, r1.yzww
					    mul_pp r1.xyz, r2, v4
					    mov_pp r1.w, c28.z
					    add_pp r0, r0, r1
					    mov r1.xyz, c19
					    mad r1.xyz, r1, r3.y, c18
					    mad r1.xyz, c20, r3.z, r1
					    mad r1.xyz, c21, r3.x, r1
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r1.xyz, c22, r4.x, r1
					    mad r1.xyz, c23, r4.y, r1
					    mad r1.xyz, c25, r4.z, r1
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c29.x, c29.y
					    mad r1.xyz, c24, r2.w, r1
					    mad r1.xyz, c26, r1.w, r1
					    mul_pp r1.xyz, r2, r1_abs
					    mov r2.x, c16.x
					    mul_pp r1.w, r2.x, c17.x
					    mad_pp r0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, r0.w
					    add r0.xyz, r0, -c10
					    mul r0.w, c11.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c10
					
					// approximately 74 instruction slots used (3 texture, 71 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _SkyMatrix           c0       3
					//   _SkyMatrix1          c3       3
					//   _WorldSpaceLightPos0 c6       1
					//   _LightColor0         c7       1
					//   _Color               c8       1
					//   _MainTex_ST          c9       1
					//   _BumpMap_ST          c10      1
					//   _ExposureIBL         c11      1
					//   _UniformOcclusion    c12      1
					//   _SH0                 c13      1
					//   _SH1                 c14      1
					//   _SH2                 c15      1
					//   _SH3                 c16      1
					//   _SH4                 c17      1
					//   _SH5                 c18      1
					//   _SH6                 c19      1
					//   _SH7                 c20      1
					//   _SH8                 c21      1
					//   _BlendWeightIBL      c22      1
					//   _ExposureIBL1        c23      1
					//   _SH01                c24      1
					//   _SH11                c25      1
					//   _SH21                c26      1
					//   _SH31                c27      1
					//   _SH41                c28      1
					//   _SH51                c29      1
					//   _SH61                c30      1
					//   _SH71                c31      1
					//   _SH81                c32      1
					//   _Cutoff              c33      1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c34, 2, -1, 0, 1
					    def c35, 3, -1, 0, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c9, c9.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c8.w
					    mad_pp r1, r0.w, r1.w, -c33.x
					    mul_pp r0, r0, c8
					    texkill r1
					    mad r1.xy, v3, c10, c10.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c34.x, c34.y
					    dp2add_sat_pp r1.w, r1, r1, c34.z
					    add_pp r1.w, -r1.w, c34.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.z, v2, r2
					    mul r3.xyz, r1.z, c2
					    dp3 r1.y, v1, r2
					    dp3 r1.x, v0, r2
					    mad r2.xyz, c1, r1.y, r3
					    mad r2.xyz, c0, r1.x, r2
					    nrm r3.xyz, r2
					    mov r2.xyz, c14
					    mad r2.xyz, r2, r3.y, c13
					    mad r2.xyz, c15, r3.z, r2
					    mad r2.xyz, c16, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c17, r4.x, r2
					    mad r2.xyz, c18, r4.y, r2
					    mad r2.xyz, c20, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c35.x, c35.y
					    mad r2.xyz, c19, r2.w, r2
					    mad r2.xyz, c21, r1.w, r2
					    mul r3.xyz, r1.z, c5
					    mad r3.xyz, c4, r1.y, r3
					    mad r3.xyz, c3, r1.x, r3
					    nrm r4.xyz, r3
					    mov r3.xyz, c25
					    mad r3.xyz, r3, r4.y, c24
					    mad r3.xyz, c26, r4.z, r3
					    mad r3.xyz, c27, r4.x, r3
					    mul r5.xyz, r4.xzxw, r4.yyzw
					    mad r3.xyz, c28, r5.x, r3
					    mad r3.xyz, c29, r5.y, r3
					    mad r3.xyz, c31, r5.z, r3
					    mul r4.yz, r4, r4
					    mad r1.w, r4.x, r4.x, -r4.y
					    mad r2.w, r4.z, c35.x, c35.y
					    mad r3.xyz, c30, r2.w, r3
					    mad r3.xyz, c32, r1.w, r3
					    lrp_pp r4.xyz, c22.x, r2_abs, r3_abs
					    mov r2.xw, c23
					    add_pp r2.yz, -r2.xxww, c11.xxww
					    mad_pp r2.xy, c22.x, r2.yzzw, r2.xwzw
					    mul_pp r2.yzw, r0.xxyz, r2.y
					    mul_pp r1.w, r2.x, c12.x
					    mul_pp r3.xyz, r2.yzww, r4
					    nrm_pp r4.xyz, c6
					    dp3_sat_pp r1.x, r1, r4
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r1.xyz, r2.yzww, r1.x
					    mul_pp r2.xyz, r2.yzww, v4
					    mul_pp r0.xyz, r1, c7
					    mov_pp r2.w, c34.z
					    add_pp r0, r0, r2
					    mad_pp oC0.xyz, r3, r1.w, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 77 instruction slots used (2 texture, 75 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   sampler2D _ShadowMapTexture;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _SkyMatrix                    c3       3
					//   _SkyMatrix1                   c6       3
					//   _WorldSpaceCameraPos          c9       1
					//   _WorldSpaceLightPos0          c10      1
					//   _LightShadowData              c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   _LightColor0                  c13      1
					//   _Color                        c14      1
					//   _MainTex_ST                   c15      1
					//   _BumpMap_ST                   c16      1
					//   _ExposureIBL                  c17      1
					//   _UniformOcclusion             c18      1
					//   _SH0                          c19      1
					//   _SH1                          c20      1
					//   _SH2                          c21      1
					//   _SH3                          c22      1
					//   _SH4                          c23      1
					//   _SH5                          c24      1
					//   _SH6                          c25      1
					//   _SH7                          c26      1
					//   _SH8                          c27      1
					//   _BlendWeightIBL               c28      1
					//   _ExposureIBL1                 c29      1
					//   _SH01                         c30      1
					//   _SH11                         c31      1
					//   _SH21                         c32      1
					//   _SH31                         c33      1
					//   _SH41                         c34      1
					//   _SH51                         c35      1
					//   _SH61                         c36      1
					//   _SH71                         c37      1
					//   _SH81                         c38      1
					//   _Cutoff                       c39      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c40, 2, -1, 0, 1
					    def c41, 3, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c15, c15.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c14.w
					    mad_pp r1, r0.w, r1.w, -c39.x
					    mul_pp r0, r0, c14
					    texkill r1
					    mad r1.xy, v3, c16, c16.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c40.x, c40.y
					    dp2add_sat_pp r1.w, r1, r1, c40.z
					    add_pp r1.w, -r1.w, c40.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.z, v2, r2
					    mul r3.xyz, r1.z, c5
					    dp3 r1.y, v1, r2
					    dp3 r1.x, v0, r2
					    mad r2.xyz, c4, r1.y, r3
					    mad r2.xyz, c3, r1.x, r2
					    nrm r3.xyz, r2
					    mov r2.xyz, c20
					    mad r2.xyz, r2, r3.y, c19
					    mad r2.xyz, c21, r3.z, r2
					    mad r2.xyz, c22, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c23, r4.x, r2
					    mad r2.xyz, c24, r4.y, r2
					    mad r2.xyz, c26, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c41.x, c41.y
					    mad r2.xyz, c25, r2.w, r2
					    mad r2.xyz, c27, r1.w, r2
					    mul r3.xyz, r1.z, c8
					    mad r3.xyz, c7, r1.y, r3
					    mad r3.xyz, c6, r1.x, r3
					    nrm r4.xyz, r3
					    mov r3.xyz, c31
					    mad r3.xyz, r3, r4.y, c30
					    mad r3.xyz, c32, r4.z, r3
					    mad r3.xyz, c33, r4.x, r3
					    mul r5.xyz, r4.xzxw, r4.yyzw
					    mad r3.xyz, c34, r5.x, r3
					    mad r3.xyz, c35, r5.y, r3
					    mad r3.xyz, c37, r5.z, r3
					    mul r4.yz, r4, r4
					    mad r1.w, r4.x, r4.x, -r4.y
					    mad r2.w, r4.z, c41.x, c41.y
					    mad r3.xyz, c36, r2.w, r3
					    mad r3.xyz, c38, r1.w, r3
					    lrp_pp r4.xyz, c28.x, r2_abs, r3_abs
					    mov r2.xw, c29
					    add_pp r2.yz, -r2.xxww, c17.xxww
					    mad_pp r2.xy, c28.x, r2.yzzw, r2.xwzw
					    mul_pp r2.yzw, r0.xxyz, r2.y
					    mul_pp r1.w, r2.x, c18.x
					    mul_pp r3.xyz, r2.yzww, r4
					    nrm_pp r4.xyz, c10
					    dp3_sat_pp r1.x, r1, r4
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r1.xyz, r2.yzww, r1.x
					    mul_pp r2.xyz, r2.yzww, v4
					    mul_pp r1.xyz, r1, c13
					    mov r4.x, v0.w
					    mov r4.y, v1.w
					    mov r4.z, v2.w
					    add r5.xyz, r4, -c12
					    add r4.xyz, -r4, c9
					    dp3 r3.w, r4, c2
					    dp3 r4.x, r5, r5
					    rsq r4.x, r4.x
					    rcp r4.x, r4.x
					    lrp r5.x, c12.w, r4.x, r3.w
					    mad_sat_pp r3.w, r5.x, c11.z, c11.w
					    texldp_pp r4, v5, s0
					    add_sat_pp r3.w, r3.w, r4.x
					    mul_pp r0.xyz, r1, r3.w
					    mov_pp r2.w, c40.z
					    add_pp r0, r0, r2
					    mad_pp oC0.xyz, r3, r1.w, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 91 instruction slots used (3 texture, 88 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _SkyMatrix           c0       3
					//   _SkyMatrix1          c3       3
					//   _WorldSpaceLightPos0 c6       1
					//   unity_FogColor       c7       1
					//   unity_FogParams      c8       1
					//   _LightColor0         c9       1
					//   _Color               c10      1
					//   _MainTex_ST          c11      1
					//   _BumpMap_ST          c12      1
					//   _ExposureIBL         c13      1
					//   _UniformOcclusion    c14      1
					//   _SH0                 c15      1
					//   _SH1                 c16      1
					//   _SH2                 c17      1
					//   _SH3                 c18      1
					//   _SH4                 c19      1
					//   _SH5                 c20      1
					//   _SH6                 c21      1
					//   _SH7                 c22      1
					//   _SH8                 c23      1
					//   _BlendWeightIBL      c24      1
					//   _ExposureIBL1        c25      1
					//   _SH01                c26      1
					//   _SH11                c27      1
					//   _SH21                c28      1
					//   _SH31                c29      1
					//   _SH41                c30      1
					//   _SH51                c31      1
					//   _SH61                c32      1
					//   _SH71                c33      1
					//   _SH81                c34      1
					//   _Cutoff              c35      1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c36, 2, -1, 0, 1
					    def c37, 3, -1, 0, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c11, c11.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c10.w
					    mad_pp r1, r0.w, r1.w, -c35.x
					    mul_pp r0, r0, c10
					    texkill r1
					    mad r1.xy, v3, c12, c12.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c36.x, c36.y
					    dp2add_sat_pp r1.w, r1, r1, c36.z
					    add_pp r1.w, -r1.w, c36.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.z, v2, r2
					    mul r3.xyz, r1.z, c2
					    dp3 r1.y, v1, r2
					    dp3 r1.x, v0, r2
					    mad r2.xyz, c1, r1.y, r3
					    mad r2.xyz, c0, r1.x, r2
					    nrm r3.xyz, r2
					    mov r2.xyz, c16
					    mad r2.xyz, r2, r3.y, c15
					    mad r2.xyz, c17, r3.z, r2
					    mad r2.xyz, c18, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c19, r4.x, r2
					    mad r2.xyz, c20, r4.y, r2
					    mad r2.xyz, c22, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c37.x, c37.y
					    mad r2.xyz, c21, r2.w, r2
					    mad r2.xyz, c23, r1.w, r2
					    mul r3.xyz, r1.z, c5
					    mad r3.xyz, c4, r1.y, r3
					    mad r3.xyz, c3, r1.x, r3
					    nrm r4.xyz, r3
					    mov r3.xyz, c27
					    mad r3.xyz, r3, r4.y, c26
					    mad r3.xyz, c28, r4.z, r3
					    mad r3.xyz, c29, r4.x, r3
					    mul r5.xyz, r4.xzxw, r4.yyzw
					    mad r3.xyz, c30, r5.x, r3
					    mad r3.xyz, c31, r5.y, r3
					    mad r3.xyz, c33, r5.z, r3
					    mul r4.yz, r4, r4
					    mad r1.w, r4.x, r4.x, -r4.y
					    mad r2.w, r4.z, c37.x, c37.y
					    mad r3.xyz, c32, r2.w, r3
					    mad r3.xyz, c34, r1.w, r3
					    lrp_pp r4.xyz, c24.x, r2_abs, r3_abs
					    mov r2.xw, c25
					    add_pp r2.yz, -r2.xxww, c13.xxww
					    mad_pp r2.xy, c24.x, r2.yzzw, r2.xwzw
					    mul_pp r2.yzw, r0.xxyz, r2.y
					    mul_pp r1.w, r2.x, c14.x
					    mul_pp r3.xyz, r2.yzww, r4
					    nrm_pp r4.xyz, c6
					    dp3_sat_pp r1.x, r1, r4
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r1.xyz, r2.yzww, r1.x
					    mul_pp r2.xyz, r2.yzww, v4
					    mul_pp r0.xyz, r1, c9
					    mov_pp r2.w, c36.z
					    add_pp r0, r0, r2
					    mad_pp r0.xyz, r3, r1.w, r0
					    mov_pp oC0.w, r0.w
					    add r0.xyz, r0, -c7
					    mul r0.w, c8.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c7
					
					// approximately 82 instruction slots used (2 texture, 80 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   sampler2D _ShadowMapTexture;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _SkyMatrix                    c3       3
					//   _SkyMatrix1                   c6       3
					//   _WorldSpaceCameraPos          c9       1
					//   _WorldSpaceLightPos0          c10      1
					//   _LightShadowData              c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_FogColor                c13      1
					//   unity_FogParams               c14      1
					//   _LightColor0                  c15      1
					//   _Color                        c16      1
					//   _MainTex_ST                   c17      1
					//   _BumpMap_ST                   c18      1
					//   _ExposureIBL                  c19      1
					//   _UniformOcclusion             c20      1
					//   _SH0                          c21      1
					//   _SH1                          c22      1
					//   _SH2                          c23      1
					//   _SH3                          c24      1
					//   _SH4                          c25      1
					//   _SH5                          c26      1
					//   _SH6                          c27      1
					//   _SH7                          c28      1
					//   _SH8                          c29      1
					//   _BlendWeightIBL               c30      1
					//   _ExposureIBL1                 c31      1
					//   _SH01                         c32      1
					//   _SH11                         c33      1
					//   _SH21                         c34      1
					//   _SH31                         c35      1
					//   _SH41                         c36      1
					//   _SH51                         c37      1
					//   _SH61                         c38      1
					//   _SH71                         c39      1
					//   _SH81                         c40      1
					//   _Cutoff                       c41      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c42, 2, -1, 0, 1
					    def c43, 3, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c17, c17.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c16.w
					    mad_pp r1, r0.w, r1.w, -c41.x
					    mul_pp r0, r0, c16
					    texkill r1
					    mad r1.xy, v3, c18, c18.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c42.x, c42.y
					    dp2add_sat_pp r1.w, r1, r1, c42.z
					    add_pp r1.w, -r1.w, c42.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.z, v2, r2
					    mul r3.xyz, r1.z, c5
					    dp3 r1.y, v1, r2
					    dp3 r1.x, v0, r2
					    mad r2.xyz, c4, r1.y, r3
					    mad r2.xyz, c3, r1.x, r2
					    nrm r3.xyz, r2
					    mov r2.xyz, c22
					    mad r2.xyz, r2, r3.y, c21
					    mad r2.xyz, c23, r3.z, r2
					    mad r2.xyz, c24, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c25, r4.x, r2
					    mad r2.xyz, c26, r4.y, r2
					    mad r2.xyz, c28, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c43.x, c43.y
					    mad r2.xyz, c27, r2.w, r2
					    mad r2.xyz, c29, r1.w, r2
					    mul r3.xyz, r1.z, c8
					    mad r3.xyz, c7, r1.y, r3
					    mad r3.xyz, c6, r1.x, r3
					    nrm r4.xyz, r3
					    mov r3.xyz, c33
					    mad r3.xyz, r3, r4.y, c32
					    mad r3.xyz, c34, r4.z, r3
					    mad r3.xyz, c35, r4.x, r3
					    mul r5.xyz, r4.xzxw, r4.yyzw
					    mad r3.xyz, c36, r5.x, r3
					    mad r3.xyz, c37, r5.y, r3
					    mad r3.xyz, c39, r5.z, r3
					    mul r4.yz, r4, r4
					    mad r1.w, r4.x, r4.x, -r4.y
					    mad r2.w, r4.z, c43.x, c43.y
					    mad r3.xyz, c38, r2.w, r3
					    mad r3.xyz, c40, r1.w, r3
					    lrp_pp r4.xyz, c30.x, r2_abs, r3_abs
					    mov r2.xw, c31
					    add_pp r2.yz, -r2.xxww, c19.xxww
					    mad_pp r2.xy, c30.x, r2.yzzw, r2.xwzw
					    mul_pp r2.yzw, r0.xxyz, r2.y
					    mul_pp r1.w, r2.x, c20.x
					    mul_pp r3.xyz, r2.yzww, r4
					    nrm_pp r4.xyz, c10
					    dp3_sat_pp r1.x, r1, r4
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r1.xyz, r2.yzww, r1.x
					    mul_pp r2.xyz, r2.yzww, v4
					    mul_pp r1.xyz, r1, c15
					    mov r4.x, v0.w
					    mov r4.y, v1.w
					    mov r4.z, v2.w
					    add r5.xyz, r4, -c12
					    add r4.xyz, -r4, c9
					    dp3 r3.w, r4, c2
					    dp3 r4.x, r5, r5
					    rsq r4.x, r4.x
					    rcp r4.x, r4.x
					    lrp r5.x, c12.w, r4.x, r3.w
					    mad_sat_pp r3.w, r5.x, c11.z, c11.w
					    texldp_pp r4, v5, s0
					    add_sat_pp r3.w, r3.w, r4.x
					    mul_pp r0.xyz, r1, r3.w
					    mov_pp r2.w, c42.z
					    add_pp r0, r0, r2
					    mad_pp r0.xyz, r3, r1.w, r0
					    mov_pp oC0.w, r0.w
					    add r0.xyz, r0, -c13
					    mul r0.w, c14.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c13
					
					// approximately 96 instruction slots used (3 texture, 93 arithmetic)"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 102689
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 47 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 47 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 47 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_WorldTransformParams c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.x
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c13.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r3, r0
					    mov o6.zw, r0
					    mov o7.x, r0.z
					    mul r2.w, r1.x, c13.z
					    add o6.xy, r2.z, r2.xwzw
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c12.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c13.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 47 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o4.x, c0, v0
					    dp4 o4.y, c1, v0
					    dp4 o4.z, c2, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o5, c12.xxyy, v3.xyxx
					    mov o6.xy, c12.y
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 43 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _Color               c5       1
					//   _MainTex_ST          c6       1
					//   _BumpMap_ST          c7       1
					//   _ExposureIBL         c8       1
					//   _Cutoff              c9       1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c10, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c6, c6.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c9.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v4, c7, c7.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c10.x, c10.y
					    dp2add_sat_pp r1.w, r1, r1, c10.z
					    add_pp r1.w, -r1.w, c10.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c8.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c4
					    mad r1, v3.xyzx, c10.wwwz, c10.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld_pp r1, r0.w, s0
					    mul_pp oC0.xyz, r0, r1.x
					
					// approximately 37 instruction slots used (3 texture, 34 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   _LightColor0         c1       1
					//   _Color               c2       1
					//   _MainTex_ST          c3       1
					//   _BumpMap_ST          c4       1
					//   _ExposureIBL         c5       1
					//   _Cutoff              c6       1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c7, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c3, c3.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c2.w
					    mad_pp r1, r0.w, r1.w, -c6.x
					    mul_pp r0, r0, c2
					    texkill r1
					    mad r1.xy, v3, c4, c4.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c7.x, c7.y
					    dp2add_sat_pp r1.w, r1, r1, c7.z
					    add_pp r1.w, -r1.w, c7.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c0
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c5.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp oC0.xyz, r0, c1
					
					// approximately 29 instruction slots used (2 texture, 27 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceLightPos0 c4       1
					//   _LightColor0         c5       1
					//   _Color               c6       1
					//   _MainTex_ST          c7       1
					//   _BumpMap_ST          c8       1
					//   _ExposureIBL         c9       1
					//   _Cutoff              c10      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c11, 2, -1, 0, 1
					    def c12, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c7, c7.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c10.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v4, c8, c8.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c11.x, c11.y
					    dp2add_sat_pp r1.w, r1, r1, c11.z
					    add_pp r1.w, -r1.w, c11.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c4, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c9.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c5
					    mad r1, v3.xyzx, c11.wwwz, c11.zzzw
					    dp4 r0.w, c3, r1
					    rcp r0.w, r0.w
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    mad r1.xy, r2, r0.w, c12.x
					    dp3 r0.w, r2, r2
					    texld_pp r3, r0.w, s1
					    texld_pp r1, r1, s0
					    mul_pp r0.w, r3.x, r1.w
					    cmp_pp r0.w, -r2.z, c11.z, r0.w
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 43 instruction slots used (4 texture, 39 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _Color               c5       1
					//   _MainTex_ST          c6       1
					//   _BumpMap_ST          c7       1
					//   _ExposureIBL         c8       1
					//   _Cutoff              c9       1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c10, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c6, c6.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c9.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v4, c7, c7.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c10.x, c10.y
					    dp2add_sat_pp r1.w, r1, r1, c10.z
					    add_pp r1.w, -r1.w, c10.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c8.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c4
					    mad r1, v3.xyzx, c10.wwwz, c10.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld r1, r2, s0
					    texld r2, r0.w, s1
					    mul_pp r0.w, r1.w, r2.x
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 39 instruction slots used (4 texture, 35 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceLightPos0 c2       1
					//   _LightColor0         c3       1
					//   _Color               c4       1
					//   _MainTex_ST          c5       1
					//   _BumpMap_ST          c6       1
					//   _ExposureIBL         c7       1
					//   _Cutoff              c8       1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c9, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c5, c5.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c4.w
					    mad_pp r1, r0.w, r1.w, -c8.x
					    mul_pp r0, r0, c4
					    texkill r1
					    mad r1.xy, v4, c6, c6.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c9.x, c9.y
					    dp2add_sat_pp r1.w, r1, r1, c9.z
					    add_pp r1.w, -r1.w, c9.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c2
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c7.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c3
					    mad r1, v3.xyzx, c9.wwwz, c9.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s0
					    mul_pp oC0.xyz, r0, r1.w
					
					// approximately 34 instruction slots used (3 texture, 31 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   unity_WorldToLight            c4       4
					//   unity_MatrixV                 c8       3
					//   _WorldSpaceCameraPos          c11      1
					//   _WorldSpaceLightPos0          c12      1
					//   _LightShadowData              c13      1
					//   unity_ShadowFadeCenterAndType c14      1
					//   _LightColor0                  c15      1
					//   _Color                        c16      1
					//   _MainTex_ST                   c17      1
					//   _BumpMap_ST                   c18      1
					//   _ExposureIBL                  c19      1
					//   _Cutoff                       c20      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c21, 2, -1, 0, 1
					    def c22, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c17, c17.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c16.w
					    mad_pp r1, r0.w, r1.w, -c20.x
					    mul_pp r0, r0, c16
					    texkill r1
					    add r1.xyz, -c14, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c11.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c10
					    lrp r2.x, c14.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c13.z, c13.w
					    mov r1.w, c21.w
					    mad r2, v3.xyzx, c21.wwwz, c21.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    texldp_pp r3, r3, s0
					    lrp_pp r4.x, r3.x, r1.w, c13.x
					    add_sat_pp r1.x, r1.x, r4.x
					    dp4 r1.y, c7, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c4, r2
					    dp4 r3.y, c5, r2
					    dp4 r3.z, c6, r2
					    mad r1.yz, r3.xxyw, r1.y, c22.x
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c21.z, r1.x
					    mad r1.yz, v4.xxyw, c18.xxyw, c18.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c21.x, c21.y
					    dp2add_sat_pp r1.y, r2, r2, c21.z
					    add_pp r1.y, -r1.y, c21.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c12.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c19.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c15
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 60 instruction slots used (5 texture, 55 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   _ShadowOffsets                c4       4
					//   unity_WorldToLight            c8       4
					//   unity_MatrixV                 c12      3
					//   _WorldSpaceCameraPos          c15      1
					//   _WorldSpaceLightPos0          c16      1
					//   _LightShadowData              c17      1
					//   unity_ShadowFadeCenterAndType c18      1
					//   _LightColor0                  c19      1
					//   _Color                        c20      1
					//   _MainTex_ST                   c21      1
					//   _BumpMap_ST                   c22      1
					//   _ExposureIBL                  c23      1
					//   _Cutoff                       c24      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c25, 2, -1, 0, 1
					    def c26, 0.25, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c21, c21.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c20.w
					    mad_pp r1, r0.w, r1.w, -c24.x
					    mul_pp r0, r0, c20
					    texkill r1
					    add r1.xyz, -c18, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c15.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c14
					    lrp r2.x, c18.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c17.z, c17.w
					    mov r1.w, c25.w
					    mad r2, v3.xyzx, c25.wwwz, c25.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    rcp r1.y, r3.w
					    mad r4, r3, r1.y, c4
					    texldp_pp r4, r4, s0
					    mad r5, r3, r1.y, c5
					    texldp_pp r5, r5, s0
					    mov_pp r4.y, r5.x
					    mad r5, r3, r1.y, c6
					    mad r3, r3, r1.y, c7
					    texldp_pp r3, r3, s0
					    mov_pp r4.w, r3.x
					    texldp_pp r3, r5, s0
					    mov_pp r4.z, r3.x
					    lrp_pp r3, r4, r1.w, c17.x
					    dp4_pp r1.y, r3, c26.x
					    add_sat_pp r1.x, r1.x, r1.y
					    dp4 r1.y, c11, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r1.yz, r3.xxyw, r1.y, c26.y
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c25.z, r1.x
					    mad r1.yz, v4.xxyw, c22.xxyw, c22.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c25.x, c25.y
					    dp2add_sat_pp r1.y, r2, r2, c25.z
					    add_pp r1.y, -r1.y, c25.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c16.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c23.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c19
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 72 instruction slots used (8 texture, 64 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _WorldSpaceCameraPos          c3       1
					//   _WorldSpaceLightPos0          c4       1
					//   _LightShadowData              c5       1
					//   unity_ShadowFadeCenterAndType c6       1
					//   _LightColor0                  c7       1
					//   _Color                        c8       1
					//   _MainTex_ST                   c9       1
					//   _BumpMap_ST                   c10      1
					//   _ExposureIBL                  c11      1
					//   _Cutoff                       c12      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c13, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c9, c9.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c8.w
					    mad_pp r1, r0.w, r1.w, -c12.x
					    mul_pp r0, r0, c8
					    texkill r1
					    mad r1.xy, v4, c10, c10.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c13.x, c13.y
					    dp2add_sat_pp r1.w, r1, r1, c13.z
					    add_pp r1.w, -r1.w, c13.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c4
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c11.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c7
					    add r1.xyz, -c6, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c3, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c6.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c5.z, c5.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       2
					//   _WorldSpaceCameraPos          c5       1
					//   _WorldSpaceLightPos0          c6       1
					//   _LightShadowData              c7       1
					//   unity_ShadowFadeCenterAndType c8       1
					//   _LightColor0                  c9       1
					//   _Color                        c10      1
					//   _MainTex_ST                   c11      1
					//   _BumpMap_ST                   c12      1
					//   _ExposureIBL                  c13      1
					//   _Cutoff                       c14      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c15, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c11, c11.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c10.w
					    mad_pp r1, r0.w, r1.w, -c14.x
					    mul_pp r0, r0, c10
					    texkill r1
					    mad r1.xy, v4, c12, c12.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c15.x, c15.y
					    dp2add_sat_pp r1.w, r1, r1, c15.z
					    add_pp r1.w, -r1.w, c15.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c6
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c13.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c9
					    add r1.xyz, -c8, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c5, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c8.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c7.z, c7.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mad r1, v3.xyzx, c15.wwwz, c15.zzzw
					    dp4 r2.x, c3, r1
					    dp4 r2.y, c4, r1
					    texld r1, r2, s1
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 45 instruction slots used (4 texture, 41 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _Cutoff                       c16      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c17, 2, -1, 0, 1
					    def c18, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c16.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c18.x, r3.x
					    mov r1.w, c17.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c17.wwwz, c17.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c17.x, c17.y
					    dp2add_sat_pp r1.y, r2, r2, c17.z
					    add_pp r1.y, -r1.y, c17.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c15.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 56 instruction slots used (4 texture, 52 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _Cutoff                       c16      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c17, 2, -1, 0, 1
					    def c18, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c16.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c18.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c18.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c18.yxyw
					    add r1.xyz, r1, c18.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c18.z, r2
					    mov r2.w, c17.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c18.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c17.wwwz, c17.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c17.x, c17.y
					    dp2add_sat_pp r1.y, r2, r2, c17.z
					    add_pp r1.y, -r1.y, c17.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c15.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 67 instruction slots used (7 texture, 60 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _Cutoff                       c16      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c17, 2, -1, 0, 1
					    def c18, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c16.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c18.x, r3.x
					    mov r1.w, c17.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c17.wwwz, c17.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c17.x, c17.y
					    dp2add_sat_pp r1.y, r2, r2, c17.z
					    add_pp r1.y, -r1.y, c17.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c15.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 58 instruction slots used (5 texture, 53 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _Cutoff                       c16      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c17, 2, -1, 0, 1
					    def c18, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c16.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c18.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c18.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c18.yxyw
					    add r1.xyz, r1, c18.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c18.z, r2
					    mov r2.w, c17.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c18.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c17.wwwz, c17.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c17.x, c17.y
					    dp2add_sat_pp r1.y, r2, r2, c17.z
					    add_pp r1.y, -r1.y, c17.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c15.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 69 instruction slots used (8 texture, 61 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogParams      c4       1
					//   _LightColor0         c5       1
					//   _Color               c6       1
					//   _MainTex_ST          c7       1
					//   _BumpMap_ST          c8       1
					//   _ExposureIBL         c9       1
					//   _Cutoff              c10      1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c11, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c7, c7.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c10.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v4, c8, c8.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c11.x, c11.y
					    dp2add_sat_pp r1.w, r1, r1, c11.z
					    add_pp r1.w, -r1.w, c11.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c9.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c5
					    mad r1, v3.xyzx, c11.wwwz, c11.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld_pp r1, r0.w, s0
					    mul_pp r0.xyz, r0, r1.x
					    mul r0.w, c4.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 41 instruction slots used (3 texture, 38 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   unity_FogParams      c1       1
					//   _LightColor0         c2       1
					//   _Color               c3       1
					//   _MainTex_ST          c4       1
					//   _BumpMap_ST          c5       1
					//   _ExposureIBL         c6       1
					//   _Cutoff              c7       1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c8, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4 v3.xy
					    dcl_texcoord6 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c4, c4.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c3.w
					    mad_pp r1, r0.w, r1.w, -c7.x
					    mul_pp r0, r0, c3
					    texkill r1
					    mad r1.xy, v3, c5, c5.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c8.x, c8.y
					    dp2add_sat_pp r1.w, r1, r1, c8.z
					    add_pp r1.w, -r1.w, c8.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c0
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c6.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c2
					    mul r0.w, c1.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 33 instruction slots used (2 texture, 31 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceLightPos0 c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _Color               c7       1
					//   _MainTex_ST          c8       1
					//   _BumpMap_ST          c9       1
					//   _ExposureIBL         c10      1
					//   _Cutoff              c11      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c12, 2, -1, 0, 1
					    def c13, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c8, c8.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c7.w
					    mad_pp r1, r0.w, r1.w, -c11.x
					    mul_pp r0, r0, c7
					    texkill r1
					    mad r1.xy, v4, c9, c9.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r1.w, r1, r1, c12.z
					    add_pp r1.w, -r1.w, c12.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c4, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c10.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c6
					    mad r1, v3.xyzx, c12.wwwz, c12.zzzw
					    dp4 r0.w, c3, r1
					    rcp r0.w, r0.w
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    mad r1.xy, r2, r0.w, c13.x
					    dp3 r0.w, r2, r2
					    texld_pp r3, r0.w, s1
					    texld_pp r1, r1, s0
					    mul_pp r0.w, r3.x, r1.w
					    cmp_pp r0.w, -r2.z, c12.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c5.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 47 instruction slots used (4 texture, 43 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogParams      c4       1
					//   _LightColor0         c5       1
					//   _Color               c6       1
					//   _MainTex_ST          c7       1
					//   _BumpMap_ST          c8       1
					//   _ExposureIBL         c9       1
					//   _Cutoff              c10      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c11, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c7, c7.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c10.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v4, c8, c8.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c11.x, c11.y
					    dp2add_sat_pp r1.w, r1, r1, c11.z
					    add_pp r1.w, -r1.w, c11.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c9.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c5
					    mad r1, v3.xyzx, c11.wwwz, c11.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld r1, r2, s0
					    texld r2, r0.w, s1
					    mul_pp r0.w, r1.w, r2.x
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c4.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 43 instruction slots used (4 texture, 39 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceLightPos0 c2       1
					//   unity_FogParams      c3       1
					//   _LightColor0         c4       1
					//   _Color               c5       1
					//   _MainTex_ST          c6       1
					//   _BumpMap_ST          c7       1
					//   _ExposureIBL         c8       1
					//   _Cutoff              c9       1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c10, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c6, c6.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c9.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v4, c7, c7.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c10.x, c10.y
					    dp2add_sat_pp r1.w, r1, r1, c10.z
					    add_pp r1.w, -r1.w, c10.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c2
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c8.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c4
					    mad r1, v3.xyzx, c10.wwwz, c10.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s0
					    mul_pp r0.xyz, r0, r1.w
					    mul r0.w, c3.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 38 instruction slots used (3 texture, 35 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   unity_WorldToLight            c4       4
					//   unity_MatrixV                 c8       3
					//   _WorldSpaceCameraPos          c11      1
					//   _WorldSpaceLightPos0          c12      1
					//   _LightShadowData              c13      1
					//   unity_ShadowFadeCenterAndType c14      1
					//   unity_FogParams               c15      1
					//   _LightColor0                  c16      1
					//   _Color                        c17      1
					//   _MainTex_ST                   c18      1
					//   _BumpMap_ST                   c19      1
					//   _ExposureIBL                  c20      1
					//   _Cutoff                       c21      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c22, 2, -1, 0, 1
					    def c23, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c18, c18.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c17.w
					    mad_pp r1, r0.w, r1.w, -c21.x
					    mul_pp r0, r0, c17
					    texkill r1
					    add r1.xyz, -c14, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c11.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c10
					    lrp r2.x, c14.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c13.z, c13.w
					    mov r1.w, c22.w
					    mad r2, v3.xyzx, c22.wwwz, c22.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    texldp_pp r3, r3, s0
					    lrp_pp r4.x, r3.x, r1.w, c13.x
					    add_sat_pp r1.x, r1.x, r4.x
					    dp4 r1.y, c7, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c4, r2
					    dp4 r3.y, c5, r2
					    dp4 r3.z, c6, r2
					    mad r1.yz, r3.xxyw, r1.y, c23.x
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c22.z, r1.x
					    mad r1.yz, v4.xxyw, c19.xxyw, c19.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c22.x, c22.y
					    dp2add_sat_pp r1.y, r2, r2, c22.z
					    add_pp r1.y, -r1.y, c22.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c12.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c20.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c16
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c15.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 64 instruction slots used (5 texture, 59 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   _ShadowOffsets                c4       4
					//   unity_WorldToLight            c8       4
					//   unity_MatrixV                 c12      3
					//   _WorldSpaceCameraPos          c15      1
					//   _WorldSpaceLightPos0          c16      1
					//   _LightShadowData              c17      1
					//   unity_ShadowFadeCenterAndType c18      1
					//   unity_FogParams               c19      1
					//   _LightColor0                  c20      1
					//   _Color                        c21      1
					//   _MainTex_ST                   c22      1
					//   _BumpMap_ST                   c23      1
					//   _ExposureIBL                  c24      1
					//   _Cutoff                       c25      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c26, 2, -1, 0, 1
					    def c27, 0.25, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c22, c22.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c21.w
					    mad_pp r1, r0.w, r1.w, -c25.x
					    mul_pp r0, r0, c21
					    texkill r1
					    add r1.xyz, -c18, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c15.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c14
					    lrp r2.x, c18.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c17.z, c17.w
					    mov r1.w, c26.w
					    mad r2, v3.xyzx, c26.wwwz, c26.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    rcp r1.y, r3.w
					    mad r4, r3, r1.y, c4
					    texldp_pp r4, r4, s0
					    mad r5, r3, r1.y, c5
					    texldp_pp r5, r5, s0
					    mov_pp r4.y, r5.x
					    mad r5, r3, r1.y, c6
					    mad r3, r3, r1.y, c7
					    texldp_pp r3, r3, s0
					    mov_pp r4.w, r3.x
					    texldp_pp r3, r5, s0
					    mov_pp r4.z, r3.x
					    lrp_pp r3, r4, r1.w, c17.x
					    dp4_pp r1.y, r3, c27.x
					    add_sat_pp r1.x, r1.x, r1.y
					    dp4 r1.y, c11, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r1.yz, r3.xxyw, r1.y, c27.y
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c26.z, r1.x
					    mad r1.yz, v4.xxyw, c23.xxyw, c23.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c26.x, c26.y
					    dp2add_sat_pp r1.y, r2, r2, c26.z
					    add_pp r1.y, -r1.y, c26.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c16.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c24.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c20
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c19.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 76 instruction slots used (8 texture, 68 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _WorldSpaceCameraPos          c3       1
					//   _WorldSpaceLightPos0          c4       1
					//   _LightShadowData              c5       1
					//   unity_ShadowFadeCenterAndType c6       1
					//   unity_FogParams               c7       1
					//   _LightColor0                  c8       1
					//   _Color                        c9       1
					//   _MainTex_ST                   c10      1
					//   _BumpMap_ST                   c11      1
					//   _ExposureIBL                  c12      1
					//   _Cutoff                       c13      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c14, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c10, c10.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c9.w
					    mad_pp r1, r0.w, r1.w, -c13.x
					    mul_pp r0, r0, c9
					    texkill r1
					    mad r1.xy, v4, c11, c11.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c14.x, c14.y
					    dp2add_sat_pp r1.w, r1, r1, c14.z
					    add_pp r1.w, -r1.w, c14.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c4
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c12.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c8
					    add r1.xyz, -c6, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c3, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c6.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c5.z, c5.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c7.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 44 instruction slots used (3 texture, 41 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       2
					//   _WorldSpaceCameraPos          c5       1
					//   _WorldSpaceLightPos0          c6       1
					//   _LightShadowData              c7       1
					//   unity_ShadowFadeCenterAndType c8       1
					//   unity_FogParams               c9       1
					//   _LightColor0                  c10      1
					//   _Color                        c11      1
					//   _MainTex_ST                   c12      1
					//   _BumpMap_ST                   c13      1
					//   _ExposureIBL                  c14      1
					//   _Cutoff                       c15      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c16, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c12, c12.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c11.w
					    mad_pp r1, r0.w, r1.w, -c15.x
					    mul_pp r0, r0, c11
					    texkill r1
					    mad r1.xy, v4, c13, c13.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c16.x, c16.y
					    dp2add_sat_pp r1.w, r1, r1, c16.z
					    add_pp r1.w, -r1.w, c16.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c6
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mul_pp r0.xyz, r0, c14.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c10
					    add r1.xyz, -c8, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c5, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c8.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c7.z, c7.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mad r1, v3.xyzx, c16.wwwz, c16.zzzw
					    dp4 r2.x, c3, r1
					    dp4 r2.y, c4, r1
					    texld r1, r2, s1
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c9.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 49 instruction slots used (4 texture, 45 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _Cutoff                       c17      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c19.x, r3.x
					    mov r1.w, c18.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c18.wwwz, c18.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.y, r2, r2, c18.z
					    add_pp r1.y, -r1.y, c18.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c16.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 60 instruction slots used (4 texture, 56 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _Cutoff                       c17      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c19.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c19.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c19.yxyw
					    add r1.xyz, r1, c19.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c19.z, r2
					    mov r2.w, c18.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c19.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c18.wwwz, c18.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.y, r2, r2, c18.z
					    add_pp r1.y, -r1.y, c18.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c16.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 71 instruction slots used (7 texture, 64 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _Cutoff                       c17      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c19.x, r3.x
					    mov r1.w, c18.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c18.wwwz, c18.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.y, r2, r2, c18.z
					    add_pp r1.y, -r1.y, c18.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c16.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 62 instruction slots used (5 texture, 57 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _Cutoff                       c17      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c19.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c19.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c19.yxyw
					    add r1.xyz, r1, c19.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c19.z, r2
					    mov r2.w, c18.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c19.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c18.wwwz, c18.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.y, r2, r2, c18.z
					    add_pp r1.y, -r1.y, c18.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r0.xyz, r0, c16.w
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 73 instruction slots used (8 texture, 65 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _Color               c5       1
					//   _MainTex_ST          c6       1
					//   _BumpMap_ST          c7       1
					//   _ExposureIBL         c8       1
					//   _BlendWeightIBL      c9       1
					//   _ExposureIBL1        c10      1
					//   _Cutoff              c11      1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c12, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c6, c6.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c11.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v4, c7, c7.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r1.w, r1, r1, c12.z
					    add_pp r1.w, -r1.w, c12.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c10.w
					    add_pp r1.y, -r1.w, c8.w
					    mad_pp r1.y, c9.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c4
					    mad r1, v3.xyzx, c12.wwwz, c12.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld_pp r1, r0.w, s0
					    mul_pp oC0.xyz, r0, r1.x
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   _LightColor0         c1       1
					//   _Color               c2       1
					//   _MainTex_ST          c3       1
					//   _BumpMap_ST          c4       1
					//   _ExposureIBL         c5       1
					//   _BlendWeightIBL      c6       1
					//   _ExposureIBL1        c7       1
					//   _Cutoff              c8       1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c9, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c3, c3.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c2.w
					    mad_pp r1, r0.w, r1.w, -c8.x
					    mul_pp r0, r0, c2
					    texkill r1
					    mad r1.xy, v3, c4, c4.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c9.x, c9.y
					    dp2add_sat_pp r1.w, r1, r1, c9.z
					    add_pp r1.w, -r1.w, c9.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c0
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c7.w
					    add_pp r1.y, -r1.w, c5.w
					    mad_pp r1.y, c6.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp oC0.xyz, r0, c1
					
					// approximately 32 instruction slots used (2 texture, 30 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceLightPos0 c4       1
					//   _LightColor0         c5       1
					//   _Color               c6       1
					//   _MainTex_ST          c7       1
					//   _BumpMap_ST          c8       1
					//   _ExposureIBL         c9       1
					//   _BlendWeightIBL      c10      1
					//   _ExposureIBL1        c11      1
					//   _Cutoff              c12      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c13, 2, -1, 0, 1
					    def c14, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c7, c7.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c12.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v4, c8, c8.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c13.x, c13.y
					    dp2add_sat_pp r1.w, r1, r1, c13.z
					    add_pp r1.w, -r1.w, c13.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c4, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c11.w
					    add_pp r1.y, -r1.w, c9.w
					    mad_pp r1.y, c10.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c5
					    mad r1, v3.xyzx, c13.wwwz, c13.zzzw
					    dp4 r0.w, c3, r1
					    rcp r0.w, r0.w
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    mad r1.xy, r2, r0.w, c14.x
					    dp3 r0.w, r2, r2
					    texld_pp r3, r0.w, s1
					    texld_pp r1, r1, s0
					    mul_pp r0.w, r3.x, r1.w
					    cmp_pp r0.w, -r2.z, c13.z, r0.w
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 46 instruction slots used (4 texture, 42 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _Color               c5       1
					//   _MainTex_ST          c6       1
					//   _BumpMap_ST          c7       1
					//   _ExposureIBL         c8       1
					//   _BlendWeightIBL      c9       1
					//   _ExposureIBL1        c10      1
					//   _Cutoff              c11      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c12, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c6, c6.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c11.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v4, c7, c7.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r1.w, r1, r1, c12.z
					    add_pp r1.w, -r1.w, c12.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c10.w
					    add_pp r1.y, -r1.w, c8.w
					    mad_pp r1.y, c9.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c4
					    mad r1, v3.xyzx, c12.wwwz, c12.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld r1, r2, s0
					    texld r2, r0.w, s1
					    mul_pp r0.w, r1.w, r2.x
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 42 instruction slots used (4 texture, 38 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceLightPos0 c2       1
					//   _LightColor0         c3       1
					//   _Color               c4       1
					//   _MainTex_ST          c5       1
					//   _BumpMap_ST          c6       1
					//   _ExposureIBL         c7       1
					//   _BlendWeightIBL      c8       1
					//   _ExposureIBL1        c9       1
					//   _Cutoff              c10      1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c11, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c5, c5.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c4.w
					    mad_pp r1, r0.w, r1.w, -c10.x
					    mul_pp r0, r0, c4
					    texkill r1
					    mad r1.xy, v4, c6, c6.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c11.x, c11.y
					    dp2add_sat_pp r1.w, r1, r1, c11.z
					    add_pp r1.w, -r1.w, c11.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c2
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c9.w
					    add_pp r1.y, -r1.w, c7.w
					    mad_pp r1.y, c8.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c3
					    mad r1, v3.xyzx, c11.wwwz, c11.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s0
					    mul_pp oC0.xyz, r0, r1.w
					
					// approximately 37 instruction slots used (3 texture, 34 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   unity_WorldToLight            c4       4
					//   unity_MatrixV                 c8       3
					//   _WorldSpaceCameraPos          c11      1
					//   _WorldSpaceLightPos0          c12      1
					//   _LightShadowData              c13      1
					//   unity_ShadowFadeCenterAndType c14      1
					//   _LightColor0                  c15      1
					//   _Color                        c16      1
					//   _MainTex_ST                   c17      1
					//   _BumpMap_ST                   c18      1
					//   _ExposureIBL                  c19      1
					//   _BlendWeightIBL               c20      1
					//   _ExposureIBL1                 c21      1
					//   _Cutoff                       c22      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c23, 2, -1, 0, 1
					    def c24, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c17, c17.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c16.w
					    mad_pp r1, r0.w, r1.w, -c22.x
					    mul_pp r0, r0, c16
					    texkill r1
					    add r1.xyz, -c14, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c11.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c10
					    lrp r2.x, c14.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c13.z, c13.w
					    mov r1.w, c23.w
					    mad r2, v3.xyzx, c23.wwwz, c23.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    texldp_pp r3, r3, s0
					    lrp_pp r4.x, r3.x, r1.w, c13.x
					    add_sat_pp r1.x, r1.x, r4.x
					    dp4 r1.y, c7, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c4, r2
					    dp4 r3.y, c5, r2
					    dp4 r3.z, c6, r2
					    mad r1.yz, r3.xxyw, r1.y, c24.x
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c23.z, r1.x
					    mad r1.yz, v4.xxyw, c18.xxyw, c18.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c23.x, c23.y
					    dp2add_sat_pp r1.y, r2, r2, c23.z
					    add_pp r1.y, -r1.y, c23.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c12.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c21.w
					    add_pp r1.z, -r1.w, c19.w
					    mad_pp r1.z, c20.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c15
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 63 instruction slots used (5 texture, 58 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   _ShadowOffsets                c4       4
					//   unity_WorldToLight            c8       4
					//   unity_MatrixV                 c12      3
					//   _WorldSpaceCameraPos          c15      1
					//   _WorldSpaceLightPos0          c16      1
					//   _LightShadowData              c17      1
					//   unity_ShadowFadeCenterAndType c18      1
					//   _LightColor0                  c19      1
					//   _Color                        c20      1
					//   _MainTex_ST                   c21      1
					//   _BumpMap_ST                   c22      1
					//   _ExposureIBL                  c23      1
					//   _BlendWeightIBL               c24      1
					//   _ExposureIBL1                 c25      1
					//   _Cutoff                       c26      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c27, 2, -1, 0, 1
					    def c28, 0.25, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c21, c21.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c20.w
					    mad_pp r1, r0.w, r1.w, -c26.x
					    mul_pp r0, r0, c20
					    texkill r1
					    add r1.xyz, -c18, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c15.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c14
					    lrp r2.x, c18.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c17.z, c17.w
					    mov r1.w, c27.w
					    mad r2, v3.xyzx, c27.wwwz, c27.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    rcp r1.y, r3.w
					    mad r4, r3, r1.y, c4
					    texldp_pp r4, r4, s0
					    mad r5, r3, r1.y, c5
					    texldp_pp r5, r5, s0
					    mov_pp r4.y, r5.x
					    mad r5, r3, r1.y, c6
					    mad r3, r3, r1.y, c7
					    texldp_pp r3, r3, s0
					    mov_pp r4.w, r3.x
					    texldp_pp r3, r5, s0
					    mov_pp r4.z, r3.x
					    lrp_pp r3, r4, r1.w, c17.x
					    dp4_pp r1.y, r3, c28.x
					    add_sat_pp r1.x, r1.x, r1.y
					    dp4 r1.y, c11, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r1.yz, r3.xxyw, r1.y, c28.y
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c27.z, r1.x
					    mad r1.yz, v4.xxyw, c22.xxyw, c22.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c27.x, c27.y
					    dp2add_sat_pp r1.y, r2, r2, c27.z
					    add_pp r1.y, -r1.y, c27.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c16.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c25.w
					    add_pp r1.z, -r1.w, c23.w
					    mad_pp r1.z, c24.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c19
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 75 instruction slots used (8 texture, 67 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _WorldSpaceCameraPos          c3       1
					//   _WorldSpaceLightPos0          c4       1
					//   _LightShadowData              c5       1
					//   unity_ShadowFadeCenterAndType c6       1
					//   _LightColor0                  c7       1
					//   _Color                        c8       1
					//   _MainTex_ST                   c9       1
					//   _BumpMap_ST                   c10      1
					//   _ExposureIBL                  c11      1
					//   _BlendWeightIBL               c12      1
					//   _ExposureIBL1                 c13      1
					//   _Cutoff                       c14      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c15, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c9, c9.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c8.w
					    mad_pp r1, r0.w, r1.w, -c14.x
					    mul_pp r0, r0, c8
					    texkill r1
					    mad r1.xy, v4, c10, c10.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c15.x, c15.y
					    dp2add_sat_pp r1.w, r1, r1, c15.z
					    add_pp r1.w, -r1.w, c15.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c4
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c13.w
					    add_pp r1.y, -r1.w, c11.w
					    mad_pp r1.y, c12.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c7
					    add r1.xyz, -c6, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c3, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c6.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c5.z, c5.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 43 instruction slots used (3 texture, 40 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       2
					//   _WorldSpaceCameraPos          c5       1
					//   _WorldSpaceLightPos0          c6       1
					//   _LightShadowData              c7       1
					//   unity_ShadowFadeCenterAndType c8       1
					//   _LightColor0                  c9       1
					//   _Color                        c10      1
					//   _MainTex_ST                   c11      1
					//   _BumpMap_ST                   c12      1
					//   _ExposureIBL                  c13      1
					//   _BlendWeightIBL               c14      1
					//   _ExposureIBL1                 c15      1
					//   _Cutoff                       c16      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c17, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c11, c11.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c10.w
					    mad_pp r1, r0.w, r1.w, -c16.x
					    mul_pp r0, r0, c10
					    texkill r1
					    mad r1.xy, v4, c12, c12.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c17.x, c17.y
					    dp2add_sat_pp r1.w, r1, r1, c17.z
					    add_pp r1.w, -r1.w, c17.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c6
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c15.w
					    add_pp r1.y, -r1.w, c13.w
					    mad_pp r1.y, c14.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c9
					    add r1.xyz, -c8, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c5, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c8.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c7.z, c7.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mad r1, v3.xyzx, c17.wwwz, c17.zzzw
					    dp4 r2.x, c3, r1
					    dp4 r2.y, c4, r1
					    texld r1, r2, s1
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp oC0.xyz, r0.w, r0
					
					// approximately 48 instruction slots used (4 texture, 44 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _BlendWeightIBL               c16      1
					//   _ExposureIBL1                 c17      1
					//   _Cutoff                       c18      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c19, 2, -1, 0, 1
					    def c20, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c18.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c20.x, r3.x
					    mov r1.w, c19.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c19.wwwz, c19.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c19.x, c19.y
					    dp2add_sat_pp r1.y, r2, r2, c19.z
					    add_pp r1.y, -r1.y, c19.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c17.w
					    add_pp r1.z, -r1.w, c15.w
					    mad_pp r1.z, c16.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 59 instruction slots used (4 texture, 55 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _BlendWeightIBL               c16      1
					//   _ExposureIBL1                 c17      1
					//   _Cutoff                       c18      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c19, 2, -1, 0, 1
					    def c20, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c18.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c20.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c20.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c20.yxyw
					    add r1.xyz, r1, c20.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c20.z, r2
					    mov r2.w, c19.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c20.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c19.wwwz, c19.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c19.x, c19.y
					    dp2add_sat_pp r1.y, r2, r2, c19.z
					    add_pp r1.y, -r1.y, c19.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c17.w
					    add_pp r1.z, -r1.w, c15.w
					    mad_pp r1.z, c16.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 70 instruction slots used (7 texture, 63 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _BlendWeightIBL               c16      1
					//   _ExposureIBL1                 c17      1
					//   _Cutoff                       c18      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c19, 2, -1, 0, 1
					    def c20, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c18.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c20.x, r3.x
					    mov r1.w, c19.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c19.wwwz, c19.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c19.x, c19.y
					    dp2add_sat_pp r1.y, r2, r2, c19.z
					    add_pp r1.y, -r1.y, c19.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c17.w
					    add_pp r1.z, -r1.w, c15.w
					    mad_pp r1.z, c16.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 61 instruction slots used (5 texture, 56 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _LightColor0                  c11      1
					//   _Color                        c12      1
					//   _MainTex_ST                   c13      1
					//   _BumpMap_ST                   c14      1
					//   _ExposureIBL                  c15      1
					//   _BlendWeightIBL               c16      1
					//   _ExposureIBL1                 c17      1
					//   _Cutoff                       c18      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c19, 2, -1, 0, 1
					    def c20, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c13, c13.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c12.w
					    mad_pp r1, r0.w, r1.w, -c18.x
					    mul_pp r0, r0, c12
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c20.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c20.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c20.yxyw
					    add r1.xyz, r1, c20.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c20.z, r2
					    mov r2.w, c19.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c20.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c19.wwwz, c19.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c14.xxyw, c14.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c19.x, c19.y
					    dp2add_sat_pp r1.y, r2, r2, c19.z
					    add_pp r1.y, -r1.y, c19.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c17.w
					    add_pp r1.z, -r1.w, c15.w
					    mad_pp r1.z, c16.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c11
					    mul_pp oC0.xyz, r1.x, r0
					
					// approximately 72 instruction slots used (8 texture, 64 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogParams      c4       1
					//   _LightColor0         c5       1
					//   _Color               c6       1
					//   _MainTex_ST          c7       1
					//   _BumpMap_ST          c8       1
					//   _ExposureIBL         c9       1
					//   _BlendWeightIBL      c10      1
					//   _ExposureIBL1        c11      1
					//   _Cutoff              c12      1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c13, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c7, c7.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c12.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v4, c8, c8.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c13.x, c13.y
					    dp2add_sat_pp r1.w, r1, r1, c13.z
					    add_pp r1.w, -r1.w, c13.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c11.w
					    add_pp r1.y, -r1.w, c9.w
					    mad_pp r1.y, c10.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c5
					    mad r1, v3.xyzx, c13.wwwz, c13.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld_pp r1, r0.w, s0
					    mul_pp r0.xyz, r0, r1.x
					    mul r0.w, c4.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 44 instruction slots used (3 texture, 41 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   unity_FogParams      c1       1
					//   _LightColor0         c2       1
					//   _Color               c3       1
					//   _MainTex_ST          c4       1
					//   _BumpMap_ST          c5       1
					//   _ExposureIBL         c6       1
					//   _BlendWeightIBL      c7       1
					//   _ExposureIBL1        c8       1
					//   _Cutoff              c9       1
					//   _MainTex             s0       1
					//   _BumpMap             s1       1
					//
					
					    ps_3_0
					    def c10, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4 v3.xy
					    dcl_texcoord6 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c4, c4.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c3.w
					    mad_pp r1, r0.w, r1.w, -c9.x
					    mul_pp r0, r0, c3
					    texkill r1
					    mad r1.xy, v3, c5, c5.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c10.x, c10.y
					    dp2add_sat_pp r1.w, r1, r1, c10.z
					    add_pp r1.w, -r1.w, c10.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c0
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c8.w
					    add_pp r1.y, -r1.w, c6.w
					    mad_pp r1.y, c7.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c2
					    mul r0.w, c1.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 36 instruction slots used (2 texture, 34 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceLightPos0 c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _Color               c7       1
					//   _MainTex_ST          c8       1
					//   _BumpMap_ST          c9       1
					//   _ExposureIBL         c10      1
					//   _BlendWeightIBL      c11      1
					//   _ExposureIBL1        c12      1
					//   _Cutoff              c13      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c14, 2, -1, 0, 1
					    def c15, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c8, c8.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c7.w
					    mad_pp r1, r0.w, r1.w, -c13.x
					    mul_pp r0, r0, c7
					    texkill r1
					    mad r1.xy, v4, c9, c9.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c14.x, c14.y
					    dp2add_sat_pp r1.w, r1, r1, c14.z
					    add_pp r1.w, -r1.w, c14.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c4, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c12.w
					    add_pp r1.y, -r1.w, c10.w
					    mad_pp r1.y, c11.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c6
					    mad r1, v3.xyzx, c14.wwwz, c14.zzzw
					    dp4 r0.w, c3, r1
					    rcp r0.w, r0.w
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    mad r1.xy, r2, r0.w, c15.x
					    dp3 r0.w, r2, r2
					    texld_pp r3, r0.w, s1
					    texld_pp r1, r1, s0
					    mul_pp r0.w, r3.x, r1.w
					    cmp_pp r0.w, -r2.z, c14.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c5.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 50 instruction slots used (4 texture, 46 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogParams      c4       1
					//   _LightColor0         c5       1
					//   _Color               c6       1
					//   _MainTex_ST          c7       1
					//   _BumpMap_ST          c8       1
					//   _ExposureIBL         c9       1
					//   _BlendWeightIBL      c10      1
					//   _ExposureIBL1        c11      1
					//   _Cutoff              c12      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _MainTex             s2       1
					//   _BumpMap             s3       1
					//
					
					    ps_3_0
					    def c13, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c7, c7.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c12.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v4, c8, c8.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c13.x, c13.y
					    dp2add_sat_pp r1.w, r1, r1, c13.z
					    add_pp r1.w, -r1.w, c13.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    add r2.xyz, c3, -v3
					    nrm_pp r3.xyz, r2
					    dp3_sat_pp r1.x, r1, r3
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c11.w
					    add_pp r1.y, -r1.w, c9.w
					    mad_pp r1.y, c10.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c5
					    mad r1, v3.xyzx, c13.wwwz, c13.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r0.w, r2, r2
					    texld r1, r2, s0
					    texld r2, r0.w, s1
					    mul_pp r0.w, r1.w, r2.x
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c4.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 46 instruction slots used (4 texture, 42 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceLightPos0 c2       1
					//   unity_FogParams      c3       1
					//   _LightColor0         c4       1
					//   _Color               c5       1
					//   _MainTex_ST          c6       1
					//   _BumpMap_ST          c7       1
					//   _ExposureIBL         c8       1
					//   _BlendWeightIBL      c9       1
					//   _ExposureIBL1        c10      1
					//   _Cutoff              c11      1
					//   _LightTexture0       s0       1
					//   _MainTex             s1       1
					//   _BumpMap             s2       1
					//
					
					    ps_3_0
					    def c12, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c6, c6.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c11.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v4, c7, c7.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r1.w, r1, r1, c12.z
					    add_pp r1.w, -r1.w, c12.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c2
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c10.w
					    add_pp r1.y, -r1.w, c8.w
					    mad_pp r1.y, c9.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c4
					    mad r1, v3.xyzx, c12.wwwz, c12.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s0
					    mul_pp r0.xyz, r0, r1.w
					    mul r0.w, c3.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 41 instruction slots used (3 texture, 38 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   unity_WorldToLight            c4       4
					//   unity_MatrixV                 c8       3
					//   _WorldSpaceCameraPos          c11      1
					//   _WorldSpaceLightPos0          c12      1
					//   _LightShadowData              c13      1
					//   unity_ShadowFadeCenterAndType c14      1
					//   unity_FogParams               c15      1
					//   _LightColor0                  c16      1
					//   _Color                        c17      1
					//   _MainTex_ST                   c18      1
					//   _BumpMap_ST                   c19      1
					//   _ExposureIBL                  c20      1
					//   _BlendWeightIBL               c21      1
					//   _ExposureIBL1                 c22      1
					//   _Cutoff                       c23      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c24, 2, -1, 0, 1
					    def c25, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c18, c18.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c17.w
					    mad_pp r1, r0.w, r1.w, -c23.x
					    mul_pp r0, r0, c17
					    texkill r1
					    add r1.xyz, -c14, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c11.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c10
					    lrp r2.x, c14.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c13.z, c13.w
					    mov r1.w, c24.w
					    mad r2, v3.xyzx, c24.wwwz, c24.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    texldp_pp r3, r3, s0
					    lrp_pp r4.x, r3.x, r1.w, c13.x
					    add_sat_pp r1.x, r1.x, r4.x
					    dp4 r1.y, c7, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c4, r2
					    dp4 r3.y, c5, r2
					    dp4 r3.z, c6, r2
					    mad r1.yz, r3.xxyw, r1.y, c25.x
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c24.z, r1.x
					    mad r1.yz, v4.xxyw, c19.xxyw, c19.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c24.x, c24.y
					    dp2add_sat_pp r1.y, r2, r2, c24.z
					    add_pp r1.y, -r1.y, c24.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c12.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c22.w
					    add_pp r1.z, -r1.w, c20.w
					    mad_pp r1.z, c21.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c16
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c15.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 67 instruction slots used (5 texture, 62 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0       4
					//   _ShadowOffsets                c4       4
					//   unity_WorldToLight            c8       4
					//   unity_MatrixV                 c12      3
					//   _WorldSpaceCameraPos          c15      1
					//   _WorldSpaceLightPos0          c16      1
					//   _LightShadowData              c17      1
					//   unity_ShadowFadeCenterAndType c18      1
					//   unity_FogParams               c19      1
					//   _LightColor0                  c20      1
					//   _Color                        c21      1
					//   _MainTex_ST                   c22      1
					//   _BumpMap_ST                   c23      1
					//   _ExposureIBL                  c24      1
					//   _BlendWeightIBL               c25      1
					//   _ExposureIBL1                 c26      1
					//   _Cutoff                       c27      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c28, 2, -1, 0, 1
					    def c29, 0.25, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c22, c22.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c21.w
					    mad_pp r1, r0.w, r1.w, -c27.x
					    mul_pp r0, r0, c21
					    texkill r1
					    add r1.xyz, -c18, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c15.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c14
					    lrp r2.x, c18.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c17.z, c17.w
					    mov r1.w, c28.w
					    mad r2, v3.xyzx, c28.wwwz, c28.zzzw
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    rcp r1.y, r3.w
					    mad r4, r3, r1.y, c4
					    texldp_pp r4, r4, s0
					    mad r5, r3, r1.y, c5
					    texldp_pp r5, r5, s0
					    mov_pp r4.y, r5.x
					    mad r5, r3, r1.y, c6
					    mad r3, r3, r1.y, c7
					    texldp_pp r3, r3, s0
					    mov_pp r4.w, r3.x
					    texldp_pp r3, r5, s0
					    mov_pp r4.z, r3.x
					    lrp_pp r3, r4, r1.w, c17.x
					    dp4_pp r1.y, r3, c29.x
					    add_sat_pp r1.x, r1.x, r1.y
					    dp4 r1.y, c11, r2
					    rcp r1.y, r1.y
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r1.yz, r3.xxyw, r1.y, c29.y
					    dp3 r1.w, r3, r3
					    texld_pp r2, r1.w, s2
					    texld_pp r4, r1.yzzw, s1
					    mul r1.y, r2.x, r4.w
					    mul_pp r1.x, r1.x, r1.y
					    cmp_pp r1.x, -r3.z, c28.z, r1.x
					    mad r1.yz, v4.xxyw, c23.xxyw, c23.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c28.x, c28.y
					    dp2add_sat_pp r1.y, r2, r2, c28.z
					    add_pp r1.y, -r1.y, c28.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c16.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c26.w
					    add_pp r1.z, -r1.w, c24.w
					    mad_pp r1.z, c25.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c20
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c19.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 79 instruction slots used (8 texture, 71 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _WorldSpaceCameraPos          c3       1
					//   _WorldSpaceLightPos0          c4       1
					//   _LightShadowData              c5       1
					//   unity_ShadowFadeCenterAndType c6       1
					//   unity_FogParams               c7       1
					//   _LightColor0                  c8       1
					//   _Color                        c9       1
					//   _MainTex_ST                   c10      1
					//   _BumpMap_ST                   c11      1
					//   _ExposureIBL                  c12      1
					//   _BlendWeightIBL               c13      1
					//   _ExposureIBL1                 c14      1
					//   _Cutoff                       c15      1
					//   _ShadowMapTexture             s0       1
					//   _MainTex                      s1       1
					//   _BumpMap                      s2       1
					//
					
					    ps_3_0
					    def c16, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v4, c10, c10.zwzw
					    texld_pp r0, r0, s1
					    mov r1.w, c9.w
					    mad_pp r1, r0.w, r1.w, -c15.x
					    mul_pp r0, r0, c9
					    texkill r1
					    mad r1.xy, v4, c11, c11.zwzw
					    texld_pp r1, r1, s2
					    mad_pp r1.xy, r1.wyzw, c16.x, c16.y
					    dp2add_sat_pp r1.w, r1, r1, c16.z
					    add_pp r1.w, -r1.w, c16.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c4
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c14.w
					    add_pp r1.y, -r1.w, c12.w
					    mad_pp r1.y, c13.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c8
					    add r1.xyz, -c6, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c3, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c6.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c5.z, c5.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c7.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 47 instruction slots used (3 texture, 44 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       2
					//   _WorldSpaceCameraPos          c5       1
					//   _WorldSpaceLightPos0          c6       1
					//   _LightShadowData              c7       1
					//   unity_ShadowFadeCenterAndType c8       1
					//   unity_FogParams               c9       1
					//   _LightColor0                  c10      1
					//   _Color                        c11      1
					//   _MainTex_ST                   c12      1
					//   _BumpMap_ST                   c13      1
					//   _ExposureIBL                  c14      1
					//   _BlendWeightIBL               c15      1
					//   _ExposureIBL1                 c16      1
					//   _Cutoff                       c17      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord5 v5
					    dcl_texcoord6 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c12, c12.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c11.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c11
					    texkill r1
					    mad r1.xy, v4, c13, c13.zwzw
					    texld_pp r1, r1, s3
					    mad_pp r1.xy, r1.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.w, r1, r1, c18.z
					    add_pp r1.w, -r1.w, c18.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v0, r2
					    dp3_pp r1.y, v1, r2
					    dp3_pp r1.z, v2, r2
					    nrm_pp r2.xyz, c6
					    dp3_sat_pp r1.x, r1, r2
					    add_pp r1.x, r1.x, r1.x
					    mov r1.w, c16.w
					    add_pp r1.y, -r1.w, c14.w
					    mad_pp r1.y, c15.x, r1.y, r1.w
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.x
					    mul_pp r0.xyz, r0, c10
					    add r1.xyz, -c8, v3
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r1.xyz, c5, -v3
					    dp3 r1.x, r1, c2
					    lrp r2.x, c8.w, r0.w, r1.x
					    mad_sat_pp r0.w, r2.x, c7.z, c7.w
					    texldp_pp r1, v5, s0
					    add_sat_pp r0.w, r0.w, r1.x
					    mad r1, v3.xyzx, c18.wwwz, c18.zzzw
					    dp4 r2.x, c3, r1
					    dp4 r2.y, c4, r1
					    texld r1, r2, s1
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul r0.w, c9.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 52 instruction slots used (4 texture, 48 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _BlendWeightIBL               c17      1
					//   _ExposureIBL1                 c18      1
					//   _Cutoff                       c19      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c20, 2, -1, 0, 1
					    def c21, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c19.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c21.x, r3.x
					    mov r1.w, c20.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c20.wwwz, c20.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c20.x, c20.y
					    dp2add_sat_pp r1.y, r2, r2, c20.z
					    add_pp r1.y, -r1.y, c20.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c18.w
					    add_pp r1.z, -r1.w, c16.w
					    mad_pp r1.z, c17.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 63 instruction slots used (4 texture, 59 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _BlendWeightIBL               c17      1
					//   _ExposureIBL1                 c18      1
					//   _Cutoff                       c19      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _MainTex                      s2       1
					//   _BumpMap                      s3       1
					//
					
					    ps_3_0
					    def c20, 2, -1, 0, 1
					    def c21, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s2
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c19.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c21.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c21.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c21.yxyw
					    add r1.xyz, r1, c21.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c21.z, r2
					    mov r2.w, c20.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c21.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c20.wwwz, c20.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r1.y, s1
					    mul_pp r1.x, r1.x, r2.x
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s3
					    mad_pp r2.xy, r2.wyzw, c20.x, c20.y
					    dp2add_sat_pp r1.y, r2, r2, c20.z
					    add_pp r1.y, -r1.y, c20.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c18.w
					    add_pp r1.z, -r1.w, c16.w
					    mad_pp r1.z, c17.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 74 instruction slots used (7 texture, 67 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _BlendWeightIBL               c17      1
					//   _ExposureIBL1                 c18      1
					//   _Cutoff                       c19      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c20, 2, -1, 0, 1
					    def c21, 0.970000029, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c19.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c10, v3
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.yzw, c6.xxyz, -v3.xxyz
					    dp3 r1.y, r1.yzww, c2
					    lrp r2.x, c10.w, r1.x, r1.y
					    mad_sat_pp r1.x, r2.x, c9.z, c9.w
					    add r1.yzw, -c8.xxyz, v3.xxyz
					    dp3 r2.x, r1.yzww, r1.yzww
					    texld r3, r1.yzww, s0
					    rsq r1.y, r2.x
					    rcp r1.y, r1.y
					    mul r1.y, r1.y, c8.w
					    mad r1.y, r1.y, -c21.x, r3.x
					    mov r1.w, c20.w
					    cmp_pp r1.y, r1.y, r1.w, c9.x
					    add_sat_pp r1.x, r1.x, r1.y
					    mad r2, v3.xyzx, c20.wwwz, c20.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c20.x, c20.y
					    dp2add_sat_pp r1.y, r2, r2, c20.z
					    add_pp r1.y, -r1.y, c20.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c18.w
					    add_pp r1.z, -r1.w, c16.w
					    mad_pp r1.z, c17.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 65 instruction slots used (5 texture, 60 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   unity_WorldToLight            c3       3
					//   _WorldSpaceCameraPos          c6       1
					//   _WorldSpaceLightPos0          c7       1
					//   _LightPositionRange           c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _Color                        c13      1
					//   _MainTex_ST                   c14      1
					//   _BumpMap_ST                   c15      1
					//   _ExposureIBL                  c16      1
					//   _BlendWeightIBL               c17      1
					//   _ExposureIBL1                 c18      1
					//   _Cutoff                       c19      1
					//   _ShadowMapTexture             s0       1
					//   _LightTexture0                s1       1
					//   _LightTextureB0               s2       1
					//   _MainTex                      s3       1
					//   _BumpMap                      s4       1
					//
					
					    ps_3_0
					    def c20, 2, -1, 0, 1
					    def c21, 0.0078125, -0.0078125, 0.970000029, 0.25
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xy
					    dcl_texcoord6 v5.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mad r0.xy, v4, c14, c14.zwzw
					    texld_pp r0, r0, s3
					    mov r1.w, c13.w
					    mad_pp r1, r0.w, r1.w, -c19.x
					    mul_pp r0, r0, c13
					    texkill r1
					    add r1.xyz, -c8, v3
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mul r1.w, r1.w, c8.w
					    add r2.xyz, r1, c21.x
					    texld r2, r2, s0
					    add r3.xyz, r1, c21.yyxw
					    texld r3, r3, s0
					    mov r2.y, r3.x
					    add r3.xyz, r1, c21.yxyw
					    add r1.xyz, r1, c21.xyyw
					    texld r4, r1, s0
					    mov r2.w, r4.x
					    texld r3, r3, s0
					    mov r2.z, r3.x
					    mad r1, r1.w, -c21.z, r2
					    mov r2.w, c20.w
					    cmp_pp r1, r1, r2.w, c9.x
					    dp4_pp r1.x, r1, c21.w
					    add r1.yzw, -c10.xxyz, v3.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r2.xyz, c6, -v3
					    dp3 r1.z, r2, c2
					    lrp r2.x, c10.w, r1.y, r1.z
					    mad_sat_pp r1.y, r2.x, c9.z, c9.w
					    add_sat_pp r1.x, r1.y, r1.x
					    mad r2, v3.xyzx, c20.wwwz, c20.zzzw
					    dp4 r3.x, c3, r2
					    dp4 r3.y, c4, r2
					    dp4 r3.z, c5, r2
					    dp3 r1.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r1.y, s2
					    mul r1.y, r2.w, r3.x
					    mul_pp r1.x, r1.x, r1.y
					    mad r1.yz, v4.xxyw, c15.xxyw, c15.xzww
					    texld_pp r2, r1.yzzw, s4
					    mad_pp r2.xy, r2.wyzw, c20.x, c20.y
					    dp2add_sat_pp r1.y, r2, r2, c20.z
					    add_pp r1.y, -r1.y, c20.w
					    rsq_pp r1.y, r1.y
					    rcp_pp r2.z, r1.y
					    nrm_pp r3.xyz, r2
					    dp3_pp r2.x, v0, r3
					    dp3_pp r2.y, v1, r3
					    dp3_pp r2.z, v2, r3
					    add r1.yzw, c7.xxyz, -v3.xxyz
					    nrm_pp r3.xyz, r1.yzww
					    dp3_sat_pp r1.y, r2, r3
					    add_pp r1.y, r1.y, r1.y
					    mov r1.w, c18.w
					    add_pp r1.z, -r1.w, c16.w
					    mad_pp r1.z, c17.x, r1.z, r1.w
					    mul_pp r0.xyz, r0, r1.z
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.xyz, r0, c12
					    mul_pp r0.xyz, r1.x, r0
					    mul r0.w, c11.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 76 instruction slots used (8 texture, 68 arithmetic)"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 152500
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o4, c12.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 37 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o4, c12.xxyy, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 37 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Color       c0       1
					//   _MainTex_ST  c1       1
					//   _BumpMap_ST  c2       1
					//   _Cutoff      c3       1
					//   _MainTex     s0       1
					//   _BumpMap     s1       1
					//
					
					    ps_3_0
					    def c4, 2, -1, 0, 1
					    def c5, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c1, c1.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c0.w
					    mad_pp r0, r0.w, r1.w, -c3.x
					    texkill r0
					    mad r0.xy, v3, c2, c2.zwzw
					    texld_pp r0, r0, s1
					    mad_pp r0.xy, r0.wyzw, c4.x, c4.y
					    dp2add_sat_pp r0.w, r0, r0, c4.z
					    add_pp r0.w, -r0.w, c4.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, v0, r1
					    dp3_pp r0.y, v1, r1
					    dp3_pp r0.z, v2, r1
					    mad_pp oC0.xyz, r0, c5.x, c5.x
					    mov_pp oC0.w, c4.z
					
					// approximately 21 instruction slots used (2 texture, 19 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Color       c0       1
					//   _MainTex_ST  c1       1
					//   _BumpMap_ST  c2       1
					//   _Cutoff      c3       1
					//   _MainTex     s0       1
					//   _BumpMap     s1       1
					//
					
					    ps_3_0
					    def c4, 2, -1, 0, 1
					    def c5, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c1, c1.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c0.w
					    mad_pp r0, r0.w, r1.w, -c3.x
					    texkill r0
					    mad r0.xy, v3, c2, c2.zwzw
					    texld_pp r0, r0, s1
					    mad_pp r0.xy, r0.wyzw, c4.x, c4.y
					    dp2add_sat_pp r0.w, r0, r0, c4.z
					    add_pp r0.w, -r0.w, c4.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, v0, r1
					    dp3_pp r0.y, v1, r1
					    dp3_pp r0.z, v2, r1
					    mad_pp oC0.xyz, r0, c5.x, c5.x
					    mov_pp oC0.w, c4.z
					
					// approximately 21 instruction slots used (2 texture, 19 arithmetic)"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 201649
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 56 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 56 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mov o8.x, r0.z
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 57 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mov o8.x, r0.z
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 57 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 56 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 56 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mov o8.x, r0.z
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 57 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHAr                 c12      1
					//   unity_SHAg                 c13      1
					//   unity_SHAb                 c14      1
					//   unity_SHBr                 c15      1
					//   unity_SHBg                 c16      1
					//   unity_SHBb                 c17      1
					//   unity_SHC                  c18      1
					//   unity_WorldTransformParams c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c20.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c11.x
					    mov r4, r0
					    mov o5.zw, r0
					    mov o8.x, r0.z
					    mul r2.w, r1.x, c20.z
					    add o5.xy, r2.z, r2.xwzw
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c20.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add o7.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c19.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c20.xxyy, v3.xyxx
					    mov o6, c20.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 57 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _Color            c3       1
					//   _MainTex_ST       c4       1
					//   _BumpMap_ST       c5       1
					//   _ExposureIBL      c6       1
					//   _UniformOcclusion c7       1
					//   _SH0              c8       1
					//   _SH1              c9       1
					//   _SH2              c10      1
					//   _SH3              c11      1
					//   _SH4              c12      1
					//   _SH5              c13      1
					//   _SH6              c14      1
					//   _SH7              c15      1
					//   _SH8              c16      1
					//   _Cutoff           c17      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c4, c4.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c3.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c3
					    texkill r1
					    mad r1.xy, v3, c5, c5.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.w, r1, r1, c18.z
					    add_pp r1.w, -r1.w, c18.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.xyz, r1.x, c2
					    dp3 r1.w, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.xyz, c1, r1.w, r1
					    mad r1.xyz, c0, r2.x, r1
					    nrm r2.xyz, r1
					    mov r1.xyz, c9
					    mad r1.xyz, r1, r2.y, c8
					    mad r1.xyz, c10, r2.z, r1
					    mad r1.xyz, c11, r2.x, r1
					    mul r3.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c12, r3.x, r1
					    mad r1.xyz, c13, r3.y, r1
					    mad r1.xyz, c15, r3.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c19.x, c19.y
					    mad r1.xyz, c14, r2.x, r1
					    mad r1.xyz, c16, r1.w, r1
					    mul_pp r0.xyz, r0, c6.w
					    mov_pp oC0.w, r0.w
					    mul_pp r1.xyz, r0, r1_abs
					    mov r2.x, c6.x
					    mul_pp r0.w, r2.x, c7.x
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    add_pp r2.xyz, -r3, v5
					    mad_pp oC0.xyz, r0, r2, r1
					
					// approximately 51 instruction slots used (3 texture, 48 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _Color            c3       1
					//   _MainTex_ST       c4       1
					//   _BumpMap_ST       c5       1
					//   _ExposureIBL      c6       1
					//   _UniformOcclusion c7       1
					//   _SH0              c8       1
					//   _SH1              c9       1
					//   _SH2              c10      1
					//   _SH3              c11      1
					//   _SH4              c12      1
					//   _SH5              c13      1
					//   _SH6              c14      1
					//   _SH7              c15      1
					//   _SH8              c16      1
					//   _Cutoff           c17      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c4, c4.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c3.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c3
					    texkill r1
					    mad r1.xy, v3, c5, c5.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.w, r1, r1, c18.z
					    add_pp r1.w, -r1.w, c18.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.xyz, r1.x, c2
					    dp3 r1.w, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.xyz, c1, r1.w, r1
					    mad r1.xyz, c0, r2.x, r1
					    nrm r2.xyz, r1
					    mov r1.xyz, c9
					    mad r1.xyz, r1, r2.y, c8
					    mad r1.xyz, c10, r2.z, r1
					    mad r1.xyz, c11, r2.x, r1
					    mul r3.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c12, r3.x, r1
					    mad r1.xyz, c13, r3.y, r1
					    mad r1.xyz, c15, r3.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c19.x, c19.y
					    mad r1.xyz, c14, r2.x, r1
					    mad r1.xyz, c16, r1.w, r1
					    mul_pp r0.xyz, r0, c6.w
					    mov_pp oC0.w, r0.w
					    mul_pp r1.xyz, r0, r1_abs
					    mov r2.x, c6.x
					    mul_pp r0.w, r2.x, c7.x
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    add_pp r2.xyz, r2, v5
					    mad_pp oC0.xyz, r0, r2, r1
					
					// approximately 48 instruction slots used (3 texture, 45 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   unity_FogColor    c3       1
					//   unity_FogParams   c4       1
					//   _Color            c5       1
					//   _MainTex_ST       c6       1
					//   _BumpMap_ST       c7       1
					//   _ExposureIBL      c8       1
					//   _UniformOcclusion c9       1
					//   _SH0              c10      1
					//   _SH1              c11      1
					//   _SH2              c12      1
					//   _SH3              c13      1
					//   _SH4              c14      1
					//   _SH5              c15      1
					//   _SH6              c16      1
					//   _SH7              c17      1
					//   _SH8              c18      1
					//   _Cutoff           c19      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c20, 2, -1, 0, 1
					    def c21, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c6, c6.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c19.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v3, c7, c7.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c20.x, c20.y
					    dp2add_sat_pp r1.w, r1, r1, c20.z
					    add_pp r1.w, -r1.w, c20.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.xyz, r1.x, c2
					    dp3 r1.w, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.xyz, c1, r1.w, r1
					    mad r1.xyz, c0, r2.x, r1
					    nrm r2.xyz, r1
					    mov r1.xyz, c11
					    mad r1.xyz, r1, r2.y, c10
					    mad r1.xyz, c12, r2.z, r1
					    mad r1.xyz, c13, r2.x, r1
					    mul r3.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c14, r3.x, r1
					    mad r1.xyz, c15, r3.y, r1
					    mad r1.xyz, c17, r3.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c21.x, c21.y
					    mad r1.xyz, c16, r2.x, r1
					    mad r1.xyz, c18, r1.w, r1
					    mul_pp r0.xyz, r0, c8.w
					    mov_pp oC0.w, r0.w
					    mul_pp r1.xyz, r0, r1_abs
					    mov r2.x, c8.x
					    mul_pp r0.w, r2.x, c9.x
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    add_pp r2.xyz, -r3, v5
					    mad_pp r0.xyz, r0, r2, r1
					    add r0.xyz, r0, -c3
					    mul r0.w, c4.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c3
					
					// approximately 56 instruction slots used (3 texture, 53 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   unity_FogColor    c3       1
					//   unity_FogParams   c4       1
					//   _Color            c5       1
					//   _MainTex_ST       c6       1
					//   _BumpMap_ST       c7       1
					//   _ExposureIBL      c8       1
					//   _UniformOcclusion c9       1
					//   _SH0              c10      1
					//   _SH1              c11      1
					//   _SH2              c12      1
					//   _SH3              c13      1
					//   _SH4              c14      1
					//   _SH5              c15      1
					//   _SH6              c16      1
					//   _SH7              c17      1
					//   _SH8              c18      1
					//   _Cutoff           c19      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c20, 2, -1, 0, 1
					    def c21, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c6, c6.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c5.w
					    mad_pp r1, r0.w, r1.w, -c19.x
					    mul_pp r0, r0, c5
					    texkill r1
					    mad r1.xy, v3, c7, c7.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c20.x, c20.y
					    dp2add_sat_pp r1.w, r1, r1, c20.z
					    add_pp r1.w, -r1.w, c20.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.xyz, r1.x, c2
					    dp3 r1.w, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.xyz, c1, r1.w, r1
					    mad r1.xyz, c0, r2.x, r1
					    nrm r2.xyz, r1
					    mov r1.xyz, c11
					    mad r1.xyz, r1, r2.y, c10
					    mad r1.xyz, c12, r2.z, r1
					    mad r1.xyz, c13, r2.x, r1
					    mul r3.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c14, r3.x, r1
					    mad r1.xyz, c15, r3.y, r1
					    mad r1.xyz, c17, r3.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c21.x, c21.y
					    mad r1.xyz, c16, r2.x, r1
					    mad r1.xyz, c18, r1.w, r1
					    mul_pp r0.xyz, r0, c8.w
					    mov_pp oC0.w, r0.w
					    mul_pp r1.xyz, r0, r1_abs
					    mov r2.x, c8.x
					    mul_pp r0.w, r2.x, c9.x
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    add_pp r2.xyz, r2, v5
					    mad_pp r0.xyz, r0, r2, r1
					    add r0.xyz, r0, -c3
					    mul r0.w, c4.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c3
					
					// approximately 53 instruction slots used (3 texture, 50 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _SkyMatrix1       c3       3
					//   _Color            c6       1
					//   _MainTex_ST       c7       1
					//   _BumpMap_ST       c8       1
					//   _ExposureIBL      c9       1
					//   _UniformOcclusion c10      1
					//   _SH0              c11      1
					//   _SH1              c12      1
					//   _SH2              c13      1
					//   _SH3              c14      1
					//   _SH4              c15      1
					//   _SH5              c16      1
					//   _SH6              c17      1
					//   _SH7              c18      1
					//   _SH8              c19      1
					//   _BlendWeightIBL   c20      1
					//   _ExposureIBL1     c21      1
					//   _SH01             c22      1
					//   _SH11             c23      1
					//   _SH21             c24      1
					//   _SH31             c25      1
					//   _SH41             c26      1
					//   _SH51             c27      1
					//   _SH61             c28      1
					//   _SH71             c29      1
					//   _SH81             c30      1
					//   _Cutoff           c31      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c32, 2, -1, 0, 1
					    def c33, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c7, c7.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c31.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v3, c8, c8.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c32.x, c32.y
					    dp2add_sat_pp r1.w, r1, r1, c32.z
					    add_pp r1.w, -r1.w, c32.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.yzw, r1.x, c2.xxyz
					    mul r3.xyz, r1.x, c5
					    dp3 r1.x, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.yzw, c1.xxyz, r1.x, r1
					    mad r2.yzw, c4.xxyz, r1.x, r3.xxyz
					    mad r2.yzw, c3.xxyz, r2.x, r2
					    mad r1.xyz, c0, r2.x, r1.yzww
					    nrm r3.xyz, r1
					    nrm r1.xyz, r2.yzww
					    mov r2.xyz, c12
					    mad r2.xyz, r2, r3.y, c11
					    mad r2.xyz, c13, r3.z, r2
					    mad r2.xyz, c14, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c15, r4.x, r2
					    mad r2.xyz, c16, r4.y, r2
					    mad r2.xyz, c18, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c33.x, c33.y
					    mad r2.xyz, c17, r2.w, r2
					    mad r2.xyz, c19, r1.w, r2
					    mov r3.xyz, c23
					    mad r3.xyz, r3, r1.y, c22
					    mad r3.xyz, c24, r1.z, r3
					    mad r3.xyz, c25, r1.x, r3
					    mul r4.xyz, r1.xzxw, r1.yyzw
					    mad r3.xyz, c26, r4.x, r3
					    mad r3.xyz, c27, r4.y, r3
					    mad r3.xyz, c29, r4.z, r3
					    mul r1.yz, r1, r1
					    mad r1.x, r1.x, r1.x, -r1.y
					    mad r1.y, r1.z, c33.x, c33.y
					    mad r1.yzw, c28.xxyz, r1.y, r3.xxyz
					    mad r1.xyz, c30, r1.x, r1.yzww
					    lrp_pp r3.xyz, c20.x, r2_abs, r1_abs
					    mov r1.xw, c21
					    add_pp r1.yz, -r1.xxww, c9.xxww
					    mad_pp r1.xy, c20.x, r1.yzzw, r1.xwzw
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.w, r1.x, c10.x
					    mul_pp r1.xyz, r0, r3
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    add_pp r2.xyz, -r3, v5
					    mad_pp oC0.xyz, r0, r2, r1
					
					// approximately 73 instruction slots used (3 texture, 70 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _SkyMatrix1       c3       3
					//   _Color            c6       1
					//   _MainTex_ST       c7       1
					//   _BumpMap_ST       c8       1
					//   _ExposureIBL      c9       1
					//   _UniformOcclusion c10      1
					//   _SH0              c11      1
					//   _SH1              c12      1
					//   _SH2              c13      1
					//   _SH3              c14      1
					//   _SH4              c15      1
					//   _SH5              c16      1
					//   _SH6              c17      1
					//   _SH7              c18      1
					//   _SH8              c19      1
					//   _BlendWeightIBL   c20      1
					//   _ExposureIBL1     c21      1
					//   _SH01             c22      1
					//   _SH11             c23      1
					//   _SH21             c24      1
					//   _SH31             c25      1
					//   _SH41             c26      1
					//   _SH51             c27      1
					//   _SH61             c28      1
					//   _SH71             c29      1
					//   _SH81             c30      1
					//   _Cutoff           c31      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c32, 2, -1, 0, 1
					    def c33, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c7, c7.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c31.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v3, c8, c8.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c32.x, c32.y
					    dp2add_sat_pp r1.w, r1, r1, c32.z
					    add_pp r1.w, -r1.w, c32.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.yzw, r1.x, c2.xxyz
					    mul r3.xyz, r1.x, c5
					    dp3 r1.x, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.yzw, c1.xxyz, r1.x, r1
					    mad r2.yzw, c4.xxyz, r1.x, r3.xxyz
					    mad r2.yzw, c3.xxyz, r2.x, r2
					    mad r1.xyz, c0, r2.x, r1.yzww
					    nrm r3.xyz, r1
					    nrm r1.xyz, r2.yzww
					    mov r2.xyz, c12
					    mad r2.xyz, r2, r3.y, c11
					    mad r2.xyz, c13, r3.z, r2
					    mad r2.xyz, c14, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c15, r4.x, r2
					    mad r2.xyz, c16, r4.y, r2
					    mad r2.xyz, c18, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c33.x, c33.y
					    mad r2.xyz, c17, r2.w, r2
					    mad r2.xyz, c19, r1.w, r2
					    mov r3.xyz, c23
					    mad r3.xyz, r3, r1.y, c22
					    mad r3.xyz, c24, r1.z, r3
					    mad r3.xyz, c25, r1.x, r3
					    mul r4.xyz, r1.xzxw, r1.yyzw
					    mad r3.xyz, c26, r4.x, r3
					    mad r3.xyz, c27, r4.y, r3
					    mad r3.xyz, c29, r4.z, r3
					    mul r1.yz, r1, r1
					    mad r1.x, r1.x, r1.x, -r1.y
					    mad r1.y, r1.z, c33.x, c33.y
					    mad r1.yzw, c28.xxyz, r1.y, r3.xxyz
					    mad r1.xyz, c30, r1.x, r1.yzww
					    lrp_pp r3.xyz, c20.x, r2_abs, r1_abs
					    mov r1.xw, c21
					    add_pp r1.yz, -r1.xxww, c9.xxww
					    mad_pp r1.xy, c20.x, r1.yzzw, r1.xwzw
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.w, r1.x, c10.x
					    mul_pp r1.xyz, r0, r3
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    add_pp r2.xyz, r2, v5
					    mad_pp oC0.xyz, r0, r2, r1
					
					// approximately 70 instruction slots used (3 texture, 67 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _SkyMatrix1       c3       3
					//   unity_FogColor    c6       1
					//   unity_FogParams   c7       1
					//   _Color            c8       1
					//   _MainTex_ST       c9       1
					//   _BumpMap_ST       c10      1
					//   _ExposureIBL      c11      1
					//   _UniformOcclusion c12      1
					//   _SH0              c13      1
					//   _SH1              c14      1
					//   _SH2              c15      1
					//   _SH3              c16      1
					//   _SH4              c17      1
					//   _SH5              c18      1
					//   _SH6              c19      1
					//   _SH7              c20      1
					//   _SH8              c21      1
					//   _BlendWeightIBL   c22      1
					//   _ExposureIBL1     c23      1
					//   _SH01             c24      1
					//   _SH11             c25      1
					//   _SH21             c26      1
					//   _SH31             c27      1
					//   _SH41             c28      1
					//   _SH51             c29      1
					//   _SH61             c30      1
					//   _SH71             c31      1
					//   _SH81             c32      1
					//   _Cutoff           c33      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c34, 2, -1, 0, 1
					    def c35, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c9, c9.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c8.w
					    mad_pp r1, r0.w, r1.w, -c33.x
					    mul_pp r0, r0, c8
					    texkill r1
					    mad r1.xy, v3, c10, c10.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c34.x, c34.y
					    dp2add_sat_pp r1.w, r1, r1, c34.z
					    add_pp r1.w, -r1.w, c34.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.yzw, r1.x, c2.xxyz
					    mul r3.xyz, r1.x, c5
					    dp3 r1.x, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.yzw, c1.xxyz, r1.x, r1
					    mad r2.yzw, c4.xxyz, r1.x, r3.xxyz
					    mad r2.yzw, c3.xxyz, r2.x, r2
					    mad r1.xyz, c0, r2.x, r1.yzww
					    nrm r3.xyz, r1
					    nrm r1.xyz, r2.yzww
					    mov r2.xyz, c14
					    mad r2.xyz, r2, r3.y, c13
					    mad r2.xyz, c15, r3.z, r2
					    mad r2.xyz, c16, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c17, r4.x, r2
					    mad r2.xyz, c18, r4.y, r2
					    mad r2.xyz, c20, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c35.x, c35.y
					    mad r2.xyz, c19, r2.w, r2
					    mad r2.xyz, c21, r1.w, r2
					    mov r3.xyz, c25
					    mad r3.xyz, r3, r1.y, c24
					    mad r3.xyz, c26, r1.z, r3
					    mad r3.xyz, c27, r1.x, r3
					    mul r4.xyz, r1.xzxw, r1.yyzw
					    mad r3.xyz, c28, r4.x, r3
					    mad r3.xyz, c29, r4.y, r3
					    mad r3.xyz, c31, r4.z, r3
					    mul r1.yz, r1, r1
					    mad r1.x, r1.x, r1.x, -r1.y
					    mad r1.y, r1.z, c35.x, c35.y
					    mad r1.yzw, c30.xxyz, r1.y, r3.xxyz
					    mad r1.xyz, c32, r1.x, r1.yzww
					    lrp_pp r3.xyz, c22.x, r2_abs, r1_abs
					    mov r1.xw, c23
					    add_pp r1.yz, -r1.xxww, c11.xxww
					    mad_pp r1.xy, c22.x, r1.yzzw, r1.xwzw
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.w, r1.x, c12.x
					    mul_pp r1.xyz, r0, r3
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    add_pp r2.xyz, -r3, v5
					    mad_pp r0.xyz, r0, r2, r1
					    add r0.xyz, r0, -c6
					    mul r0.w, c7.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c6
					
					// approximately 78 instruction slots used (3 texture, 75 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _SkyMatrix1       c3       3
					//   unity_FogColor    c6       1
					//   unity_FogParams   c7       1
					//   _Color            c8       1
					//   _MainTex_ST       c9       1
					//   _BumpMap_ST       c10      1
					//   _ExposureIBL      c11      1
					//   _UniformOcclusion c12      1
					//   _SH0              c13      1
					//   _SH1              c14      1
					//   _SH2              c15      1
					//   _SH3              c16      1
					//   _SH4              c17      1
					//   _SH5              c18      1
					//   _SH6              c19      1
					//   _SH7              c20      1
					//   _SH8              c21      1
					//   _BlendWeightIBL   c22      1
					//   _ExposureIBL1     c23      1
					//   _SH01             c24      1
					//   _SH11             c25      1
					//   _SH21             c26      1
					//   _SH31             c27      1
					//   _SH41             c28      1
					//   _SH51             c29      1
					//   _SH61             c30      1
					//   _SH71             c31      1
					//   _SH81             c32      1
					//   _Cutoff           c33      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//   _LightBuffer      s2       1
					//
					
					    ps_3_0
					    def c34, 2, -1, 0, 1
					    def c35, 3, -1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v3, c9, c9.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c8.w
					    mad_pp r1, r0.w, r1.w, -c33.x
					    mul_pp r0, r0, c8
					    texkill r1
					    mad r1.xy, v3, c10, c10.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c34.x, c34.y
					    dp2add_sat_pp r1.w, r1, r1, c34.z
					    add_pp r1.w, -r1.w, c34.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm r2.xyz, r1
					    dp3 r1.x, v2, r2
					    mul r1.yzw, r1.x, c2.xxyz
					    mul r3.xyz, r1.x, c5
					    dp3 r1.x, v1, r2
					    dp3 r2.x, v0, r2
					    mad r1.yzw, c1.xxyz, r1.x, r1
					    mad r2.yzw, c4.xxyz, r1.x, r3.xxyz
					    mad r2.yzw, c3.xxyz, r2.x, r2
					    mad r1.xyz, c0, r2.x, r1.yzww
					    nrm r3.xyz, r1
					    nrm r1.xyz, r2.yzww
					    mov r2.xyz, c14
					    mad r2.xyz, r2, r3.y, c13
					    mad r2.xyz, c15, r3.z, r2
					    mad r2.xyz, c16, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c17, r4.x, r2
					    mad r2.xyz, c18, r4.y, r2
					    mad r2.xyz, c20, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c35.x, c35.y
					    mad r2.xyz, c19, r2.w, r2
					    mad r2.xyz, c21, r1.w, r2
					    mov r3.xyz, c25
					    mad r3.xyz, r3, r1.y, c24
					    mad r3.xyz, c26, r1.z, r3
					    mad r3.xyz, c27, r1.x, r3
					    mul r4.xyz, r1.xzxw, r1.yyzw
					    mad r3.xyz, c28, r4.x, r3
					    mad r3.xyz, c29, r4.y, r3
					    mad r3.xyz, c31, r4.z, r3
					    mul r1.yz, r1, r1
					    mad r1.x, r1.x, r1.x, -r1.y
					    mad r1.y, r1.z, c35.x, c35.y
					    mad r1.yzw, c30.xxyz, r1.y, r3.xxyz
					    mad r1.xyz, c32, r1.x, r1.yzww
					    lrp_pp r3.xyz, c22.x, r2_abs, r1_abs
					    mov r1.xw, c23
					    add_pp r1.yz, -r1.xxww, c11.xxww
					    mad_pp r1.xy, c22.x, r1.yzzw, r1.xwzw
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0.w, r0.w
					    mul_pp r0.w, r1.x, c12.x
					    mul_pp r1.xyz, r0, r3
					    mul_pp r1.xyz, r0.w, r1
					    texldp_pp r2, v4, s2
					    add_pp r2.xyz, r2, v5
					    mad_pp r0.xyz, r0, r2, r1
					    add r0.xyz, r0, -c6
					    mul r0.w, c7.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c6
					
					// approximately 75 instruction slots used (3 texture, 72 arithmetic)"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DEFERRED" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 320982
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5
					    dcl_texcoord6 o6.xyz
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.z, c6, r1
					    dp4 r4.w, c7, r1
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o6.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o5, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 50 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5
					    dcl_texcoord6 o6.xyz
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.z, c6, r1
					    dp4 r4.w, c7, r1
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o6.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o5, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 50 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5
					    dcl_texcoord6 o6.xyz
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.z, c6, r1
					    dp4 r4.w, c7, r1
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o6.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o5, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 50 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHAr                 c11      1
					//   unity_SHAg                 c12      1
					//   unity_SHAb                 c13      1
					//   unity_SHBr                 c14      1
					//   unity_SHBg                 c15      1
					//   unity_SHBb                 c16      1
					//   unity_SHC                  c17      1
					//   unity_WorldTransformParams c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5
					    dcl_texcoord6 o6.xyz
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.z, c6, r1
					    dp4 r4.w, c7, r1
					    mul r0.xyz, c9, v2.y
					    mad r0.xyz, v2.x, c8, r0
					    mad r0.xyz, v2.z, c10, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c19.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add o6.xyz, r0, r2
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r2.xyz, r0, r1.zxyw
					    mad r2.xyz, r1.yzxw, r0.yzxw, -r2
					    mul r0.z, c18.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.x
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.y
					    mov o3.z, r1.z
					    mul o4, c19.xxyy, v3.xyxx
					    mov o5, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 50 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _Color            c3       1
					//   _MainTex_ST       c4       1
					//   _BumpMap_ST       c5       1
					//   _ExposureIBL      c6       1
					//   _UniformOcclusion c7       1
					//   _SH0              c8       1
					//   _SH1              c9       1
					//   _SH2              c10      1
					//   _SH3              c11      1
					//   _SH4              c12      1
					//   _SH5              c13      1
					//   _SH6              c14      1
					//   _SH7              c15      1
					//   _SH8              c16      1
					//   _Cutoff           c17      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 3, -1, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord6 v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c4, c4.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c3.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c3
					    texkill r1
					    mad r1.xy, v3, c5, c5.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.w, r1, r1, c18.z
					    add_pp r1.w, -r1.w, c18.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.x, v0, r2
					    dp3 r1.y, v1, r2
					    dp3 r1.z, v2, r2
					    mad_pp oC2.xyz, r1, c19.z, c19.z
					    mul r2.xyz, r1.z, c2
					    mad r1.yzw, c1.xxyz, r1.y, r2.xxyz
					    mad r1.xyz, c0, r1.x, r1.yzww
					    nrm r2.xyz, r1
					    mov r1.xyz, c9
					    mad r1.xyz, r1, r2.y, c8
					    mad r1.xyz, c10, r2.z, r1
					    mad r1.xyz, c11, r2.x, r1
					    mul r3.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c12, r3.x, r1
					    mad r1.xyz, c13, r3.y, r1
					    mad r1.xyz, c15, r3.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c19.x, c19.y
					    mad r1.xyz, c14, r2.x, r1
					    mad r1.xyz, c16, r1.w, r1
					    mul_pp r0.xyz, r0, c6.w
					    mov_pp oC0, r0
					    mul_pp r1.xyz, r0, r1_abs
					    mov r2.x, c6.x
					    mul_pp r0.w, r2.x, c7.x
					    mul_pp r2.xyz, r0, v4
					    mad_pp r0.xyz, r1, r0.w, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1, c18.zzzw
					    mov_pp oC2.w, c18.w
					    mov_pp oC3.w, c18.w
					
					// approximately 53 instruction slots used (2 texture, 51 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _Color            c3       1
					//   _MainTex_ST       c4       1
					//   _BumpMap_ST       c5       1
					//   _ExposureIBL      c6       1
					//   _UniformOcclusion c7       1
					//   _SH0              c8       1
					//   _SH1              c9       1
					//   _SH2              c10      1
					//   _SH3              c11      1
					//   _SH4              c12      1
					//   _SH5              c13      1
					//   _SH6              c14      1
					//   _SH7              c15      1
					//   _SH8              c16      1
					//   _Cutoff           c17      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//
					
					    ps_3_0
					    def c18, 2, -1, 0, 1
					    def c19, 3, -1, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord6 v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c4, c4.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c3.w
					    mad_pp r1, r0.w, r1.w, -c17.x
					    mul_pp r0, r0, c3
					    texkill r1
					    mad r1.xy, v3, c5, c5.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c18.x, c18.y
					    dp2add_sat_pp r1.w, r1, r1, c18.z
					    add_pp r1.w, -r1.w, c18.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.x, v0, r2
					    dp3 r1.y, v1, r2
					    dp3 r1.z, v2, r2
					    mad_pp oC2.xyz, r1, c19.z, c19.z
					    mul r2.xyz, r1.z, c2
					    mad r1.yzw, c1.xxyz, r1.y, r2.xxyz
					    mad r1.xyz, c0, r1.x, r1.yzww
					    nrm r2.xyz, r1
					    mov r1.xyz, c9
					    mad r1.xyz, r1, r2.y, c8
					    mad r1.xyz, c10, r2.z, r1
					    mad r1.xyz, c11, r2.x, r1
					    mul r3.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c12, r3.x, r1
					    mad r1.xyz, c13, r3.y, r1
					    mad r1.xyz, c15, r3.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c19.x, c19.y
					    mad r1.xyz, c14, r2.x, r1
					    mad r1.xyz, c16, r1.w, r1
					    mul_pp r0.xyz, r0, c6.w
					    mov_pp oC0, r0
					    mul_pp r1.xyz, r0, r1_abs
					    mov r2.x, c6.x
					    mul_pp r0.w, r2.x, c7.x
					    mul_pp r2.xyz, r0, v4
					    mad_pp oC3.xyz, r1, r0.w, r2
					    mov_pp oC1, c18.zzzw
					    mov_pp oC2.w, c18.w
					    mov_pp oC3.w, c18.w
					
					// approximately 50 instruction slots used (2 texture, 48 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _SkyMatrix1       c3       3
					//   _Color            c6       1
					//   _MainTex_ST       c7       1
					//   _BumpMap_ST       c8       1
					//   _ExposureIBL      c9       1
					//   _UniformOcclusion c10      1
					//   _SH0              c11      1
					//   _SH1              c12      1
					//   _SH2              c13      1
					//   _SH3              c14      1
					//   _SH4              c15      1
					//   _SH5              c16      1
					//   _SH6              c17      1
					//   _SH7              c18      1
					//   _SH8              c19      1
					//   _BlendWeightIBL   c20      1
					//   _ExposureIBL1     c21      1
					//   _SH01             c22      1
					//   _SH11             c23      1
					//   _SH21             c24      1
					//   _SH31             c25      1
					//   _SH41             c26      1
					//   _SH51             c27      1
					//   _SH61             c28      1
					//   _SH71             c29      1
					//   _SH81             c30      1
					//   _Cutoff           c31      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//
					
					    ps_3_0
					    def c32, 2, -1, 0, 1
					    def c33, 3, -1, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord6 v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c7, c7.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c31.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v3, c8, c8.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c32.x, c32.y
					    dp2add_sat_pp r1.w, r1, r1, c32.z
					    add_pp r1.w, -r1.w, c32.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.x, v0, r2
					    dp3 r1.y, v1, r2
					    dp3 r1.z, v2, r2
					    mad_pp oC2.xyz, r1, c33.z, c33.z
					    mul r2.xyz, r1.z, c2
					    mul r3.xyz, r1.z, c5
					    mad r3.xyz, c4, r1.y, r3
					    mad r1.yzw, c1.xxyz, r1.y, r2.xxyz
					    mad r1.yzw, c0.xxyz, r1.x, r1
					    mad r2.xyz, c3, r1.x, r3
					    nrm r3.xyz, r2
					    nrm r2.xyz, r1.yzww
					    mov r1.xyz, c12
					    mad r1.xyz, r1, r2.y, c11
					    mad r1.xyz, c13, r2.z, r1
					    mad r1.xyz, c14, r2.x, r1
					    mul r4.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c15, r4.x, r1
					    mad r1.xyz, c16, r4.y, r1
					    mad r1.xyz, c18, r4.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c33.x, c33.y
					    mad r1.xyz, c17, r2.x, r1
					    mad r1.xyz, c19, r1.w, r1
					    mov r2.xyz, c23
					    mad r2.xyz, r2, r3.y, c22
					    mad r2.xyz, c24, r3.z, r2
					    mad r2.xyz, c25, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c26, r4.x, r2
					    mad r2.xyz, c27, r4.y, r2
					    mad r2.xyz, c29, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c33.x, c33.y
					    mad r2.xyz, c28, r2.w, r2
					    mad r2.xyz, c30, r1.w, r2
					    lrp_pp r3.xyz, c20.x, r1_abs, r2_abs
					    mov r1.xw, c21
					    add_pp r1.yz, -r1.xxww, c9.xxww
					    mad_pp r1.xy, c20.x, r1.yzzw, r1.xwzw
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0, r0
					    mul_pp r0.w, r1.x, c10.x
					    mul_pp r1.xyz, r0, r3
					    mul_pp r2.xyz, r0, v4
					    mad_pp r0.xyz, r1, r0.w, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC1, c32.zzzw
					    mov_pp oC2.w, c32.w
					    mov_pp oC3.w, c32.w
					
					// approximately 75 instruction slots used (2 texture, 73 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _SkyMatrix        c0       3
					//   _SkyMatrix1       c3       3
					//   _Color            c6       1
					//   _MainTex_ST       c7       1
					//   _BumpMap_ST       c8       1
					//   _ExposureIBL      c9       1
					//   _UniformOcclusion c10      1
					//   _SH0              c11      1
					//   _SH1              c12      1
					//   _SH2              c13      1
					//   _SH3              c14      1
					//   _SH4              c15      1
					//   _SH5              c16      1
					//   _SH6              c17      1
					//   _SH7              c18      1
					//   _SH8              c19      1
					//   _BlendWeightIBL   c20      1
					//   _ExposureIBL1     c21      1
					//   _SH01             c22      1
					//   _SH11             c23      1
					//   _SH21             c24      1
					//   _SH31             c25      1
					//   _SH41             c26      1
					//   _SH51             c27      1
					//   _SH61             c28      1
					//   _SH71             c29      1
					//   _SH81             c30      1
					//   _Cutoff           c31      1
					//   _MainTex          s0       1
					//   _BumpMap          s1       1
					//
					
					    ps_3_0
					    def c32, 2, -1, 0, 1
					    def c33, 3, -1, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord6 v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c7, c7.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c31.x
					    mul_pp r0, r0, c6
					    texkill r1
					    mad r1.xy, v3, c8, c8.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c32.x, c32.y
					    dp2add_sat_pp r1.w, r1, r1, c32.z
					    add_pp r1.w, -r1.w, c32.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.z, r1.w
					    nrm_pp r2.xyz, r1
					    dp3 r1.x, v0, r2
					    dp3 r1.y, v1, r2
					    dp3 r1.z, v2, r2
					    mad_pp oC2.xyz, r1, c33.z, c33.z
					    mul r2.xyz, r1.z, c2
					    mul r3.xyz, r1.z, c5
					    mad r3.xyz, c4, r1.y, r3
					    mad r1.yzw, c1.xxyz, r1.y, r2.xxyz
					    mad r1.yzw, c0.xxyz, r1.x, r1
					    mad r2.xyz, c3, r1.x, r3
					    nrm r3.xyz, r2
					    nrm r2.xyz, r1.yzww
					    mov r1.xyz, c12
					    mad r1.xyz, r1, r2.y, c11
					    mad r1.xyz, c13, r2.z, r1
					    mad r1.xyz, c14, r2.x, r1
					    mul r4.xyz, r2.xzxw, r2.yyzw
					    mad r1.xyz, c15, r4.x, r1
					    mad r1.xyz, c16, r4.y, r1
					    mad r1.xyz, c18, r4.z, r1
					    mul r2.yz, r2, r2
					    mad r1.w, r2.x, r2.x, -r2.y
					    mad r2.x, r2.z, c33.x, c33.y
					    mad r1.xyz, c17, r2.x, r1
					    mad r1.xyz, c19, r1.w, r1
					    mov r2.xyz, c23
					    mad r2.xyz, r2, r3.y, c22
					    mad r2.xyz, c24, r3.z, r2
					    mad r2.xyz, c25, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c26, r4.x, r2
					    mad r2.xyz, c27, r4.y, r2
					    mad r2.xyz, c29, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r1.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c33.x, c33.y
					    mad r2.xyz, c28, r2.w, r2
					    mad r2.xyz, c30, r1.w, r2
					    lrp_pp r3.xyz, c20.x, r1_abs, r2_abs
					    mov r1.xw, c21
					    add_pp r1.yz, -r1.xxww, c9.xxww
					    mad_pp r1.xy, c20.x, r1.yzzw, r1.xwzw
					    mul_pp r0.xyz, r0, r1.y
					    mov_pp oC0, r0
					    mul_pp r0.w, r1.x, c10.x
					    mul_pp r1.xyz, r0, r3
					    mul_pp r2.xyz, r0, v4
					    mad_pp oC3.xyz, r1, r0.w, r2
					    mov_pp oC1, c32.zzzw
					    mov_pp oC2.w, c32.w
					    mov_pp oC3.w, c32.w
					
					// approximately 72 instruction slots used (2 texture, 70 arithmetic)"
				}
			}
		}
		Pass {
			Name "META"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 356948
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_MatrixVP;
					//   bool4 unity_MetaVertexControl;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   unity_LightmapST           c12      1
					//   unity_DynamicLightmapST    c13      1
					//   unity_MetaVertexControl    c14      1
					//
					
					    vs_3_0
					    def c15, 0, 9.99999975e-005, 1, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_texcoord2 v5
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    slt r0.x, c15.x, v0.z
					    mul r0.z, r0.x, c15.y
					    mad r0.xy, v4, c12, c12.zwzw
					    lrp r1.xyz, c14.x, r0, v0
					    slt r0.x, c15.x, r1.z
					    mul r0.z, r0.x, c15.y
					    mad r0.xy, v5, c13, c13.zwzw
					    lrp r2.xyz, c14.y, r0, r1
					    mov r2.w, c15.z
					    dp4 r0.x, c0, r2
					    dp4 r0.y, c1, r2
					    dp4 r0.z, c2, r2
					    dp4 r0.w, c3, r2
					    dp4 r3.x, c4, r0
					    dp4 r3.y, c5, r0
					    dp4 r3.z, c6, r0
					    dp4 r3.w, c7, r0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o4, c15.zzxx, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 45 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_MatrixVP;
					//   bool4 unity_MetaVertexControl;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   unity_LightmapST           c12      1
					//   unity_DynamicLightmapST    c13      1
					//   unity_MetaVertexControl    c14      1
					//
					
					    vs_3_0
					    def c15, 0, 9.99999975e-005, 1, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_texcoord2 v5
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    slt r0.x, c15.x, v0.z
					    mul r0.z, r0.x, c15.y
					    mad r0.xy, v4, c12, c12.zwzw
					    lrp r1.xyz, c14.x, r0, v0
					    slt r0.x, c15.x, r1.z
					    mul r0.z, r0.x, c15.y
					    mad r0.xy, v5, c13, c13.zwzw
					    lrp r2.xyz, c14.y, r0, r1
					    mov r2.w, c15.z
					    dp4 r0.x, c0, r2
					    dp4 r0.y, c1, r2
					    dp4 r0.z, c2, r2
					    dp4 r0.w, c3, r2
					    dp4 r3.x, c4, r0
					    dp4 r3.y, c5, r0
					    dp4 r3.z, c6, r0
					    dp4 r3.w, c7, r0
					    dp3 r0.z, c0, v1
					    dp3 r0.x, c1, v1
					    dp3 r0.y, c2, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o1.x, r0.z
					    mul r1.xyz, c9.zxyw, v2.y
					    mad r1.xyz, v2.x, c8.zxyw, r1
					    mad r1.xyz, v2.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c11.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o1.y, r2.x
					    mov o1.z, r1.y
					    mov o2.x, r0.x
					    mov o3.x, r0.y
					    mov o2.y, r2.y
					    mov o3.y, r2.z
					    mov o2.z, r1.z
					    mov o3.z, r1.x
					    mul o4, c15.zzxx, v3.xyxx
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 45 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH1;
					//   float3 _SH2;
					//   float3 _SH3;
					//   float3 _SH4;
					//   float3 _SH5;
					//   float3 _SH6;
					//   float3 _SH7;
					//   float3 _SH8;
					//   row_major float4x4 _SkyMatrix;
					//   float2 _UniformOcclusion;
					//   float unity_MaxOutputValue;
					//   bool4 unity_MetaFragmentControl;
					//   float unity_OneOverOutputBoost;
					//   float unity_UseLinearSpace;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _SkyMatrix                c0       3
					//   _Color                    c3       1
					//   _MainTex_ST               c4       1
					//   _BumpMap_ST               c5       1
					//   _ExposureIBL              c6       1
					//   _UniformOcclusion         c7       1
					//   _SH0                      c8       1
					//   _SH1                      c9       1
					//   _SH2                      c10      1
					//   _SH3                      c11      1
					//   _SH4                      c12      1
					//   _SH5                      c13      1
					//   _SH6                      c14      1
					//   _SH7                      c15      1
					//   _SH8                      c16      1
					//   unity_MetaFragmentControl c17      1
					//   unity_OneOverOutputBoost  c18      1
					//   unity_MaxOutputValue      c19      1
					//   unity_UseLinearSpace      c20      1
					//   _Cutoff                   c21      1
					//   _MainTex                  s0       1
					//   _BumpMap                  s1       1
					//
					
					    ps_3_0
					    def c22, 2, -1, 0, 1
					    def c23, 3, -1, 0.305306017, 0.682171106
					    def c24, 0.0125228781, 0.010309278, 0.0199999996, 255
					    def c25, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c4, c4.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c3.w
					    mad_pp r1, r0.w, r1.w, -c21.x
					    mul_pp r0.xyz, r0, c3
					    mul_pp r0.xyz, r0, c6.w
					    texkill r1
					    mov_sat r0.w, c18.x
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r1.xyz, r0.w, r1
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    min_pp r1.xyz, c19.x, r2
					    mov r2.z, c22.z
					    cmp_pp r1.xyz, -c17.x, r2.z, r1
					    mad r2.xy, v3, c5, c5.zwzw
					    texld_pp r2, r2, s1
					    mad_pp r2.xy, r2.wyzw, c22.x, c22.y
					    dp2add_sat_pp r0.w, r2, r2, c22.z
					    add_pp r0.w, -r0.w, c22.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r2.z, r0.w
					    nrm r3.xyz, r2
					    dp3 r0.w, v2, r3
					    mul r2.xyz, r0.w, c2
					    dp3 r0.w, v1, r3
					    dp3 r2.w, v0, r3
					    mad r2.xyz, c1, r0.w, r2
					    mad r2.xyz, c0, r2.w, r2
					    nrm r3.xyz, r2
					    mov r2.xyz, c9
					    mad r2.xyz, r2, r3.y, c8
					    mad r2.xyz, c10, r3.z, r2
					    mad r2.xyz, c11, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c12, r4.x, r2
					    mad r2.xyz, c13, r4.y, r2
					    mad r2.xyz, c15, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r0.w, r3.x, r3.x, -r3.y
					    mad r2.w, r3.z, c23.x, c23.y
					    mad r2.xyz, c14, r2.w, r2
					    mad r2.xyz, c16, r0.w, r2
					    mul_pp r0.xyz, r0, r2_abs
					    mov r2.x, c6.x
					    mul_pp r0.w, r2.x, c7.x
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r2.xyz, r0, c23.z, c23.w
					    mad_pp r2.xyz, r0, r2, c24.x
					    mul_pp r2.xyz, r0, r2
					    abs r0.w, c20.x
					    cmp_pp r0.xyz, -r0.w, r2, r0
					    mul r0.xyz, r0, c24.y
					    max r2.x, r0.x, r0.y
					    max r2.y, r0.z, c24.z
					    max r0.w, r2.x, r2.y
					    mul r0.w, r0.w, c24.w
					    frc r2.x, -r0.w
					    add r0.w, r0.w, r2.x
					    mul_pp r2.w, r0.w, c25.x
					    rcp r0.w, r2.w
					    mul_pp r2.xyz, r0.w, r0
					    mov r1.w, c17.x
					    cmp_pp oC0, -c17.y, r1, r2
					
					// approximately 72 instruction slots used (2 texture, 70 arithmetic)"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlendWeightIBL;
					//   sampler2D _BumpMap;
					//   float4 _BumpMap_ST;
					//   float4 _Color;
					//   float _Cutoff;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float3 _SH1;
					//   float3 _SH11;
					//   float3 _SH2;
					//   float3 _SH21;
					//   float3 _SH3;
					//   float3 _SH31;
					//   float3 _SH4;
					//   float3 _SH41;
					//   float3 _SH5;
					//   float3 _SH51;
					//   float3 _SH6;
					//   float3 _SH61;
					//   float3 _SH7;
					//   float3 _SH71;
					//   float3 _SH8;
					//   float3 _SH81;
					//   row_major float4x4 _SkyMatrix;
					//   row_major float4x4 _SkyMatrix1;
					//   float2 _UniformOcclusion;
					//   float unity_MaxOutputValue;
					//   bool4 unity_MetaFragmentControl;
					//   float unity_OneOverOutputBoost;
					//   float unity_UseLinearSpace;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _SkyMatrix                c0       3
					//   _SkyMatrix1               c3       3
					//   _Color                    c6       1
					//   _MainTex_ST               c7       1
					//   _BumpMap_ST               c8       1
					//   _ExposureIBL              c9       1
					//   _UniformOcclusion         c10      1
					//   _SH0                      c11      1
					//   _SH1                      c12      1
					//   _SH2                      c13      1
					//   _SH3                      c14      1
					//   _SH4                      c15      1
					//   _SH5                      c16      1
					//   _SH6                      c17      1
					//   _SH7                      c18      1
					//   _SH8                      c19      1
					//   _BlendWeightIBL           c20      1
					//   _ExposureIBL1             c21      1
					//   _SH01                     c22      1
					//   _SH11                     c23      1
					//   _SH21                     c24      1
					//   _SH31                     c25      1
					//   _SH41                     c26      1
					//   _SH51                     c27      1
					//   _SH61                     c28      1
					//   _SH71                     c29      1
					//   _SH81                     c30      1
					//   unity_MetaFragmentControl c31      1
					//   unity_OneOverOutputBoost  c32      1
					//   unity_MaxOutputValue      c33      1
					//   unity_UseLinearSpace      c34      1
					//   _Cutoff                   c35      1
					//   _MainTex                  s0       1
					//   _BumpMap                  s1       1
					//
					
					    ps_3_0
					    def c36, 2, -1, 0, 1
					    def c37, 3, -1, 0.305306017, 0.682171106
					    def c38, 0.0125228781, 0.010309278, 0.0199999996, 255
					    def c39, 0.00392156886, 0, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v3, c7, c7.zwzw
					    texld_pp r0, r0, s0
					    mov r1.w, c6.w
					    mad_pp r1, r0.w, r1.w, -c35.x
					    mul_pp r0.xyz, r0, c6
					    texkill r1
					    mad r1.xy, v3, c8, c8.zwzw
					    texld_pp r1, r1, s1
					    mad_pp r1.xy, r1.wyzw, c36.x, c36.y
					    dp2add_sat_pp r0.w, r1, r1, c36.z
					    add_pp r0.w, -r0.w, c36.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    nrm r2.xyz, r1
					    dp3 r0.w, v2, r2
					    mul r1.xyz, r0.w, c2
					    mul r3.xyz, r0.w, c5
					    dp3 r0.w, v1, r2
					    dp3 r1.w, v0, r2
					    mad r1.xyz, c1, r0.w, r1
					    mad r2.xyz, c4, r0.w, r3
					    mad r2.xyz, c3, r1.w, r2
					    mad r1.xyz, c0, r1.w, r1
					    nrm r3.xyz, r1
					    nrm r1.xyz, r2
					    mov r2.xyz, c12
					    mad r2.xyz, r2, r3.y, c11
					    mad r2.xyz, c13, r3.z, r2
					    mad r2.xyz, c14, r3.x, r2
					    mul r4.xyz, r3.xzxw, r3.yyzw
					    mad r2.xyz, c15, r4.x, r2
					    mad r2.xyz, c16, r4.y, r2
					    mad r2.xyz, c18, r4.z, r2
					    mul r3.yz, r3, r3
					    mad r0.w, r3.x, r3.x, -r3.y
					    mad r1.w, r3.z, c37.x, c37.y
					    mad r2.xyz, c17, r1.w, r2
					    mad r2.xyz, c19, r0.w, r2
					    mov r3.xyz, c23
					    mad r3.xyz, r3, r1.y, c22
					    mad r3.xyz, c24, r1.z, r3
					    mad r3.xyz, c25, r1.x, r3
					    mul r4.xyz, r1.xzxw, r1.yyzw
					    mad r3.xyz, c26, r4.x, r3
					    mad r3.xyz, c27, r4.y, r3
					    mad r3.xyz, c29, r4.z, r3
					    mul r1.yz, r1, r1
					    mad r0.w, r1.x, r1.x, -r1.y
					    mad r1.x, r1.z, c37.x, c37.y
					    mad r1.xyz, c28, r1.x, r3
					    mad r1.xyz, c30, r0.w, r1
					    lrp_pp r3.xyz, c20.x, r2_abs, r1_abs
					    mov r1.xw, c21
					    add_pp r1.yz, -r1.xxww, c9.xxww
					    mad_pp r1.xy, c20.x, r1.yzzw, r1.xwzw
					    mul_pp r0.xyz, r0, r1.y
					    mul_pp r0.w, r1.x, c10.x
					    mul_pp r1.xyz, r0, r3
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r2.xyz, r1, c37.z, c37.w
					    mad_pp r2.xyz, r1, r2, c38.x
					    mul_pp r2.xyz, r1, r2
					    abs r0.w, c34.x
					    cmp_pp r1.xyz, -r0.w, r2, r1
					    mul r1.xyz, r1, c38.y
					    max r0.w, r1.x, r1.y
					    max r2.x, r1.z, c38.z
					    max r1.w, r0.w, r2.x
					    mul r0.w, r1.w, c38.w
					    frc r1.w, -r0.w
					    add r0.w, r0.w, r1.w
					    mul_pp r2.w, r0.w, c39.x
					    rcp r0.w, r2.w
					    mul_pp r2.xyz, r0.w, r1
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mov_sat r0.x, c32.x
					    mul r0.xyz, r1, r0.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    min_pp r0.xyz, c33.x, r1
					    mov r1.z, c36.z
					    cmp_pp r0.xyz, -c31.x, r1.z, r0
					    mov r0.w, c31.x
					    cmp_pp oC0, -c31.y, r0, r2
					
					// approximately 94 instruction slots used (2 texture, 92 arithmetic)"
				}
			}
		}
		Pass {
			Name "SHADOWCASTER"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			ZClip Off
			ZTest Less
			Cull Off
			Offset 1, 1
			GpuProgramID 406305
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_LightShadowBias;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   unity_ObjectToWorld   c0       4
					//   unity_MatrixVP        c4       4
					//   unity_LightShadowBias c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord1 o1.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r0.x, c6, r1
					    dp4 r0.y, c7, r1
					    rcp r0.z, r0.y
					    mov r2.w, r0.y
					    mul_sat r0.y, r0.z, c8.x
					    add r0.x, r0.y, r0.x
					    max r0.y, r0.x, c9.y
					    add r0.y, -r0.x, r0.y
					    mad r2.z, c8.y, r0.y, r0.x
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _LightPositionRange c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord o0.xyz
					    dcl_position o1
					    dcl_texcoord1 o2.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    add o0.xyz, r0, -c8
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o2.xy, v1
					    mad o1.xy, r2.w, c255, r2
					    mov o1.zw, r2
					
					// approximately 16 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[45];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, -1, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add r0.x, r0.w, -c0.x
					    cmp r0, r0.x, c1.x, c1.y
					    texkill r0
					    mov oC0, c1.z
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlatb0 = u_xlat0.w<_Cutoff;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   float4 _LightPositionRange;
					//   sampler2D _MainTex;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//   _Cutoff               c2       1
					//   _MainTex              s0       1
					//
					
					    ps_3_0
					    def c3, 1, -1, 0, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    add r0.x, r0.w, -c2.x
					    cmp r0, r0.x, c3.x, c3.y
					    texkill r0
					    dp3 r0.x, v0, v0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul oC0, r0.x, c0.w
					
					// approximately 9 instruction slots used (1 texture, 8 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Cutoff;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					uniform  sampler2D _MainTex;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlatb0 = u_xlat0.w<_Cutoff;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
				}
			}
		}
	}
	SubShader {
		LOD 350
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
		Pass {
			Name "FORWARD"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			ZClip Off
			Cull Off
			GpuProgramID 518934
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat3);
					    u_xlat2.y = dot(unity_SHAg, u_xlat3);
					    u_xlat2.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_0_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat2);
					    u_xlat3.y = dot(unity_SHAg, u_xlat2);
					    u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat21 = u_xlat3.y * u_xlat3.y;
					    u_xlat21 = u_xlat3.x * u_xlat3.x + (-u_xlat21);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat3);
					    u_xlat4.y = dot(unity_SHAg, u_xlat3);
					    u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat3.xxxx + u_xlat5;
					    u_xlat3 = u_xlat0 * u_xlat3.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat3);
					    u_xlat2.y = dot(unity_SHAg, u_xlat3);
					    u_xlat2.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD6 = u_xlat1.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_0_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat2);
					    u_xlat3.y = dot(unity_SHAg, u_xlat2);
					    u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat21 = u_xlat3.y * u_xlat3.y;
					    u_xlat21 = u_xlat3.x * u_xlat3.x + (-u_xlat21);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat3);
					    u_xlat4.y = dot(unity_SHAg, u_xlat3);
					    u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat3.xxxx + u_xlat5;
					    u_xlat3 = u_xlat0 * u_xlat3.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD6 = u_xlat1.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat3);
					    u_xlat2.y = dot(unity_SHAg, u_xlat3);
					    u_xlat2.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_0_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat2);
					    u_xlat3.y = dot(unity_SHAg, u_xlat2);
					    u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat21 = u_xlat3.y * u_xlat3.y;
					    u_xlat21 = u_xlat3.x * u_xlat3.x + (-u_xlat21);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat3);
					    u_xlat4.y = dot(unity_SHAg, u_xlat3);
					    u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat3.xxxx + u_xlat5;
					    u_xlat3 = u_xlat0 * u_xlat3.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat3);
					    u_xlat2.y = dot(unity_SHAg, u_xlat3);
					    u_xlat2.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD6 = u_xlat1.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_0_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD6 = u_xlat1.z;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat18 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat2);
					    u_xlat3.y = dot(unity_SHAg, u_xlat2);
					    u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "VERTEXLIGHT_ON" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_14[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out float vs_TEXCOORD6;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.zxy;
					    u_xlat4.xyz = u_xlat3.yzx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    vs_TEXCOORD0.y = u_xlat4.x;
					    vs_TEXCOORD0.z = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat4.y;
					    vs_TEXCOORD2.y = u_xlat4.z;
					    vs_TEXCOORD1.z = u_xlat3.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat21 = u_xlat3.y * u_xlat3.y;
					    u_xlat21 = u_xlat3.x * u_xlat3.x + (-u_xlat21);
					    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat3);
					    u_xlat4.y = dot(unity_SHAg, u_xlat3);
					    u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat3.xxxx + u_xlat5;
					    u_xlat3 = u_xlat0 * u_xlat3.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD6 = u_xlat1.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					vec3 u_xlat9;
					float u_xlat11;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat5.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _ExposureIBL.www;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat11 = u_xlat6.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat11) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * abs(u_xlat1.xyz);
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD0.w;
					        u_xlat9.y = vs_TEXCOORD1.w;
					        u_xlat9.z = vs_TEXCOORD2.w;
					        u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat16 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat16, u_xlat17);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat16 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat17 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat0) + u_xlat5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat9;
					float u_xlat13;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat6.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _ExposureIBL.www;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat13 = u_xlat7.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat13) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat7.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * abs(u_xlat1.xyz);
					    u_xlat9.x = vs_TEXCOORD0.w;
					    u_xlat9.y = vs_TEXCOORD1.w;
					    u_xlat9.z = vs_TEXCOORD2.w;
					    u_xlat4.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat9.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat20 = (-u_xlat19) + u_xlat20;
					    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat19;
					    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat4.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat3.y * 0.25 + 0.75;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat9.x, u_xlat4.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat3.x = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat9.xy);
					    u_xlat19 = u_xlat19 + u_xlat4.x;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat19, u_xlat3.x);
					    u_xlat19 = (u_xlatb20) ? u_xlat3.x : u_xlat19;
					    u_xlat20 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3.xyz = vec3(u_xlat20) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat0) + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat6;
					vec3 u_xlat9;
					float u_xlat11;
					float u_xlat15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat5.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _ExposureIBL.www;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat11 = u_xlat6.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat11) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * abs(u_xlat1.xyz);
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb16 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD0.w;
					        u_xlat9.y = vs_TEXCOORD1.w;
					        u_xlat9.z = vs_TEXCOORD2.w;
					        u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat16 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat16, u_xlat17);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat16 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat17 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat9;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat6.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * _ExposureIBL.www;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat13 = u_xlat7.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat13) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat7.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * abs(u_xlat1.xyz);
					    u_xlat9.x = vs_TEXCOORD0.w;
					    u_xlat9.y = vs_TEXCOORD1.w;
					    u_xlat9.z = vs_TEXCOORD2.w;
					    u_xlat4.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat9.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat20 = (-u_xlat19) + u_xlat20;
					    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat19;
					    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat4.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat3.y * 0.25 + 0.75;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat9.x, u_xlat4.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat3.x = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat9.xy);
					    u_xlat19 = u_xlat19 + u_xlat4.x;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat19, u_xlat3.x);
					    u_xlat19 = (u_xlatb20) ? u_xlat3.x : u_xlat19;
					    u_xlat20 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3.xyz = vec3(u_xlat20) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_22;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_24[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec3 u_xlat10;
					vec2 u_xlat12;
					float u_xlat13;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat0.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat0.xy + _ExposureIBL1.xw;
					    u_xlat0.x = u_xlat0.x * _UniformOcclusion.xxxy.z;
					    u_xlat12.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat0.yyy * u_xlat1.xyz;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat13 = u_xlat7.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat13) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat7.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix1[2].x;
					    u_xlat4.x = u_xlat2.y * _SkyMatrix1[0].y;
					    u_xlat4.y = u_xlat2.y * _SkyMatrix1[1].y;
					    u_xlat4.z = u_xlat2.y * _SkyMatrix1[2].y;
					    u_xlat5.x = u_xlat2.z * _SkyMatrix1[0].z;
					    u_xlat5.y = u_xlat2.z * _SkyMatrix1[1].z;
					    u_xlat5.z = u_xlat2.z * _SkyMatrix1[2].z;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat4.xyz = _SH11.xyz * u_xlat3.yyy + _SH01.xyz;
					    u_xlat4.xyz = _SH21.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = _SH31.xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.xzx * u_xlat3.yyz;
					    u_xlat4.xyz = _SH41.xyz * u_xlat5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = _SH51.xyz * u_xlat5.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = _SH71.xyz * u_xlat5.zzz + u_xlat4.xyz;
					    u_xlat9.xy = u_xlat3.yz * u_xlat3.yz;
					    u_xlat19 = u_xlat9.y * 3.0 + -1.0;
					    u_xlat4.xyz = _SH61.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat19 = u_xlat3.x * u_xlat3.x + (-u_xlat9.x);
					    u_xlat3.xyz = _SH81.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat1.xyz = abs(u_xlat1.xyz) + -abs(u_xlat3.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + abs(u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD0.w;
					        u_xlat10.y = vs_TEXCOORD1.w;
					        u_xlat10.z = vs_TEXCOORD2.w;
					        u_xlat3.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat10.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat19, u_xlat20);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3.xyz = vec3(u_xlat20) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_22;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_24[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat9;
					vec2 u_xlat12;
					float u_xlat13;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat0.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat0.xy + _ExposureIBL1.xw;
					    u_xlat0.x = u_xlat0.x * _UniformOcclusion.xxxy.z;
					    u_xlat12.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat0.yyy * u_xlat1.xyz;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat13 = u_xlat7.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat13) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat7.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix1[2].x;
					    u_xlat4.x = u_xlat2.y * _SkyMatrix1[0].y;
					    u_xlat4.y = u_xlat2.y * _SkyMatrix1[1].y;
					    u_xlat4.z = u_xlat2.y * _SkyMatrix1[2].y;
					    u_xlat5.x = u_xlat2.z * _SkyMatrix1[0].z;
					    u_xlat5.y = u_xlat2.z * _SkyMatrix1[1].z;
					    u_xlat5.z = u_xlat2.z * _SkyMatrix1[2].z;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat4.xyz = _SH11.xyz * u_xlat3.yyy + _SH01.xyz;
					    u_xlat4.xyz = _SH21.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = _SH31.xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.xzx * u_xlat3.yyz;
					    u_xlat4.xyz = _SH41.xyz * u_xlat5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = _SH51.xyz * u_xlat5.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = _SH71.xyz * u_xlat5.zzz + u_xlat4.xyz;
					    u_xlat9.xy = u_xlat3.yz * u_xlat3.yz;
					    u_xlat19 = u_xlat9.y * 3.0 + -1.0;
					    u_xlat4.xyz = _SH61.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat19 = u_xlat3.x * u_xlat3.x + (-u_xlat9.x);
					    u_xlat3.xyz = _SH81.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat1.xyz = abs(u_xlat1.xyz) + -abs(u_xlat3.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + abs(u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xyz;
					    u_xlat9.x = vs_TEXCOORD0.w;
					    u_xlat9.y = vs_TEXCOORD1.w;
					    u_xlat9.z = vs_TEXCOORD2.w;
					    u_xlat4.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat9.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat20 = (-u_xlat19) + u_xlat20;
					    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat19;
					    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat4.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat3.y * 0.25 + 0.75;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat9.x, u_xlat4.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat3.x = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat9.xy);
					    u_xlat19 = u_xlat19 + u_xlat4.x;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat19, u_xlat3.x);
					    u_xlat19 = (u_xlatb20) ? u_xlat3.x : u_xlat19;
					    u_xlat20 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3.xyz = vec3(u_xlat20) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_22;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_24[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat9;
					vec3 u_xlat10;
					vec2 u_xlat12;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat0.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat0.xy + _ExposureIBL1.xw;
					    u_xlat0.x = u_xlat0.x * _UniformOcclusion.xxxy.z;
					    u_xlat12.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat0.yyy * u_xlat1.xyz;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat13 = u_xlat7.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat13) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat7.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix1[2].x;
					    u_xlat4.x = u_xlat2.y * _SkyMatrix1[0].y;
					    u_xlat4.y = u_xlat2.y * _SkyMatrix1[1].y;
					    u_xlat4.z = u_xlat2.y * _SkyMatrix1[2].y;
					    u_xlat5.x = u_xlat2.z * _SkyMatrix1[0].z;
					    u_xlat5.y = u_xlat2.z * _SkyMatrix1[1].z;
					    u_xlat5.z = u_xlat2.z * _SkyMatrix1[2].z;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat4.xyz = _SH11.xyz * u_xlat3.yyy + _SH01.xyz;
					    u_xlat4.xyz = _SH21.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = _SH31.xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.xzx * u_xlat3.yyz;
					    u_xlat4.xyz = _SH41.xyz * u_xlat5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = _SH51.xyz * u_xlat5.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = _SH71.xyz * u_xlat5.zzz + u_xlat4.xyz;
					    u_xlat9.xy = u_xlat3.yz * u_xlat3.yz;
					    u_xlat19 = u_xlat9.y * 3.0 + -1.0;
					    u_xlat4.xyz = _SH61.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat19 = u_xlat3.x * u_xlat3.x + (-u_xlat9.x);
					    u_xlat3.xyz = _SH81.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat1.xyz = abs(u_xlat1.xyz) + -abs(u_xlat3.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + abs(u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD0.w;
					        u_xlat10.y = vs_TEXCOORD1.w;
					        u_xlat10.z = vs_TEXCOORD2.w;
					        u_xlat3.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat10.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat20 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat19, u_xlat20);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat19 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3.xyz = vec3(u_xlat20) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_10[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_22;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_24[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec3 u_xlat9;
					vec2 u_xlat12;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat0.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat0.xy + _ExposureIBL1.xw;
					    u_xlat0.x = u_xlat0.x * _UniformOcclusion.xxxy.z;
					    u_xlat12.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat12.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat6.xyz = u_xlat0.yyy * u_xlat1.xyz;
					    u_xlat1.x = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat1.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat1.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat13 = u_xlat7.y * 3.0 + -1.0;
					    u_xlat3.xyz = _SH6.xyz * vec3(u_xlat13) + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat7.x);
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix1[2].x;
					    u_xlat4.x = u_xlat2.y * _SkyMatrix1[0].y;
					    u_xlat4.y = u_xlat2.y * _SkyMatrix1[1].y;
					    u_xlat4.z = u_xlat2.y * _SkyMatrix1[2].y;
					    u_xlat5.x = u_xlat2.z * _SkyMatrix1[0].z;
					    u_xlat5.y = u_xlat2.z * _SkyMatrix1[1].z;
					    u_xlat5.z = u_xlat2.z * _SkyMatrix1[2].z;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat4.xyz = _SH11.xyz * u_xlat3.yyy + _SH01.xyz;
					    u_xlat4.xyz = _SH21.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = _SH31.xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat3.xzx * u_xlat3.yyz;
					    u_xlat4.xyz = _SH41.xyz * u_xlat5.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = _SH51.xyz * u_xlat5.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = _SH71.xyz * u_xlat5.zzz + u_xlat4.xyz;
					    u_xlat9.xy = u_xlat3.yz * u_xlat3.yz;
					    u_xlat19 = u_xlat9.y * 3.0 + -1.0;
					    u_xlat4.xyz = _SH61.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat19 = u_xlat3.x * u_xlat3.x + (-u_xlat9.x);
					    u_xlat3.xyz = _SH81.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    u_xlat1.xyz = abs(u_xlat1.xyz) + -abs(u_xlat3.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + abs(u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xyz;
					    u_xlat9.x = vs_TEXCOORD0.w;
					    u_xlat9.y = vs_TEXCOORD1.w;
					    u_xlat9.z = vs_TEXCOORD2.w;
					    u_xlat4.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat9.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat20 = sqrt(u_xlat20);
					    u_xlat20 = (-u_xlat19) + u_xlat20;
					    u_xlat19 = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat19;
					    u_xlat19 = u_xlat19 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlatb20 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb20){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD1.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD0.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat4.xyz : u_xlat9.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat3.y * 0.25 + 0.75;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat9.x, u_xlat4.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat3.x = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat9.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat9.xy);
					    u_xlat19 = u_xlat19 + u_xlat4.x;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat19, u_xlat3.x);
					    u_xlat19 = (u_xlatb20) ? u_xlat3.x : u_xlat19;
					    u_xlat20 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat3.xyz = vec3(u_xlat20) * _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.xyz = u_xlat2.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * vs_TEXCOORD4.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat6.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 574987
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD6;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat0.zw;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat15 = u_xlat15 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat9 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb9 = u_xlat9<0.0;
					    if(((int(u_xlatb9) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.z = sqrt(u_xlat9);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb9){
					        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat9, u_xlat10);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = 0.0<u_xlat3.z;
					    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat16 = u_xlat16 * u_xlat4.w;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat17));
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat16 = u_xlat3.w * u_xlat4.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat10);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat10 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat10 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 + u_xlat4.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlatb19 = 0.0<u_xlat3.z;
					    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat19 = u_xlat19 * u_xlat4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _ShadowOffsets[4];
						vec4 unused_0_4[3];
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_11[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat21 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb21 = u_xlat21<0.0;
					    if(((int(u_xlatb21) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat22 = (-u_xlat21) + u_xlat22;
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb23 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat23 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat23, u_xlat11);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat23 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb4 = u_xlat21<0.99000001;
					    if(u_xlatb4){
					        u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					        u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					        u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					        u_xlat5.xyz = u_xlat4.xyz + _ShadowOffsets[0].xyz;
					        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[1].xyz;
					        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[2].xyz;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + _ShadowOffsets[3].xyz;
					        vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
					        u_xlat5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat4.x = (-_LightShadowData.x) + 1.0;
					        u_xlat4 = u_xlat5 * u_xlat4.xxxx + _LightShadowData.xxxx;
					        u_xlat4.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat4.x = 1.0;
					    }
					    u_xlat21 = u_xlat21 + u_xlat4.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat23 = min(u_xlat21, u_xlat23);
					    u_xlat21 = (u_xlatb22) ? u_xlat23 : u_xlat21;
					    u_xlatb22 = 0.0<u_xlat3.z;
					    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat22 = u_xlat22 * u_xlat4.w;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat23));
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlat13 = (-u_xlat12) + u_xlat13;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat13 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb13){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat6.x, u_xlat3.x);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat12 = u_xlat12 + u_xlat3.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.x = min(u_xlat12, u_xlat2.x);
					    u_xlat12 = (u_xlatb13) ? u_xlat2.x : u_xlat12;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = unity_MatrixV[0].z;
					    u_xlat4.y = unity_MatrixV[1].z;
					    u_xlat4.z = unity_MatrixV[2].z;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat16 = (-u_xlat15) + u_xlat16;
					    u_xlat15 = unity_ShadowFadeCenterAndType.w * u_xlat16 + u_xlat15;
					    u_xlat15 = u_xlat15 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat17, u_xlat12);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat15 = u_xlat15 + u_xlat3.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat12 = min(u_xlat15, u_xlat12);
					    u_xlat15 = (u_xlatb16) ? u_xlat12 : u_xlat15;
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat15 = u_xlat15 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat25));
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat19 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat25));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat25 = u_xlat3.w * u_xlat4.x;
					    u_xlat24 = u_xlat24 * u_xlat25;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat15 = u_xlat15 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat9 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb9 = u_xlat9<0.0;
					    if(((int(u_xlatb9) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.z = sqrt(u_xlat9);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb9){
					        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat9, u_xlat10);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = u_xlat9 * _ProjectionParams.z;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = u_xlat9 * unity_FogParams.x;
					    u_xlat9 = u_xlat9 * (-u_xlat9);
					    u_xlat9 = exp2(u_xlat9);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = 0.0<u_xlat3.z;
					    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat16 = u_xlat16 * u_xlat4.w;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat17));
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat16 = u_xlat3.w * u_xlat4.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat10);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat10 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat10 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 + u_xlat4.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlatb19 = 0.0<u_xlat3.z;
					    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat19 = u_xlat19 * u_xlat4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _ShadowOffsets[4];
						vec4 unused_0_4[3];
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_11[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat21 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb21 = u_xlat21<0.0;
					    if(((int(u_xlatb21) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat22 = (-u_xlat21) + u_xlat22;
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb23 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat23 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat23, u_xlat11);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat23 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb4 = u_xlat21<0.99000001;
					    if(u_xlatb4){
					        u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					        u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					        u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					        u_xlat5.xyz = u_xlat4.xyz + _ShadowOffsets[0].xyz;
					        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[1].xyz;
					        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[2].xyz;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + _ShadowOffsets[3].xyz;
					        vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
					        u_xlat5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat4.x = (-_LightShadowData.x) + 1.0;
					        u_xlat4 = u_xlat5 * u_xlat4.xxxx + _LightShadowData.xxxx;
					        u_xlat4.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat4.x = 1.0;
					    }
					    u_xlat21 = u_xlat21 + u_xlat4.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat23 = min(u_xlat21, u_xlat23);
					    u_xlat21 = (u_xlatb22) ? u_xlat23 : u_xlat21;
					    u_xlatb22 = 0.0<u_xlat3.z;
					    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat22 = u_xlat22 * u_xlat4.w;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat23));
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlat13 = (-u_xlat12) + u_xlat13;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat13 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb13){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat6.x, u_xlat3.x);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat12 = u_xlat12 + u_xlat3.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.x = min(u_xlat12, u_xlat2.x);
					    u_xlat12 = (u_xlatb13) ? u_xlat2.x : u_xlat12;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlat15 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = unity_MatrixV[0].z;
					    u_xlat4.y = unity_MatrixV[1].z;
					    u_xlat4.z = unity_MatrixV[2].z;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat16 = (-u_xlat15) + u_xlat16;
					    u_xlat15 = unity_ShadowFadeCenterAndType.w * u_xlat16 + u_xlat15;
					    u_xlat15 = u_xlat15 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat17, u_xlat12);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat15 = u_xlat15 + u_xlat3.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat12 = min(u_xlat15, u_xlat12);
					    u_xlat15 = (u_xlatb16) ? u_xlat12 : u_xlat15;
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat15 = u_xlat15 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat25));
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat19 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _ExposureIBL.www;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat25));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat25 = u_xlat3.w * u_xlat4.x;
					    u_xlat24 = u_xlat24 * u_xlat25;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat15 = _BlendWeightIBL * u_xlat15 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat15 = u_xlat15 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat3.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat9 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb9 = u_xlat9<0.0;
					    if(((int(u_xlatb9) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.z = sqrt(u_xlat9);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb9){
					        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat9, u_xlat10);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat15 = _BlendWeightIBL * u_xlat15 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = 0.0<u_xlat3.z;
					    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat16 = u_xlat16 * u_xlat4.w;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat17));
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat15 = _BlendWeightIBL * u_xlat15 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat16 = u_xlat3.w * u_xlat4.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat4.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat18 = _BlendWeightIBL * u_xlat18 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat10);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat10 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat10 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 + u_xlat4.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlatb19 = 0.0<u_xlat3.z;
					    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat19 = u_xlat19 * u_xlat4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _ShadowOffsets[4];
						vec4 unused_0_4[3];
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_11[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_14[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat21 = _BlendWeightIBL * u_xlat21 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb21 = u_xlat21<0.0;
					    if(((int(u_xlatb21) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat22 = (-u_xlat21) + u_xlat22;
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb23 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat23 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat23, u_xlat11);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat23 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb4 = u_xlat21<0.99000001;
					    if(u_xlatb4){
					        u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					        u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					        u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					        u_xlat5.xyz = u_xlat4.xyz + _ShadowOffsets[0].xyz;
					        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[1].xyz;
					        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[2].xyz;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + _ShadowOffsets[3].xyz;
					        vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
					        u_xlat5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat4.x = (-_LightShadowData.x) + 1.0;
					        u_xlat4 = u_xlat5 * u_xlat4.xxxx + _LightShadowData.xxxx;
					        u_xlat4.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat4.x = 1.0;
					    }
					    u_xlat21 = u_xlat21 + u_xlat4.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat23 = min(u_xlat21, u_xlat23);
					    u_xlat21 = (u_xlatb22) ? u_xlat23 : u_xlat21;
					    u_xlatb22 = 0.0<u_xlat3.z;
					    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat22 = u_xlat22 * u_xlat4.w;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat23));
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat4.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlat13 = (-u_xlat12) + u_xlat13;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat13 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb13){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat6.x, u_xlat3.x);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat12 = u_xlat12 + u_xlat3.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.x = min(u_xlat12, u_xlat2.x);
					    u_xlat12 = (u_xlatb13) ? u_xlat2.x : u_xlat12;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat5.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = unity_MatrixV[0].z;
					    u_xlat4.y = unity_MatrixV[1].z;
					    u_xlat4.z = unity_MatrixV[2].z;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat16 = (-u_xlat15) + u_xlat16;
					    u_xlat15 = unity_ShadowFadeCenterAndType.w * u_xlat16 + u_xlat15;
					    u_xlat15 = u_xlat15 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat17, u_xlat12);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat15 = u_xlat15 + u_xlat3.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat12 = min(u_xlat15, u_xlat12);
					    u_xlat15 = (u_xlatb16) ? u_xlat12 : u_xlat15;
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat15 = u_xlat15 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat18 = _BlendWeightIBL * u_xlat18 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat24 = _BlendWeightIBL * u_xlat24 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat25));
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat18 = _BlendWeightIBL * u_xlat18 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat19 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat24 = _BlendWeightIBL * u_xlat24 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat25));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat25 = u_xlat3.w * u_xlat4.x;
					    u_xlat24 = u_xlat24 * u_xlat25;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat15 = _BlendWeightIBL * u_xlat15 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat16));
					    u_xlat15 = u_xlat15 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat3.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat9 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb9 = u_xlat9<0.0;
					    if(((int(u_xlatb9) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = min(u_xlat9, 1.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat1.z = sqrt(u_xlat9);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb9){
					        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat9, u_xlat10);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = u_xlat9 * _ProjectionParams.z;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = u_xlat9 * unity_FogParams.x;
					    u_xlat9 = u_xlat9 * (-u_xlat9);
					    u_xlat9 = exp2(u_xlat9);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat15 = _BlendWeightIBL * u_xlat15 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = 0.0<u_xlat3.z;
					    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat16 = u_xlat16 * u_xlat4.w;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat17));
					    u_xlat16 = u_xlat16 * u_xlat3.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat15 = _BlendWeightIBL * u_xlat15 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb15)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat16 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat15, u_xlat16);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat15 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat16));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat16 = u_xlat3.w * u_xlat4.x;
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat4.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb12){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat12, u_xlat13);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat12 = u_xlat12 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat18 = _BlendWeightIBL * u_xlat18 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat10);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					    u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					    u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat10 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat10 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 + u_xlat4.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlatb19 = 0.0<u_xlat3.z;
					    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat19 = u_xlat19 * u_xlat4.w;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat20));
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _ShadowOffsets[4];
						vec4 unused_0_4[3];
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_11[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_14[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat21 = _BlendWeightIBL * u_xlat21 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb21 = u_xlat21<0.0;
					    if(((int(u_xlatb21) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3 = vs_TEXCOORD3.yyyy * unity_WorldToLight[1];
					    u_xlat3 = unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat3;
					    u_xlat3 = unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat3;
					    u_xlat3 = u_xlat3 + unity_WorldToLight[3];
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat22 = (-u_xlat21) + u_xlat22;
					    u_xlat21 = unity_ShadowFadeCenterAndType.w * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlatb22 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb22){
					        u_xlatb23 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat23 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat11 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat23, u_xlat11);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat23 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlatb4 = u_xlat21<0.99000001;
					    if(u_xlatb4){
					        u_xlat4 = vs_TEXCOORD3.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					        u_xlat4 = unity_WorldToShadow[0 / 4][0 % 4] * vs_TEXCOORD3.xxxx + u_xlat4;
					        u_xlat4 = unity_WorldToShadow[2 / 4][2 % 4] * vs_TEXCOORD3.zzzz + u_xlat4;
					        u_xlat4 = u_xlat4 + unity_WorldToShadow[3 / 4][3 % 4];
					        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					        u_xlat5.xyz = u_xlat4.xyz + _ShadowOffsets[0].xyz;
					        vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
					        u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[1].xyz;
					        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					        u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[2].xyz;
					        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);
					        u_xlat5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + _ShadowOffsets[3].xyz;
					        vec3 txVec3 = vec3(u_xlat4.xy,u_xlat4.z);
					        u_xlat5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					        u_xlat4.x = (-_LightShadowData.x) + 1.0;
					        u_xlat4 = u_xlat5 * u_xlat4.xxxx + _LightShadowData.xxxx;
					        u_xlat4.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat4.x = 1.0;
					    }
					    u_xlat21 = u_xlat21 + u_xlat4.x;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat23 = min(u_xlat21, u_xlat23);
					    u_xlat21 = (u_xlatb22) ? u_xlat23 : u_xlat21;
					    u_xlatb22 = 0.0<u_xlat3.z;
					    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
					    u_xlat4.xy = u_xlat3.xy / u_xlat3.ww;
					    u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xy);
					    u_xlat22 = u_xlat22 * u_xlat4.w;
					    u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat23));
					    u_xlat22 = u_xlat22 * u_xlat3.x;
					    u_xlat21 = u_xlat21 * u_xlat22;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_8[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat4.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat12 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlat13 = (-u_xlat12) + u_xlat13;
					    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat13 + u_xlat12;
					    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlatb13 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb13){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : vs_TEXCOORD3.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat2.y * 0.25 + 0.75;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat2.x = max(u_xlat6.x, u_xlat3.x);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					    } else {
					        u_xlat2.x = float(1.0);
					        u_xlat2.y = float(1.0);
					        u_xlat2.z = float(1.0);
					        u_xlat2.w = float(1.0);
					    }
					    u_xlat2.x = dot(u_xlat2, unity_OcclusionMaskSelector);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat6.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat6.xy);
					    u_xlat12 = u_xlat12 + u_xlat3.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.x = min(u_xlat12, u_xlat2.x);
					    u_xlat12 = (u_xlatb13) ? u_xlat2.x : u_xlat12;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat0.x = _BlendWeightIBL * u_xlat0.x + _ExposureIBL1.w;
					    u_xlat5.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;
					    u_xlat15 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD3.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat4.x = unity_MatrixV[0].z;
					    u_xlat4.y = unity_MatrixV[1].z;
					    u_xlat4.z = unity_MatrixV[2].z;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat16 = (-u_xlat15) + u_xlat16;
					    u_xlat15 = unity_ShadowFadeCenterAndType.w * u_xlat16 + u_xlat15;
					    u_xlat15 = u_xlat15 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlatb16 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb16){
					        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat17, u_xlat12);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat15 = u_xlat15 + u_xlat3.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat12 = min(u_xlat15, u_xlat12);
					    u_xlat15 = (u_xlatb16) ? u_xlat12 : u_xlat15;
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat15 = u_xlat15 * u_xlat2.w;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat18 = _BlendWeightIBL * u_xlat18 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat18 = u_xlat18 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat24 = _BlendWeightIBL * u_xlat24 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat25));
					    u_xlat24 = u_xlat24 * u_xlat3.x;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					bool u_xlatb19;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat18 = _BlendWeightIBL * u_xlat18 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb18 = u_xlat18<0.0;
					    if(((int(u_xlatb18) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat2.z = sqrt(u_xlat18);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = (-u_xlat18) + u_xlat19;
					    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat19 + u_xlat18;
					    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb20 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat20 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat21 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat20, u_xlat21);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat20 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlat21 = u_xlat21 * _LightPositionRange.w;
					    u_xlat21 = u_xlat21 * 0.970000029;
					    u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0);
					    u_xlatb21 = u_xlat4.x<u_xlat21;
					    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 + u_xlat21;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat20 = min(u_xlat18, u_xlat20);
					    u_xlat18 = (u_xlatb19) ? u_xlat20 : u_xlat18;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat19 = u_xlat3.w * u_xlat4.x;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec4 unused_0_9[20];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_12[21];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_4;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bvec4 u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat13;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					bool u_xlatb26;
					float u_xlat27;
					bool u_xlatb27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat24 = _BlendWeightIBL * u_xlat24 + _ExposureIBL1.w;
					    u_xlat1.xy = vs_TEXCOORD4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = u_xlat1.w * _Color.w + (-_Cutoff);
					    u_xlatb24 = u_xlat24<0.0;
					    if(((int(u_xlatb24) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD4.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat2 = texture(_BumpMap, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat24 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat24 = min(u_xlat24, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat2.z = sqrt(u_xlat24);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.yyy * unity_WorldToLight[1].xyz;
					    u_xlat3.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + unity_WorldToLight[3].xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat5.x = unity_MatrixV[0].z;
					    u_xlat5.y = unity_MatrixV[1].z;
					    u_xlat5.z = unity_MatrixV[2].z;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = vs_TEXCOORD3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-u_xlat24) + u_xlat25;
					    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat25 + u_xlat24;
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlatb25 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb25){
					        u_xlatb26 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD3.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : vs_TEXCOORD3.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat26 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat26, u_xlat27);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat26 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlatb27 = u_xlat24<0.99000001;
					    if(u_xlatb27){
					        u_xlat4.xyz = vs_TEXCOORD3.xyz + (-_LightPositionRange.xyz);
					        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat27 = sqrt(u_xlat27);
					        u_xlat27 = u_xlat27 * _LightPositionRange.w;
					        u_xlat27 = u_xlat27 * 0.970000029;
					        u_xlat5.xyz = u_xlat4.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					        u_xlat5 = textureLod(_ShadowMapTexture, u_xlat5.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					        u_xlat6 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat13.xyz = u_xlat4.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					        u_xlat7 = textureLod(_ShadowMapTexture, u_xlat13.xyz, 0.0);
					        u_xlat4.xyz = u_xlat4.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					        u_xlat4 = textureLod(_ShadowMapTexture, u_xlat4.xyz, 0.0).yzwx;
					        u_xlat4.x = u_xlat5.x;
					        u_xlat4.y = u_xlat6.x;
					        u_xlat4.z = u_xlat7.x;
					        u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat27));
					        u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
					        u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
					        u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
					        u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
					        u_xlat27 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
					    } else {
					        u_xlat27 = 1.0;
					    }
					    u_xlat24 = u_xlat24 + u_xlat27;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat26 = min(u_xlat24, u_xlat26);
					    u_xlat24 = (u_xlatb25) ? u_xlat26 : u_xlat24;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat25));
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz);
					    u_xlat25 = u_xlat3.w * u_xlat4.x;
					    u_xlat24 = u_xlat24 * u_xlat25;
					    u_xlat3.x = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD6 / _ProjectionParams.y;
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat24 = u_xlat24 * _ProjectionParams.z;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = u_xlat24 * unity_FogParams.x;
					    u_xlat24 = u_xlat24 * (-u_xlat24);
					    u_xlat24 = exp2(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 649125
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 unused_0_5[22];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat0 = texture(_BumpMap, u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat0.z = sqrt(u_xlat6);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 unused_0_5[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat0 = texture(_BumpMap, u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat0.z = sqrt(u_xlat6);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 709386
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.zxy;
					    u_xlat3.xyz = u_xlat2.yzx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat2);
					    u_xlat1.y = dot(unity_SHAg, u_xlat2);
					    u_xlat1.z = dot(unity_SHAb, u_xlat2);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						vec4 unused_0_18;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat12 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat12 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat12 * _SkyMatrix[2].y;
					    u_xlat12 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat12 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat12 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat12 * _SkyMatrix[2].z;
					    u_xlat5.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat2.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat2.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat2.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat2.xyz = _SH4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _SH5.xyz * u_xlat3.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = _SH7.xyz * u_xlat3.zzz + u_xlat2.xyz;
					    u_xlat5.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat5.x);
					    u_xlat1.x = u_xlat5.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH6.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _SH8.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * abs(u_xlat1.xyz);
					    u_xlat12 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						vec4 unused_0_18;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat12 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat12 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat12 * _SkyMatrix[2].y;
					    u_xlat12 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat12 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat12 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat12 * _SkyMatrix[2].z;
					    u_xlat5.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat2.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat2.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat2.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat2.xyz = _SH4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _SH5.xyz * u_xlat3.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = _SH7.xyz * u_xlat3.zzz + u_xlat2.xyz;
					    u_xlat5.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat5.x);
					    u_xlat1.x = u_xlat5.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH6.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _SH8.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * abs(u_xlat1.xyz);
					    u_xlat12 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						vec4 unused_0_18;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat12 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat12 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat12 * _SkyMatrix[2].y;
					    u_xlat12 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat12 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat12 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat12 * _SkyMatrix[2].z;
					    u_xlat5.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat2.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat2.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat2.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat2.xyz = _SH4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _SH5.xyz * u_xlat3.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = _SH7.xyz * u_xlat3.zzz + u_xlat2.xyz;
					    u_xlat5.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat5.x);
					    u_xlat1.x = u_xlat5.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH6.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _SH8.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * abs(u_xlat1.xyz);
					    u_xlat12 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						vec4 unused_0_18;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat12 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat12 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat12 * _SkyMatrix[2].y;
					    u_xlat12 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat12 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat12 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat12 * _SkyMatrix[2].z;
					    u_xlat5.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat2.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat2.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat2.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat2.xyz = _SH4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _SH5.xyz * u_xlat3.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = _SH7.xyz * u_xlat3.zzz + u_xlat2.xyz;
					    u_xlat5.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat5.x);
					    u_xlat1.x = u_xlat5.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH6.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _SH8.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * abs(u_xlat1.xyz);
					    u_xlat12 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_20;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_22[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
						vec4 unused_0_32;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat15 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat15 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat15 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat15 * _SkyMatrix[2].y;
					    u_xlat16 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat16 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat16 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat16 * _SkyMatrix[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat2.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xzx * u_xlat2.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat2.yz * u_xlat2.yz;
					    u_xlat6.x = u_xlat2.x * u_xlat2.x + (-u_xlat6.x);
					    u_xlat11 = u_xlat6.y * 3.0 + -1.0;
					    u_xlat2.xyz = _SH6.xyz * vec3(u_xlat11) + u_xlat3.xyz;
					    u_xlat2.xyz = _SH8.xyz * u_xlat6.xxx + u_xlat2.xyz;
					    u_xlat3.x = u_xlat15 * _SkyMatrix1[0].y;
					    u_xlat3.y = u_xlat15 * _SkyMatrix1[1].y;
					    u_xlat3.z = u_xlat15 * _SkyMatrix1[2].y;
					    u_xlat4.x = u_xlat16 * _SkyMatrix1[0].z;
					    u_xlat4.y = u_xlat16 * _SkyMatrix1[1].z;
					    u_xlat4.z = u_xlat16 * _SkyMatrix1[2].z;
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix1[2].x;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH11.xyz * u_xlat1.yyy + _SH01.xyz;
					    u_xlat3.xyz = _SH21.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH31.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH41.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH51.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH71.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat1.x = u_xlat6.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH61.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _SH81.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = -abs(u_xlat1.xyz) + abs(u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xyz + abs(u_xlat1.xyz);
					    u_xlat2.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat2.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xy + _ExposureIBL1.xw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.yyy;
					    u_xlat15 = u_xlat2.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_20;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_22[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
						vec4 unused_0_32;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat15 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat15 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat15 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat15 * _SkyMatrix[2].y;
					    u_xlat16 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat16 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat16 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat16 * _SkyMatrix[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat2.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xzx * u_xlat2.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat2.yz * u_xlat2.yz;
					    u_xlat6.x = u_xlat2.x * u_xlat2.x + (-u_xlat6.x);
					    u_xlat11 = u_xlat6.y * 3.0 + -1.0;
					    u_xlat2.xyz = _SH6.xyz * vec3(u_xlat11) + u_xlat3.xyz;
					    u_xlat2.xyz = _SH8.xyz * u_xlat6.xxx + u_xlat2.xyz;
					    u_xlat3.x = u_xlat15 * _SkyMatrix1[0].y;
					    u_xlat3.y = u_xlat15 * _SkyMatrix1[1].y;
					    u_xlat3.z = u_xlat15 * _SkyMatrix1[2].y;
					    u_xlat4.x = u_xlat16 * _SkyMatrix1[0].z;
					    u_xlat4.y = u_xlat16 * _SkyMatrix1[1].z;
					    u_xlat4.z = u_xlat16 * _SkyMatrix1[2].z;
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix1[2].x;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH11.xyz * u_xlat1.yyy + _SH01.xyz;
					    u_xlat3.xyz = _SH21.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH31.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH41.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH51.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH71.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat1.x = u_xlat6.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH61.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _SH81.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = -abs(u_xlat1.xyz) + abs(u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xyz + abs(u_xlat1.xyz);
					    u_xlat2.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat2.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xy + _ExposureIBL1.xw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.yyy;
					    u_xlat15 = u_xlat2.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_20;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_22[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
						vec4 unused_0_32;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat15 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat15 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat15 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat15 * _SkyMatrix[2].y;
					    u_xlat16 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat16 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat16 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat16 * _SkyMatrix[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat2.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xzx * u_xlat2.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat2.yz * u_xlat2.yz;
					    u_xlat6.x = u_xlat2.x * u_xlat2.x + (-u_xlat6.x);
					    u_xlat11 = u_xlat6.y * 3.0 + -1.0;
					    u_xlat2.xyz = _SH6.xyz * vec3(u_xlat11) + u_xlat3.xyz;
					    u_xlat2.xyz = _SH8.xyz * u_xlat6.xxx + u_xlat2.xyz;
					    u_xlat3.x = u_xlat15 * _SkyMatrix1[0].y;
					    u_xlat3.y = u_xlat15 * _SkyMatrix1[1].y;
					    u_xlat3.z = u_xlat15 * _SkyMatrix1[2].y;
					    u_xlat4.x = u_xlat16 * _SkyMatrix1[0].z;
					    u_xlat4.y = u_xlat16 * _SkyMatrix1[1].z;
					    u_xlat4.z = u_xlat16 * _SkyMatrix1[2].z;
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix1[2].x;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH11.xyz * u_xlat1.yyy + _SH01.xyz;
					    u_xlat3.xyz = _SH21.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH31.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH41.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH51.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH71.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat1.x = u_xlat6.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH61.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _SH81.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = -abs(u_xlat1.xyz) + abs(u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xyz + abs(u_xlat1.xyz);
					    u_xlat2.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat2.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xy + _ExposureIBL1.xw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.yyy;
					    u_xlat15 = u_xlat2.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_20;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_22[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
						vec4 unused_0_32;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightBuffer;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat15 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat15 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat15 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat15 * _SkyMatrix[2].y;
					    u_xlat16 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat16 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat16 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat16 * _SkyMatrix[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat2.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xzx * u_xlat2.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat2.yz * u_xlat2.yz;
					    u_xlat6.x = u_xlat2.x * u_xlat2.x + (-u_xlat6.x);
					    u_xlat11 = u_xlat6.y * 3.0 + -1.0;
					    u_xlat2.xyz = _SH6.xyz * vec3(u_xlat11) + u_xlat3.xyz;
					    u_xlat2.xyz = _SH8.xyz * u_xlat6.xxx + u_xlat2.xyz;
					    u_xlat3.x = u_xlat15 * _SkyMatrix1[0].y;
					    u_xlat3.y = u_xlat15 * _SkyMatrix1[1].y;
					    u_xlat3.z = u_xlat15 * _SkyMatrix1[2].y;
					    u_xlat4.x = u_xlat16 * _SkyMatrix1[0].z;
					    u_xlat4.y = u_xlat16 * _SkyMatrix1[1].z;
					    u_xlat4.z = u_xlat16 * _SkyMatrix1[2].z;
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix1[2].x;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH11.xyz * u_xlat1.yyy + _SH01.xyz;
					    u_xlat3.xyz = _SH21.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH31.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH41.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH51.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH71.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat1.x = u_xlat6.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH61.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _SH81.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = -abs(u_xlat1.xyz) + abs(u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xyz + abs(u_xlat1.xyz);
					    u_xlat2.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat2.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xy + _ExposureIBL1.xw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.yyy;
					    u_xlat15 = u_xlat2.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DEFERRED" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 778873
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.x = u_xlat0.z;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.x = u_xlat0.z;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.x = u_xlat0.z;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_0_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.x = u_xlat0.z;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.x;
					    vs_TEXCOORD2.x = u_xlat0.y;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						vec4 unused_0_18;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 1.0);
					    SV_Target2.w = 1.0;
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat1.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat1.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat3.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat2.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat2.xyz = _SH4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _SH5.xyz * u_xlat3.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = _SH7.xyz * u_xlat3.zzz + u_xlat2.xyz;
					    u_xlat5.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat5.x);
					    u_xlat1.x = u_xlat5.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH6.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _SH8.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * abs(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD6.xyz;
					    u_xlat12 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						vec4 unused_0_18;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 1.0);
					    SV_Target2.w = 1.0;
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat1.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat1.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat3.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat2.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat2.xyz = _SH4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _SH5.xyz * u_xlat3.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = _SH7.xyz * u_xlat3.zzz + u_xlat2.xyz;
					    u_xlat5.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat5.x);
					    u_xlat1.x = u_xlat5.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH6.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _SH8.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * abs(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD6.xyz;
					    u_xlat12 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_20;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_22[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
						vec4 unused_0_32;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat1.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xy + _ExposureIBL1.xw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.yyy;
					    u_xlat15 = u_xlat1.x * _UniformOcclusion.xxxy.z;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 1.0);
					    SV_Target2.w = 1.0;
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat1.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat1.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat3.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat6.x = u_xlat6.y * 3.0 + -1.0;
					    u_xlat6.xyz = _SH6.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat6.xyz;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix1[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix1[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix1[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix1[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix1[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix1[2].z;
					    u_xlat7.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix1[2].x;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = _SH11.xyz * u_xlat2.yyy + _SH01.xyz;
					    u_xlat3.xyz = _SH21.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH31.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xzx * u_xlat2.yyz;
					    u_xlat3.xyz = _SH41.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH51.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH71.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat2.yz * u_xlat2.yz;
					    u_xlat16 = u_xlat2.x * u_xlat2.x + (-u_xlat7.x);
					    u_xlat2.x = u_xlat7.y * 3.0 + -1.0;
					    u_xlat2.xyz = _SH61.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = _SH81.xyz * vec3(u_xlat16) + u_xlat2.xyz;
					    u_xlat1.xyz = abs(u_xlat1.xyz) + -abs(u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + abs(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_20;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_22[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
						vec4 unused_0_32;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat1.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xy + _ExposureIBL1.xw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.yyy;
					    u_xlat15 = u_xlat1.x * _UniformOcclusion.xxxy.z;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 1.0);
					    SV_Target2.w = 1.0;
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.x = u_xlat2.y * _SkyMatrix[0].y;
					    u_xlat1.y = u_xlat2.y * _SkyMatrix[1].y;
					    u_xlat1.z = u_xlat2.y * _SkyMatrix[2].y;
					    u_xlat3.x = u_xlat2.z * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat2.z * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat2.z * _SkyMatrix[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat6.x = u_xlat6.y * 3.0 + -1.0;
					    u_xlat6.xyz = _SH6.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _SH8.xyz * u_xlat1.xxx + u_xlat6.xyz;
					    u_xlat3.x = u_xlat2.y * _SkyMatrix1[0].y;
					    u_xlat3.y = u_xlat2.y * _SkyMatrix1[1].y;
					    u_xlat3.z = u_xlat2.y * _SkyMatrix1[2].y;
					    u_xlat4.x = u_xlat2.z * _SkyMatrix1[0].z;
					    u_xlat4.y = u_xlat2.z * _SkyMatrix1[1].z;
					    u_xlat4.z = u_xlat2.z * _SkyMatrix1[2].z;
					    u_xlat7.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.x = u_xlat2.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat2.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat2.x * _SkyMatrix1[2].x;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = _SH11.xyz * u_xlat2.yyy + _SH01.xyz;
					    u_xlat3.xyz = _SH21.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH31.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xzx * u_xlat2.yyz;
					    u_xlat3.xyz = _SH41.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH51.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH71.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat7.xy = u_xlat2.yz * u_xlat2.yz;
					    u_xlat16 = u_xlat2.x * u_xlat2.x + (-u_xlat7.x);
					    u_xlat2.x = u_xlat7.y * 3.0 + -1.0;
					    u_xlat2.xyz = _SH61.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = _SH81.xyz * vec3(u_xlat16) + u_xlat2.xyz;
					    u_xlat1.xyz = abs(u_xlat1.xyz) + -abs(u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + abs(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD6.xyz;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "META"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "META" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 802056
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						float unity_UseLinearSpace;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat12 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat12 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat12 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat12 * _SkyMatrix[2].y;
					    u_xlat12 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat12 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat12 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat12 * _SkyMatrix[2].z;
					    u_xlat5.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat2.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat2.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat1.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = _SH1.xyz * u_xlat1.yyy + _SH0.xyz;
					    u_xlat2.xyz = _SH2.xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = _SH3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat2.xyz = _SH4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = _SH5.xyz * u_xlat3.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = _SH7.xyz * u_xlat3.zzz + u_xlat2.xyz;
					    u_xlat5.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat5.x);
					    u_xlat1.x = u_xlat5.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH6.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _SH8.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * abs(u_xlat1.xyz);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat12 = _ExposureIBL.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					    u_xlat1.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
					    u_xlat12 = max(u_xlat1.y, u_xlat1.x);
					    u_xlat13 = max(u_xlat1.z, 0.0199999996);
					    u_xlat12 = max(u_xlat12, u_xlat13);
					    u_xlat12 = u_xlat12 * 255.0;
					    u_xlat12 = ceil(u_xlat12);
					    u_xlat2.w = u_xlat12 * 0.00392156886;
					    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
					    u_xlat12 = unity_OneOverOutputBoost;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(unity_MaxOutputValue));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_SKY_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec4 _MainTex_ST;
						vec4 _BumpMap_ST;
						float _Cutoff;
						vec4 _ExposureIBL;
						vec2 _UniformOcclusion;
						mat4x4 _SkyMatrix;
						vec4 unused_0_8[7];
						vec3 _SH0;
						vec3 _SH1;
						vec3 _SH2;
						vec3 _SH3;
						vec3 _SH4;
						vec3 _SH5;
						vec3 _SH6;
						vec3 _SH7;
						vec3 _SH8;
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_20;
						mat4x4 _SkyMatrix1;
						vec4 unused_0_22[7];
						vec3 _SH01;
						vec3 _SH11;
						vec3 _SH21;
						vec3 _SH31;
						vec3 _SH41;
						vec3 _SH51;
						vec3 _SH61;
						vec3 _SH71;
						vec3 _SH81;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						float unity_UseLinearSpace;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BumpMap;
					in  vec3 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat15 = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD3.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    u_xlat1 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1.z = sqrt(u_xlat15);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat2.x = u_xlat15 * _SkyMatrix[0].y;
					    u_xlat2.y = u_xlat15 * _SkyMatrix[1].y;
					    u_xlat2.z = u_xlat15 * _SkyMatrix[2].y;
					    u_xlat16 = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3.x = u_xlat16 * _SkyMatrix[0].z;
					    u_xlat3.y = u_xlat16 * _SkyMatrix[1].z;
					    u_xlat3.z = u_xlat16 * _SkyMatrix[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix[2].x;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = _SH1.xyz * u_xlat2.yyy + _SH0.xyz;
					    u_xlat3.xyz = _SH2.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xzx * u_xlat2.yyz;
					    u_xlat3.xyz = _SH4.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH5.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH7.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat2.yz * u_xlat2.yz;
					    u_xlat6.x = u_xlat2.x * u_xlat2.x + (-u_xlat6.x);
					    u_xlat11 = u_xlat6.y * 3.0 + -1.0;
					    u_xlat2.xyz = _SH6.xyz * vec3(u_xlat11) + u_xlat3.xyz;
					    u_xlat2.xyz = _SH8.xyz * u_xlat6.xxx + u_xlat2.xyz;
					    u_xlat3.x = u_xlat15 * _SkyMatrix1[0].y;
					    u_xlat3.y = u_xlat15 * _SkyMatrix1[1].y;
					    u_xlat3.z = u_xlat15 * _SkyMatrix1[2].y;
					    u_xlat4.x = u_xlat16 * _SkyMatrix1[0].z;
					    u_xlat4.y = u_xlat16 * _SkyMatrix1[1].z;
					    u_xlat4.z = u_xlat16 * _SkyMatrix1[2].z;
					    u_xlat6.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.x = u_xlat1.x * _SkyMatrix1[0].x;
					    u_xlat3.y = u_xlat1.x * _SkyMatrix1[1].x;
					    u_xlat3.z = u_xlat1.x * _SkyMatrix1[2].x;
					    u_xlat1.xyz = u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat3.xyz = _SH11.xyz * u_xlat1.yyy + _SH01.xyz;
					    u_xlat3.xyz = _SH21.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = _SH31.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat1.xzx * u_xlat1.yyz;
					    u_xlat3.xyz = _SH41.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = _SH51.xyz * u_xlat4.yyy + u_xlat3.xyz;
					    u_xlat3.xyz = _SH71.xyz * u_xlat4.zzz + u_xlat3.xyz;
					    u_xlat6.xy = u_xlat1.yz * u_xlat1.yz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat6.x);
					    u_xlat1.x = u_xlat6.y * 3.0 + -1.0;
					    u_xlat1.xyz = _SH61.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _SH81.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = -abs(u_xlat1.xyz) + abs(u_xlat2.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xyz + abs(u_xlat1.xyz);
					    u_xlat2.xy = _ExposureIBL.xw + (-_ExposureIBL1.xw);
					    u_xlat2.xy = vec2(vec2(_BlendWeightIBL, _BlendWeightIBL)) * u_xlat2.xy + _ExposureIBL1.xw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.yyy;
					    u_xlat15 = u_xlat2.x * _UniformOcclusion.xxxy.z;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
					    u_xlat15 = max(u_xlat1.y, u_xlat1.x);
					    u_xlat16 = max(u_xlat1.z, 0.0199999996);
					    u_xlat15 = max(u_xlat15, u_xlat16);
					    u_xlat15 = u_xlat15 * 255.0;
					    u_xlat15 = ceil(u_xlat15);
					    u_xlat2.w = u_xlat15 * 0.00392156886;
					    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
					    u_xlat15 = unity_OneOverOutputBoost;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(unity_MaxOutputValue));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "SHADOWCASTER"
			LOD 350
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "AlphaTest" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			ZClip Off
			ZTest Less
			Cull Off
			Offset 1, 1
			GpuProgramID 852239
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_LightShadowBias;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   unity_ObjectToWorld   c0       4
					//   unity_MatrixVP        c4       4
					//   unity_LightShadowBias c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord1 o1.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r0.x, c6, r1
					    dp4 r0.y, c7, r1
					    rcp r0.z, r0.y
					    mov r2.w, r0.y
					    mul_sat r0.y, r0.z, c8.x
					    add r0.x, r0.y, r0.x
					    max r0.y, r0.x, c9.y
					    add r0.y, -r0.x, r0.y
					    mad r2.z, c8.y, r0.y, r0.x
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat4 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _LightPositionRange c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord o0.xyz
					    dcl_position o1
					    dcl_texcoord1 o2.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    add o0.xyz, r0, -c8
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o2.xy, v1
					    mad o1.xy, r2.w, c255, r2
					    mov o1.zw, r2
					
					// approximately 16 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[45];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, -1, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add r0.x, r0.w, -c0.x
					    cmp r0, r0.x, c1.x, c1.y
					    texkill r0
					    mov oC0, c1.z
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlatb0 = u_xlat0.w<_Cutoff;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   float4 _LightPositionRange;
					//   sampler2D _MainTex;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//   _Cutoff               c2       1
					//   _MainTex              s0       1
					//
					
					    ps_3_0
					    def c3, 1, -1, 0, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    add r0.x, r0.w, -c2.x
					    cmp r0, r0.x, c3.x, c3.y
					    texkill r0
					    dp3 r0.x, v0, v0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul oC0, r0.x, c0.w
					
					// approximately 9 instruction slots used (1 texture, 8 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Cutoff;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					uniform  sampler2D _MainTex;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlatb0 = u_xlat0.w<_Cutoff;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Marmoset/Transparent/Cutout/Diffuse IBL"
}