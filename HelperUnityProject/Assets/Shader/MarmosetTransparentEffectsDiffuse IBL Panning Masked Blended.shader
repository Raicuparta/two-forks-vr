Shader "Marmoset/Transparent/Effects/Diffuse IBL Panning Masked Blended" {
	Properties {
		_TintColor ("Tint Color", Vector) = (1,1,1,1)
		_MainTex ("Particle Texture", 2D) = "white" {}
		_Mask ("Mask Texture", 2D) = "white" {}
		_InvFade ("Soft Particles Factor", Range(0.01, 3)) = 1
		_DiffusePanningXYMaskPanningZW ("DiffusePanningXYMaskPanningZW", Vector) = (0.3,0.3,0,0)
		_MaskChannelSelector ("MaskChannelSelector", Vector) = (1,0,0,0)
		_AmbientColorDesaturation ("Ambient Color Desaturation", Range(0, 1)) = 0
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 49817
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 14 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord2 o3
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.z, c6, r1
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c10, r1
					    mov o3.z, -r0.z
					    mul r0.z, r0.y, c11.x
					    mov r3.xyw, r0
					    mov o3.w, r0.w
					    mul r2.xzw, r0.xywz, c14.z
					    add o3.xy, r2.z, r2.xwzw
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 21 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov r2.z, r0.x
					    mov o3.x, r0.x
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 16 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD1 = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    dcl_texcoord2 o4
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c14.z
					    dp4 r0.y, c5, r1
					    mul r2.y, r0.y, c11.x
					    mul r2.w, r2.y, c14.z
					    add o4.xy, r2.z, r2.xwzw
					    dp4 r2.x, c10, r1
					    dp4 r0.z, c6, r1
					    mov o4.z, -r2.x
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov r3, r0
					    mov o3.x, r0.z
					    mov o4.w, r0.w
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 23 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[28];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    vs_TEXCOORD1 = u_xlat1.z;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 14 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord2 o3
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.z, c6, r1
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c10, r1
					    mov o3.z, -r0.z
					    mul r0.z, r0.y, c11.x
					    mov r3.xyw, r0
					    mov o3.w, r0.w
					    mul r2.xzw, r0.xywz, c14.z
					    add o3.xy, r2.z, r2.xwzw
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 21 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//   _Mask_ST            c9       1
					//
					
					    vs_3_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o2.xy, v2, c8, c8.zwzw
					    mad o2.zw, v2.xyxy, c9.xyxy, c9
					    mov r2.z, r0.x
					    mov o3.x, r0.x
					    mov o1, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 16 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD1 = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _Mask_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_MatrixV       c8       3
					//   _ProjectionParams   c11      1
					//   _MainTex_ST         c12      1
					//   _Mask_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2
					    dcl_texcoord1 o3.x
					    dcl_texcoord2 o4
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c14.z
					    dp4 r0.y, c5, r1
					    mul r2.y, r0.y, c11.x
					    mul r2.w, r2.y, c14.z
					    add o4.xy, r2.z, r2.xwzw
					    dp4 r2.x, c10, r1
					    dp4 r0.z, c6, r1
					    mov o4.z, -r2.x
					    mad o2.xy, v2, c12, c12.zwzw
					    mad o2.zw, v2.xyxy, c13.xyxy, c13
					    mov r3, r0
					    mov o3.x, r0.z
					    mov o4.w, r0.w
					    mov o1, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 23 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[50];
						vec4 _MainTex_ST;
						vec4 _Mask_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
					    vs_TEXCOORD1 = u_xlat1.z;
					    u_xlat2 = u_xlat0.y * unity_MatrixV[1].z;
					    u_xlat0.x = unity_MatrixV[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;
					    vs_TEXCOORD2.z = (-u_xlat0.x);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.w = u_xlat1.w;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float4 _Time;
					//   float4 _TintColor;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   _AmbientColorDesaturation      c1       1
					//   _TintColor                     c2       1
					//   _DiffusePanningXYMaskPanningZW c3       1
					//   _MaskChannelSelector           c4       1
					//   _ExposureIBL                   c5       1
					//   _SH0                           c6       1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c7, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xyz, c6
					    dp3_pp r0.w, c7, r0
					    add r1.xyz, r0.w, -c6
					    mad r0.xyz, c1.x, r1, r0
					    mov r1.y, c0.y
					    mad r1, r1.y, c3, v1
					    texld r2, r1, s1
					    texld r1, r1.zwzw, s0
					    dp4 r0.w, r1, c4
					    add r1, r2, r2
					    mul r2, c2, v0
					    mul_pp r1, r1, r2
					    mul r0.xyz, r0, r1
					    mul_pp oC0.w, r0.w, r1.w
					    mul_pp oC0.xyz, r0, c5.w
					
					// approximately 15 instruction slots used (2 texture, 13 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[11];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_Mask, u_xlat0.zw);
					    u_xlat0.x = dot(u_xlat0, _MaskChannelSelector);
					    u_xlat1 = u_xlat1 + u_xlat1;
					    u_xlat2 = vs_COLOR0 * _TintColor;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    SV_Target0.w = u_xlat0.x * u_xlat1.w;
					    u_xlat0.x = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat0.xyz = u_xlat0.xxx + (-_SH0.xyz);
					    u_xlat0.xyz = vec3(_AmbientColorDesaturation) * u_xlat0.xyz + _SH0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   sampler2D _CameraDepthTexture;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float4 _Time;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   _ZBufferParams                 c1       1
					//   _AmbientColorDesaturation      c2       1
					//   _TintColor                     c3       1
					//   _DiffusePanningXYMaskPanningZW c4       1
					//   _MaskChannelSelector           c5       1
					//   _ExposureIBL                   c6       1
					//   _SH0                           c7       1
					//   _InvFade                       c8       1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//   _CameraDepthTexture            s2       1
					//
					
					    ps_3_0
					    def c9, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1
					    dcl_texcoord2 v2
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texldp r0, v2, s2
					    mad r0.x, c1.z, r0.x, c1.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v2.z
					    mul_sat r0.x, r0.x, c8.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c3
					    mov r1.y, c0.y
					    mad r1, r1.y, c4, v1
					    texld r2, r1, s1
					    texld r1, r1.zwzw, s0
					    dp4 r1.x, r1, c5
					    add r2, r2, r2
					    mul_pp r0, r0, r2
					    mov r2.xyz, c7
					    dp3_pp r1.y, c9, r2
					    add r1.yzw, r1.y, -c7.xxyz
					    mad r1.yzw, c2.x, r1, r2.xxyz
					    mul r0.xyz, r0, r1.yzww
					    mul_pp oC0.w, r1.x, r0.w
					    mul_pp oC0.xyz, r0, c6.w
					
					// approximately 22 instruction slots used (3 texture, 19 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[6];
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);
					    u_xlat0.x = u_xlat0.x * _InvFade;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.w = u_xlat0.x * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz;
					    u_xlat0 = u_xlat0 * _TintColor;
					    u_xlat1 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_Mask, u_xlat1.zw);
					    u_xlat1.x = dot(u_xlat1, _MaskChannelSelector);
					    u_xlat2 = u_xlat2 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    SV_Target0.w = u_xlat1.x * u_xlat0.w;
					    u_xlat9 = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat1.xyz = vec3(u_xlat9) + (-_SH0.xyz);
					    u_xlat1.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + _SH0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _ExposureIBL.www;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float4 _Time;
					//   float4 _TintColor;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   unity_FogColor                 c1       1
					//   unity_FogParams                c2       1
					//   _AmbientColorDesaturation      c3       1
					//   _TintColor                     c4       1
					//   _DiffusePanningXYMaskPanningZW c5       1
					//   _MaskChannelSelector           c6       1
					//   _ExposureIBL                   c7       1
					//   _SH0                           c8       1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c9, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2.x
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.y, c0.y
					    mad r0, r0.y, c5, v1
					    texld r1, r0, s1
					    texld r0, r0.zwzw, s0
					    dp4 r0.x, r0, c6
					    add r1, r1, r1
					    mul r2, c4, v0
					    mul_pp r1, r1, r2
					    mul_pp oC0.w, r0.x, r1.w
					    mov r0.xyz, c8
					    dp3_pp r0.w, c9, r0
					    add r2.xyz, r0.w, -c8
					    mad r0.xyz, c3.x, r2, r0
					    mul r0.xyz, r0, r1
					    mov r1.xyz, c1
					    mad r0.xyz, c7.w, r0, -r1
					    mul r0.w, c2.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					
					// approximately 20 instruction slots used (2 texture, 18 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[11];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _ProjectionParams.z;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = u_xlat0 * unity_FogParams.x;
					    u_xlat0 = u_xlat0 * (-u_xlat0);
					    u_xlat0 = exp2(u_xlat0);
					    u_xlat4.x = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat4.xyz = u_xlat4.xxx + (-_SH0.xyz);
					    u_xlat4.xyz = vec3(_AmbientColorDesaturation) * u_xlat4.xyz + _SH0.xyz;
					    u_xlat1 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_Mask, u_xlat1.zw);
					    u_xlat1.x = dot(u_xlat1, _MaskChannelSelector);
					    u_xlat2 = u_xlat2 + u_xlat2;
					    u_xlat3 = vs_COLOR0 * _TintColor;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.x * u_xlat2.w;
					    u_xlat4.xyz = _ExposureIBL.www * u_xlat4.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat0) * u_xlat4.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   sampler2D _CameraDepthTexture;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float4 _Time;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   _ZBufferParams                 c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   _AmbientColorDesaturation      c4       1
					//   _TintColor                     c5       1
					//   _DiffusePanningXYMaskPanningZW c6       1
					//   _MaskChannelSelector           c7       1
					//   _ExposureIBL                   c8       1
					//   _SH0                           c9       1
					//   _InvFade                       c10      1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//   _CameraDepthTexture            s2       1
					//
					
					    ps_3_0
					    def c11, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2.x
					    dcl_texcoord2 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texldp r0, v3, s2
					    mad r0.x, c1.z, r0.x, c1.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v3.z
					    mul_sat r0.x, r0.x, c10.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c5
					    mov r1.y, c0.y
					    mad r1, r1.y, c6, v1
					    texld r2, r1, s1
					    texld r1, r1.zwzw, s0
					    dp4 r1.x, r1, c7
					    add r2, r2, r2
					    mul_pp r0, r0, r2
					    mul_pp oC0.w, r1.x, r0.w
					    mov r1.xyz, c9
					    dp3_pp r0.w, c11, r1
					    add r2.xyz, r0.w, -c9
					    mad r1.xyz, c4.x, r2, r1
					    mul r0.xyz, r0, r1
					    mov r1.xyz, c2
					    mad r0.xyz, c8.w, r0, -r1
					    mul r0.w, c3.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c2
					
					// approximately 27 instruction slots used (3 texture, 24 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3;
						vec4 _ZBufferParams;
						vec4 unused_1_5;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _ProjectionParams.z;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = u_xlat0 * unity_FogParams.x;
					    u_xlat0 = u_xlat0 * (-u_xlat0);
					    u_xlat0 = exp2(u_xlat0);
					    u_xlat4.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat4.xy);
					    u_xlat4.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD2.z);
					    u_xlat4.x = u_xlat4.x * _InvFade;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.w = u_xlat4.x * vs_COLOR0.w;
					    u_xlat1.xyz = vs_COLOR0.xyz;
					    u_xlat1 = u_xlat1 * _TintColor;
					    u_xlat2 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_Mask, u_xlat2.zw);
					    u_xlat4.x = dot(u_xlat2, _MaskChannelSelector);
					    u_xlat2 = u_xlat3 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat8 = dot(vec3(0.298999995, 0.587000012, 0.114), _SH0.xyz);
					    u_xlat2.xyz = vec3(u_xlat8) + (-_SH0.xyz);
					    u_xlat2.xyz = vec3(_AmbientColorDesaturation) * u_xlat2.xyz + _SH0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat4.x * u_xlat1.w;
					    u_xlat4.xyz = _ExposureIBL.www * u_xlat1.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat0) * u_xlat4.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _Time;
					//   float4 _TintColor;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   _AmbientColorDesaturation      c1       1
					//   _TintColor                     c2       1
					//   _DiffusePanningXYMaskPanningZW c3       1
					//   _MaskChannelSelector           c4       1
					//   _ExposureIBL                   c5       1
					//   _SH0                           c6       1
					//   _BlendWeightIBL                c7       1
					//   _ExposureIBL1                  c8       1
					//   _SH01                          c9       1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c10, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xyz, c9
					    add r1.xyz, -r0, c6
					    mad r0.xyz, c7.x, r1, r0
					    dp3_pp r0.w, c10, r0
					    lrp r1.xyz, c1.x, r0.w, r0
					    mov r0.y, c0.y
					    mad r0, r0.y, c3, v1
					    texld r2, r0, s1
					    texld r0, r0.zwzw, s0
					    dp4 r0.x, r0, c4
					    add r2, r2, r2
					    mul r3, c2, v0
					    mul_pp r2, r2, r3
					    mul r0.yzw, r1.xxyz, r2.xxyz
					    mul_pp oC0.w, r0.x, r2.w
					    mov r1.w, c8.w
					    add r0.x, -r1.w, c5.w
					    mad_pp r0.x, c7.x, r0.x, r1.w
					    mul_pp oC0.xyz, r0.yzww, r0.x
					
					// approximately 19 instruction slots used (2 texture, 17 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[12];
						vec3 _SH01;
						vec4 unused_0_13[11];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat0.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat0.xyz + _SH01.xyz;
					    u_xlat9 = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat0.xyz);
					    u_xlat1.xyz = (-u_xlat0.xyz) + vec3(u_xlat9);
					    u_xlat0.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_Mask, u_xlat1.zw);
					    u_xlat9 = dot(u_xlat1, _MaskChannelSelector);
					    u_xlat1 = u_xlat2 + u_xlat2;
					    u_xlat2 = vs_COLOR0 * _TintColor;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat9 * u_xlat1.w;
					    u_xlat9 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat9 = _BlendWeightIBL * u_xlat9 + _ExposureIBL1.w;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   sampler2D _CameraDepthTexture;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _Time;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   _ZBufferParams                 c1       1
					//   _AmbientColorDesaturation      c2       1
					//   _TintColor                     c3       1
					//   _DiffusePanningXYMaskPanningZW c4       1
					//   _MaskChannelSelector           c5       1
					//   _ExposureIBL                   c6       1
					//   _SH0                           c7       1
					//   _BlendWeightIBL                c8       1
					//   _ExposureIBL1                  c9       1
					//   _SH01                          c10      1
					//   _InvFade                       c11      1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//   _CameraDepthTexture            s2       1
					//
					
					    ps_3_0
					    def c12, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1
					    dcl_texcoord2 v2
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xyz, c10
					    add r1.xyz, -r0, c7
					    mad r0.xyz, c8.x, r1, r0
					    dp3_pp r0.w, c12, r0
					    lrp r1.xyz, c2.x, r0.w, r0
					    texldp r0, v2, s2
					    mad r0.x, c1.z, r0.x, c1.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v2.z
					    mul_sat r0.x, r0.x, c11.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c3
					    mov r2.y, c0.y
					    mad r2, r2.y, c4, v1
					    texld r3, r2, s1
					    texld r2, r2.zwzw, s0
					    dp4 r1.w, r2, c5
					    add r2, r3, r3
					    mul_pp r0, r0, r2
					    mul r0.xyz, r1, r0
					    mul_pp oC0.w, r1.w, r0.w
					    mov r0.w, c9.w
					    add r1.x, -r0.w, c6.w
					    mad_pp r0.w, c8.x, r1.x, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 26 instruction slots used (3 texture, 23 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[12];
						vec3 _SH01;
						vec4 unused_0_13[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[6];
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD2.z);
					    u_xlat0.x = u_xlat0.x * _InvFade;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.w = u_xlat0.x * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz;
					    u_xlat0 = u_xlat0 * _TintColor;
					    u_xlat1 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_Mask, u_xlat1.zw);
					    u_xlat1.x = dot(u_xlat1, _MaskChannelSelector);
					    u_xlat2 = u_xlat2 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    SV_Target0.w = u_xlat1.x * u_xlat0.w;
					    u_xlat1.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat1.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat1.xyz + _SH01.xyz;
					    u_xlat9 = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat1.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(u_xlat9);
					    u_xlat1.xyz = vec3(_AmbientColorDesaturation) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat9 = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat9 = _BlendWeightIBL * u_xlat9 + _ExposureIBL1.w;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _Time;
					//   float4 _TintColor;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   unity_FogColor                 c1       1
					//   unity_FogParams                c2       1
					//   _AmbientColorDesaturation      c3       1
					//   _TintColor                     c4       1
					//   _DiffusePanningXYMaskPanningZW c5       1
					//   _MaskChannelSelector           c6       1
					//   _ExposureIBL                   c7       1
					//   _SH0                           c8       1
					//   _BlendWeightIBL                c9       1
					//   _ExposureIBL1                  c10      1
					//   _SH01                          c11      1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c12, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color_pp v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2.x
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.y, c0.y
					    mad r0, r0.y, c5, v1
					    texld r1, r0, s1
					    texld r0, r0.zwzw, s0
					    dp4 r0.x, r0, c6
					    add r1, r1, r1
					    mul r2, c4, v0
					    mul_pp r1, r1, r2
					    mul_pp oC0.w, r0.x, r1.w
					    mov r0.xyz, c11
					    add r2.xyz, -r0, c8
					    mad r0.xyz, c9.x, r2, r0
					    dp3_pp r0.w, c12, r0
					    lrp r2.xyz, c3.x, r0.w, r0
					    mul r0.xyz, r1, r2
					    mov r0.w, c10.w
					    add r1.x, -r0.w, c7.w
					    mad_pp r0.w, c9.x, r1.x, r0.w
					    mad r0.xyz, r0.w, r0, -c1
					    mul r0.w, c2.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					
					// approximately 23 instruction slots used (2 texture, 21 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[12];
						vec3 _SH01;
						vec4 unused_0_13[11];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _ProjectionParams.z;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = u_xlat0 * unity_FogParams.x;
					    u_xlat0 = u_xlat0 * (-u_xlat0);
					    u_xlat0 = exp2(u_xlat0);
					    u_xlat4.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat4.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat4.xyz + _SH01.xyz;
					    u_xlat1.x = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat4.xyz);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xxx;
					    u_xlat4.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat1 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_Mask, u_xlat1.zw);
					    u_xlat1.x = dot(u_xlat1, _MaskChannelSelector);
					    u_xlat2 = u_xlat2 + u_xlat2;
					    u_xlat3 = vs_COLOR0 * _TintColor;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat2.xyz;
					    SV_Target0.w = u_xlat1.x * u_xlat2.w;
					    u_xlat1.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat1.x = _BlendWeightIBL * u_xlat1.x + _ExposureIBL1.w;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat0) * u_xlat4.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AmbientColorDesaturation;
					//   float _BlendWeightIBL;
					//   sampler2D _CameraDepthTexture;
					//   float4 _DiffusePanningXYMaskPanningZW;
					//   float4 _ExposureIBL;
					//   float4 _ExposureIBL1;
					//   float _InvFade;
					//   sampler2D _MainTex;
					//   sampler2D _Mask;
					//   float4 _MaskChannelSelector;
					//   float3 _SH0;
					//   float3 _SH01;
					//   float4 _Time;
					//   float4 _TintColor;
					//   float4 _ZBufferParams;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _Time                          c0       1
					//   _ZBufferParams                 c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   _AmbientColorDesaturation      c4       1
					//   _TintColor                     c5       1
					//   _DiffusePanningXYMaskPanningZW c6       1
					//   _MaskChannelSelector           c7       1
					//   _ExposureIBL                   c8       1
					//   _SH0                           c9       1
					//   _BlendWeightIBL                c10      1
					//   _ExposureIBL1                  c11      1
					//   _SH01                          c12      1
					//   _InvFade                       c13      1
					//   _Mask                          s0       1
					//   _MainTex                       s1       1
					//   _CameraDepthTexture            s2       1
					//
					
					    ps_3_0
					    def c14, 0.298999995, 0.587000012, 0.114, 0
					    dcl_color v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2.x
					    dcl_texcoord2 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texldp r0, v3, s2
					    mad r0.x, c1.z, r0.x, c1.w
					    rcp r0.x, r0.x
					    add r0.x, r0.x, -v3.z
					    mul_sat r0.x, r0.x, c13.x
					    mul_pp r0.w, r0.x, v0.w
					    mov_pp r0.xyz, v0
					    mul r0, r0, c5
					    mov r1.y, c0.y
					    mad r1, r1.y, c6, v1
					    texld r2, r1, s1
					    texld r1, r1.zwzw, s0
					    dp4 r1.x, r1, c7
					    add r2, r2, r2
					    mul_pp r0, r0, r2
					    mul_pp oC0.w, r1.x, r0.w
					    mov r1.xyz, c12
					    add r2.xyz, -r1, c9
					    mad r1.xyz, c10.x, r2, r1
					    dp3_pp r0.w, c14, r1
					    lrp r2.xyz, c4.x, r0.w, r1
					    mul r0.xyz, r0, r2
					    mov r0.w, c11.w
					    add r1.x, -r0.w, c8.w
					    mad_pp r0.w, c10.x, r1.x, r0.w
					    mad r0.xyz, r0.w, r0, -c2
					    mul r0.w, c3.x, v2.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c2
					
					// approximately 30 instruction slots used (3 texture, 27 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_EXP2" "SOFTPARTICLES_ON" "MARMO_TERRAIN_BLEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _AmbientColorDesaturation;
						vec4 _TintColor;
						vec4 _DiffusePanningXYMaskPanningZW;
						vec4 _MaskChannelSelector;
						vec4 unused_0_4[2];
						vec4 _ExposureIBL;
						vec4 unused_0_6[12];
						vec3 _SH0;
						vec4 unused_0_8[7];
						float _BlendWeightIBL;
						vec4 _ExposureIBL1;
						vec4 unused_0_11[12];
						vec3 _SH01;
						vec4 unused_0_13[10];
						float _InvFade;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3;
						vec4 _ZBufferParams;
						vec4 unused_1_5;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _Mask;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1 / _ProjectionParams.y;
					    u_xlat0 = (-u_xlat0) + 1.0;
					    u_xlat0 = u_xlat0 * _ProjectionParams.z;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = u_xlat0 * unity_FogParams.x;
					    u_xlat0 = u_xlat0 * (-u_xlat0);
					    u_xlat0 = exp2(u_xlat0);
					    u_xlat4.xyz = _SH0.xyz + (-_SH01.xyz);
					    u_xlat4.xyz = vec3(vec3(_BlendWeightIBL, _BlendWeightIBL, _BlendWeightIBL)) * u_xlat4.xyz + _SH01.xyz;
					    u_xlat1.x = dot(vec3(0.298999995, 0.587000012, 0.114), u_xlat4.xyz);
					    u_xlat1.xyz = (-u_xlat4.xyz) + u_xlat1.xxx;
					    u_xlat4.xyz = vec3(_AmbientColorDesaturation) * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat1.xy);
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-vs_TEXCOORD2.z);
					    u_xlat1.x = u_xlat1.x * _InvFade;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.w = u_xlat1.x * vs_COLOR0.w;
					    u_xlat1.xyz = vs_COLOR0.xyz;
					    u_xlat1 = u_xlat1 * _TintColor;
					    u_xlat2 = _Time.yyyy * _DiffusePanningXYMaskPanningZW + vs_TEXCOORD0;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_Mask, u_xlat2.zw);
					    u_xlat2.x = dot(u_xlat2, _MaskChannelSelector);
					    u_xlat3 = u_xlat3 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat2.x * u_xlat1.w;
					    u_xlat1.x = _ExposureIBL.w + (-_ExposureIBL1.w);
					    u_xlat1.x = _BlendWeightIBL * u_xlat1.x + _ExposureIBL1.w;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat0) * u_xlat4.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Transparent/Diffuse"
}