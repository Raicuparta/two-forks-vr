// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Pose p_perhand_PoseRightHand;
        
        private static SteamVR_Action_Skeleton p_perhand_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_perhand_SkeletonRightHand;
        
        private static SteamVR_Action_Boolean p_perhand_HeadsetOnHead;
        
        private static SteamVR_Action_Pose p_perhand_PoseLeftHand;
        
        private static SteamVR_Action_Boolean p_perhand_NextPage;
        
        private static SteamVR_Action_Boolean p_perhand_PreviousPage;
        
        private static SteamVR_Action_Boolean p_perhand_UIUp;
        
        private static SteamVR_Action_Boolean p_perhand_UIDown;
        
        private static SteamVR_Action_Boolean p_perhand_Recenter;
        
        private static SteamVR_Action_Vibration p_perhand_Haptic;
        
        private static SteamVR_Action_Boolean p_dominantHand_Interact;
        
        private static SteamVR_Action_Boolean p_dominantHand_ToolPicker;
        
        private static SteamVR_Action_Boolean p_dominantHand_StoreItem;
        
        private static SteamVR_Action_Boolean p_nonDominantHand_Radio;
        
        private static SteamVR_Action_Boolean p_nonDominantHand_Cancel;
        
        private static SteamVR_Action_Vector2 p_movementHand_Move;
        
        private static SteamVR_Action_Boolean p_movementHand_Teleport;
        
        private static SteamVR_Action_Boolean p_movementHand_Jog;
        
        private static SteamVR_Action_Vector2 p_rotationHand_Rotate;
        
        private static SteamVR_Action_Boolean p_rotationHand_SnapTurnLeft;
        
        private static SteamVR_Action_Boolean p_rotationHand_SnapTurnRight;
        
        private static SteamVR_Action_Boolean p_rotationHand_LocomotionAction;
        
        public static SteamVR_Action_Pose perhand_PoseRightHand
        {
            get
            {
                return SteamVR_Actions.p_perhand_PoseRightHand.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton perhand_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_perhand_SkeletonLeftHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton perhand_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_perhand_SkeletonRightHand.GetCopy <SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Boolean perhand_HeadsetOnHead
        {
            get
            {
                return SteamVR_Actions.p_perhand_HeadsetOnHead.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose perhand_PoseLeftHand
        {
            get
            {
                return SteamVR_Actions.p_perhand_PoseLeftHand.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Boolean perhand_NextPage
        {
            get
            {
                return SteamVR_Actions.p_perhand_NextPage.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean perhand_PreviousPage
        {
            get
            {
                return SteamVR_Actions.p_perhand_PreviousPage.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean perhand_UIUp
        {
            get
            {
                return SteamVR_Actions.p_perhand_UIUp.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean perhand_UIDown
        {
            get
            {
                return SteamVR_Actions.p_perhand_UIDown.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean perhand_Recenter
        {
            get
            {
                return SteamVR_Actions.p_perhand_Recenter.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration perhand_Haptic
        {
            get
            {
                return SteamVR_Actions.p_perhand_Haptic.GetCopy <SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Boolean dominantHand_Interact
        {
            get
            {
                return SteamVR_Actions.p_dominantHand_Interact.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean dominantHand_ToolPicker
        {
            get
            {
                return SteamVR_Actions.p_dominantHand_ToolPicker.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean dominantHand_StoreItem
        {
            get
            {
                return SteamVR_Actions.p_dominantHand_StoreItem.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean nonDominantHand_Radio
        {
            get
            {
                return SteamVR_Actions.p_nonDominantHand_Radio.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean nonDominantHand_Cancel
        {
            get
            {
                return SteamVR_Actions.p_nonDominantHand_Cancel.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 movementHand_Move
        {
            get
            {
                return SteamVR_Actions.p_movementHand_Move.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean movementHand_Teleport
        {
            get
            {
                return SteamVR_Actions.p_movementHand_Teleport.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean movementHand_Jog
        {
            get
            {
                return SteamVR_Actions.p_movementHand_Jog.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 rotationHand_Rotate
        {
            get
            {
                return SteamVR_Actions.p_rotationHand_Rotate.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean rotationHand_SnapTurnLeft
        {
            get
            {
                return SteamVR_Actions.p_rotationHand_SnapTurnLeft.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean rotationHand_SnapTurnRight
        {
            get
            {
                return SteamVR_Actions.p_rotationHand_SnapTurnRight.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean rotationHand_LocomotionAction
        {
            get
            {
                return SteamVR_Actions.p_rotationHand_LocomotionAction.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[]
            {
                    SteamVR_Actions.perhand_PoseRightHand,
                    SteamVR_Actions.perhand_SkeletonLeftHand,
                    SteamVR_Actions.perhand_SkeletonRightHand,
                    SteamVR_Actions.perhand_HeadsetOnHead,
                    SteamVR_Actions.perhand_PoseLeftHand,
                    SteamVR_Actions.perhand_NextPage,
                    SteamVR_Actions.perhand_PreviousPage,
                    SteamVR_Actions.perhand_UIUp,
                    SteamVR_Actions.perhand_UIDown,
                    SteamVR_Actions.perhand_Recenter,
                    SteamVR_Actions.perhand_Haptic,
                    SteamVR_Actions.dominantHand_Interact,
                    SteamVR_Actions.dominantHand_ToolPicker,
                    SteamVR_Actions.dominantHand_StoreItem,
                    SteamVR_Actions.nonDominantHand_Radio,
                    SteamVR_Actions.nonDominantHand_Cancel,
                    SteamVR_Actions.movementHand_Move,
                    SteamVR_Actions.movementHand_Teleport,
                    SteamVR_Actions.movementHand_Jog,
                    SteamVR_Actions.rotationHand_Rotate,
                    SteamVR_Actions.rotationHand_SnapTurnLeft,
                    SteamVR_Actions.rotationHand_SnapTurnRight,
                    SteamVR_Actions.rotationHand_LocomotionAction};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.perhand_PoseRightHand,
                    SteamVR_Actions.perhand_SkeletonLeftHand,
                    SteamVR_Actions.perhand_SkeletonRightHand,
                    SteamVR_Actions.perhand_HeadsetOnHead,
                    SteamVR_Actions.perhand_PoseLeftHand,
                    SteamVR_Actions.perhand_NextPage,
                    SteamVR_Actions.perhand_PreviousPage,
                    SteamVR_Actions.perhand_UIUp,
                    SteamVR_Actions.perhand_UIDown,
                    SteamVR_Actions.perhand_Recenter,
                    SteamVR_Actions.dominantHand_Interact,
                    SteamVR_Actions.dominantHand_ToolPicker,
                    SteamVR_Actions.dominantHand_StoreItem,
                    SteamVR_Actions.nonDominantHand_Radio,
                    SteamVR_Actions.nonDominantHand_Cancel,
                    SteamVR_Actions.movementHand_Move,
                    SteamVR_Actions.movementHand_Teleport,
                    SteamVR_Actions.movementHand_Jog,
                    SteamVR_Actions.rotationHand_Rotate,
                    SteamVR_Actions.rotationHand_SnapTurnLeft,
                    SteamVR_Actions.rotationHand_SnapTurnRight,
                    SteamVR_Actions.rotationHand_LocomotionAction};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[]
            {
                    SteamVR_Actions.perhand_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[]
            {
                    SteamVR_Actions.perhand_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[]
            {
                    SteamVR_Actions.perhand_PoseRightHand,
                    SteamVR_Actions.perhand_PoseLeftHand};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[]
            {
                    SteamVR_Actions.perhand_HeadsetOnHead,
                    SteamVR_Actions.perhand_NextPage,
                    SteamVR_Actions.perhand_PreviousPage,
                    SteamVR_Actions.perhand_UIUp,
                    SteamVR_Actions.perhand_UIDown,
                    SteamVR_Actions.perhand_Recenter,
                    SteamVR_Actions.dominantHand_Interact,
                    SteamVR_Actions.dominantHand_ToolPicker,
                    SteamVR_Actions.dominantHand_StoreItem,
                    SteamVR_Actions.nonDominantHand_Radio,
                    SteamVR_Actions.nonDominantHand_Cancel,
                    SteamVR_Actions.movementHand_Teleport,
                    SteamVR_Actions.movementHand_Jog,
                    SteamVR_Actions.rotationHand_SnapTurnLeft,
                    SteamVR_Actions.rotationHand_SnapTurnRight,
                    SteamVR_Actions.rotationHand_LocomotionAction};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[0];
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[]
            {
                    SteamVR_Actions.movementHand_Move,
                    SteamVR_Actions.rotationHand_Rotate};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[]
            {
                    SteamVR_Actions.perhand_SkeletonLeftHand,
                    SteamVR_Actions.perhand_SkeletonRightHand};
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.perhand_HeadsetOnHead,
                    SteamVR_Actions.perhand_NextPage,
                    SteamVR_Actions.perhand_PreviousPage,
                    SteamVR_Actions.perhand_UIUp,
                    SteamVR_Actions.perhand_UIDown,
                    SteamVR_Actions.perhand_Recenter,
                    SteamVR_Actions.dominantHand_Interact,
                    SteamVR_Actions.dominantHand_ToolPicker,
                    SteamVR_Actions.dominantHand_StoreItem,
                    SteamVR_Actions.nonDominantHand_Radio,
                    SteamVR_Actions.nonDominantHand_Cancel,
                    SteamVR_Actions.movementHand_Move,
                    SteamVR_Actions.movementHand_Teleport,
                    SteamVR_Actions.movementHand_Jog,
                    SteamVR_Actions.rotationHand_Rotate,
                    SteamVR_Actions.rotationHand_SnapTurnLeft,
                    SteamVR_Actions.rotationHand_SnapTurnRight,
                    SteamVR_Actions.rotationHand_LocomotionAction};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_perhand_PoseRightHand = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/perhand/in/PoseRightHand")));
            SteamVR_Actions.p_perhand_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/perhand/in/SkeletonLeftHand")));
            SteamVR_Actions.p_perhand_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create <SteamVR_Action_Skeleton>("/actions/perhand/in/SkeletonRightHand")));
            SteamVR_Actions.p_perhand_HeadsetOnHead = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/perhand/in/HeadsetOnHead")));
            SteamVR_Actions.p_perhand_PoseLeftHand = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/perhand/in/PoseLeftHand")));
            SteamVR_Actions.p_perhand_NextPage = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/perhand/in/NextPage")));
            SteamVR_Actions.p_perhand_PreviousPage = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/perhand/in/PreviousPage")));
            SteamVR_Actions.p_perhand_UIUp = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/perhand/in/UIUp")));
            SteamVR_Actions.p_perhand_UIDown = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/perhand/in/UIDown")));
            SteamVR_Actions.p_perhand_Recenter = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/perhand/in/Recenter")));
            SteamVR_Actions.p_perhand_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create <SteamVR_Action_Vibration>("/actions/perhand/out/Haptic")));
            SteamVR_Actions.p_dominantHand_Interact = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/DominantHand/in/Interact")));
            SteamVR_Actions.p_dominantHand_ToolPicker = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/DominantHand/in/ToolPicker")));
            SteamVR_Actions.p_dominantHand_StoreItem = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/DominantHand/in/StoreItem")));
            SteamVR_Actions.p_nonDominantHand_Radio = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/NonDominantHand/in/Radio")));
            SteamVR_Actions.p_nonDominantHand_Cancel = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/NonDominantHand/in/Cancel")));
            SteamVR_Actions.p_movementHand_Move = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/MovementHand/in/Move")));
            SteamVR_Actions.p_movementHand_Teleport = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/MovementHand/in/Teleport")));
            SteamVR_Actions.p_movementHand_Jog = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/MovementHand/in/Jog")));
            SteamVR_Actions.p_rotationHand_Rotate = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/RotationHand/in/Rotate")));
            SteamVR_Actions.p_rotationHand_SnapTurnLeft = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/RotationHand/in/SnapTurnLeft")));
            SteamVR_Actions.p_rotationHand_SnapTurnRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/RotationHand/in/SnapTurnRight")));
            SteamVR_Actions.p_rotationHand_LocomotionAction = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/RotationHand/in/LocomotionAction")));
        }
    }
}
